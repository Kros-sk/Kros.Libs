using Kros.KORM.Query.Providers;

namespace Kros.KORM.Query.Sql
{
    /// <summary>
    /// Information about SQL query generated by <see cref="ISqlExpressionVisitor"/>.
    /// </summary>
    /// <remarks>
    /// <para>
    /// <see cref="QueryInfo"/> contains SQL query itself (<see cref="QueryInfo.Query"/>) and may also contain reader
    /// for that query. Reader is uset in situations where database engine cannot handle query correctly. For example
    /// when offset is used (<c>Skip</c> method in Linq), SQL Server older than 2008 is not able to ally it. In this case,
    /// query itself does not know about limit, but special reader is created (<see cref="LimitOffsetDataReader"/>,
    /// which will skip first N rows manually.
    /// </para>
    /// </remarks>
    public class QueryInfo
    {
        /// <summary>
        /// Creates an instance with specified <paramref name="query"/>.
        /// </summary>
        /// <param name="query">SQL query.</param>
        public QueryInfo(string query)
            : this(query, null)
        {
        }

        /// <summary>
        /// Creates an instance with specified <paramref name="query"/> and <paramref name="reader"/>.
        /// </summary>
        /// <param name="query">SQL query.</param>
        /// <param name="reader">Reader used for query, if database engine itself cannot handle query itself.</param>
        public QueryInfo(string query, IDataReaderEnvelope reader)
        {
            Query = query;
            Reader = reader;
        }

        /// <summary>
        /// SQL query.
        /// </summary>
        public string Query { get; }

        /// <summary>
        /// Reader used for query, if database engine itself cannot handle query itself.
        /// </summary>
        public IDataReaderEnvelope Reader { get; }
    }
}
