using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using System.Threading.Tasks;

namespace Kros.Net
{
    /// <summary>
    /// Extension methods for <see cref="HttpClient"/> class.
    /// </summary>
    public static class HttpClientExtensions
    {
        /// <summary>
        /// Web form's field name for anti-forgery token. The name is <c>__RequestVerificationToken</c>.
        /// </summary>
        public const string AntiForgeryTokenFieldName = "__RequestVerificationToken";

#if netcoreapp
        /// <summary>
        /// Makes a GET request to the URI <paramref name="requestUri"/> and acquires the anti-forgery token from the response.
        /// Than makes a POST request to the same URI with acquired anti-forgery token and the data <paramref name="data"/>.
        /// This POST's response is returned.
        /// </summary>
        /// <typeparam name="T">Type of the request data.</typeparam>
        /// <param name="client">HTTP client, which makes the requests.</param>
        /// <param name="requestUri">Requests URI.</param>
        /// <param name="data">Data which are sent with the POST request. The value can be <see langword="null"/>.</param>
        /// <returns>Response from the POST request.</returns>
        /// <remarks>
        /// <para>This method is useful mainly in integration tests of controllers, when you need to POST a form which
        /// requires anti-forgery token. This token is generated by the GET request of the form.</para>
        /// <para>This method is available only in .NET Core version of the library.</para>
        /// </remarks>
        public static async Task<HttpResponseMessage> GetAntiForgeryTokenAndPostAsync<T>(
            this HttpClient client,
            string requestUri,
            T data)
        {
            HttpResponseMessage getResponse = await client.GetAsync(requestUri);
            string antiForgeryToken = await getResponse.GetAntiForgeryTokenAsync();

            var postRequest = new HttpRequestMessage(HttpMethod.Post, requestUri)
            {
                Content = new FormUrlEncodedContent(CreateFormPostData(data, antiForgeryToken))
            };
            postRequest.CopyCookiesFromResponse(getResponse);

            return await client.SendAsync(postRequest);
        }

        /// <summary>
        /// From data object <paramref name="data"/> creates a list of data values for web form
        /// (<see cref="FormUrlEncodedContent"/>).
        /// </summary>
        /// <typeparam name="T">Type of data.</typeparam>
        /// <param name="data">Data object. Value can be <see langword="null"/>.</param>
        /// <returns>List of data. Empty list is returned if no data was provided.</returns>
        /// <remarks>
        /// <para>Resulting list is created from all the public non-indexed properties of object <paramref name="data"/>.</para>
        /// <para>This method is available only in .NET Core version of the library.</para>
        /// </remarks>
        public static List<KeyValuePair<string, string>> CreateFormPostData<T>(T data) => CreateFormPostData(data, null);

        /// <summary>
        /// From data object <paramref name="data"/> creates a list of data values for web form (<see cref="FormUrlEncodedContent"/>).
        /// </summary>
        /// <typeparam name="T">Type of data.</typeparam>
        /// <param name="data">Data object. Value can be <see langword="null"/>.</param>
        /// <param name="antiForgeryToken">Anti-forgery token. If present, it is added to the list.</param>
        /// <returns>List of data. Empty list is returned if no data was provided.</returns>
        /// <remarks><para>Resulting list is created from all the public non-indexed properties of object <paramref name="data"/>.
        /// If <paramref name="antiForgeryToken"/> is provided, it is added to the list with the key
        /// <see cref="AntiForgeryTokenFieldName"/>.</para>
        /// <para>This method is available only in .NET Core version of the library.</para>
        /// </remarks>
        public static List<KeyValuePair<string, string>> CreateFormPostData<T>(T data, string antiForgeryToken)
        {
            var result = new List<KeyValuePair<string, string>>();

            if (data != null)
            {
                foreach (PropertyInfo prop in typeof(T).GetProperties().Where(p => p.CanRead && (p.GetIndexParameters().Length == 0)))
                {
                    object propValue = prop.GetValue(data);
                    if ((propValue is IEnumerable propValues) && !(propValue is string))
                    {
                        foreach (object value in propValues)
                        {
                            if (value != null)
                            {
                                result.Add(new KeyValuePair<string, string>(prop.Name, value.ToString()));
                            }
                        }
                    }
                    else if (propValue != null)
                    {
                        result.Add(new KeyValuePair<string, string>(prop.Name, propValue.ToString()));
                    }
                }
            }

            if (!string.IsNullOrEmpty(antiForgeryToken))
            {
                result.Add(new KeyValuePair<string, string>(AntiForgeryTokenFieldName, antiForgeryToken));
            }

            return result;
        }
#endif
    }
}
