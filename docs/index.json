{
  "index.html": {
    "href": "index.html",
    "title": "Welcome to Kros.Libs | Kros.Libs",
    "keywords": "Welcome to Kros.Libs This is Kros.Utils, Kros.Utils.MsAccess, Kros.KORM and Kros.KORM.MsAccess libraries documentation. View in GitHub | Download Latest Kros.Utils Universal library of various tools to simplify the work of the programmer. It is platform-independent (also applicable to desktop applications and server services) and is independent of third-party libraries. Kros.Utils.MsAccess Kros.Utils library extension for MS Access support. Only applicable in the full .NET framework. Kros.KORM Simple and fast micro-ORM framework for .NET. Kros.KORM.MsAccess Kros.KORM library extension for MS Access support. Only applicable in the full .NET framework."
  },
  "api/Kros.KORM/Kros.KORM.Materializer.ModelBuilder.ModelBuilderEnumerable-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.Materializer.ModelBuilder.ModelBuilderEnumerable-1.html",
    "title": "Class ModelBuilder.ModelBuilderEnumerable<T> | Kros.Libs",
    "keywords": "Class ModelBuilder.ModelBuilderEnumerable<T> Enumerable which support iteration over the materialized models. Inheritance System.Object ModelBuilder.ModelBuilderEnumerable<T> Namespace : Kros.KORM.Materializer Assembly : Kros.KORM.dll Syntax public class ModelBuilderEnumerable<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Methods GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the collection. See Also System.Collections.Generic.IEnumerable <T>"
  },
  "api/Kros.KORM/Kros.KORM.Metadata.Attribute.NoMapAttribute.html": {
    "href": "api/Kros.KORM/Kros.KORM.Metadata.Attribute.NoMapAttribute.html",
    "title": "Class NoMapAttribute | Kros.Libs",
    "keywords": "Class NoMapAttribute Attribute, which describe property, which doesn't exist in database. Inheritance System.Object System.Attribute NoMapAttribute Namespace : Kros.KORM.Metadata.Attribute Assembly : Kros.KORM.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class NoMapAttribute : Attribute, _Attribute"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessParseDefaultValueEventArgs.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessParseDefaultValueEventArgs.html",
    "title": "Class MsAccessParseDefaultValueEventArgs | Kros.Libs",
    "keywords": "Class MsAccessParseDefaultValueEventArgs Argumenty pre udalosť ParseDefaultValue . Inheritance System.Object System.EventArgs MsAccessParseDefaultValueEventArgs Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessParseDefaultValueEventArgs : EventArgs Constructors MsAccessParseDefaultValueEventArgs(String, String, OleDbType, String, Object) Vytvorí inštanciu so zadanými parametrami. Declaration public MsAccessParseDefaultValueEventArgs(string tableName, string columnName, OleDbType oleDbType, string defaultValueString, object defaultValue) Parameters Type Name Description System.String tableName Meno tabuľky ktorej schéma sa načítava. System.String columnName Meno stĺpca, ktorého predvolená hodnota sa parsuje. System.Data.OleDb.OleDbType oleDbType Dátový typ stĺpca, ktorého predvolená hodnota sa parsuje. System.String defaultValueString Predvolená hodnota stĺpca, tzn. reťazec, ktorý sa parsuje. System.Object defaultValue Hodnota, ktorá bola získaná štandardným parserom. Properties ColumnName Meno stĺpca, ktorého predvolená hodnota sa parsuje. Declaration public string ColumnName { get; } Property Value Type Description System.String DefaultValue Hodnota, ktorá bola získaná štandardným parserom. Pri vlastnej obsluhe je potrebné tu nastaviť vlastnú hodnotu. Declaration public object DefaultValue { get; set; } Property Value Type Description System.Object DefaultValueString Predvolená hodnota stĺpca, tzn. reťazec, ktorý sa parsuje. Declaration public string DefaultValueString { get; } Property Value Type Description System.String Handled Je potrebné nastaviť na true , ak bola v obsluhe udalosti nastavená vlastná hodnota DefaultValue . Declaration public bool Handled { get; set; } Property Value Type Description System.Boolean OleDbType Dátový typ stĺpca, ktorého predvolená hodnota sa parsuje. Declaration public OleDbType OleDbType { get; } Property Value Type Description System.Data.OleDb.OleDbType TableName Meno tabuľky ktorej schéma sa načítava. Declaration public string TableName { get; } Property Value Type Description System.String"
  },
  "api/Kros.KORM/Kros.KORM.Metadata.Attribute.KeyAttribute.html": {
    "href": "api/Kros.KORM/Kros.KORM.Metadata.Attribute.KeyAttribute.html",
    "title": "Class KeyAttribute | Kros.Libs",
    "keywords": "Class KeyAttribute Attribute, which describe property, which are part of primary key. Inheritance System.Object System.Attribute KeyAttribute Namespace : Kros.KORM.Metadata.Attribute Assembly : Kros.KORM.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public class KeyAttribute : Attribute, _Attribute Constructors KeyAttribute() Initializes a new instance of the KeyAttribute class. Declaration public KeyAttribute() KeyAttribute(AutoIncrementMethodType) Initializes a new instance of the KeyAttribute class. Declaration public KeyAttribute(AutoIncrementMethodType autoIncrementMethodType) Parameters Type Name Description AutoIncrementMethodType autoIncrementMethodType Type of primary key auto increment method. KeyAttribute(String) Initializes a new instance of the KeyAttribute class. Declaration public KeyAttribute(string name) Parameters Type Name Description System.String name The key name. KeyAttribute(String, AutoIncrementMethodType) Initializes a new instance of the KeyAttribute class. Declaration public KeyAttribute(string name, AutoIncrementMethodType autoIncrementMethodType) Parameters Type Name Description System.String name The key name. AutoIncrementMethodType autoIncrementMethodType Type of primary key auto increment method. Properties AutoIncrementMethodType Type of primary key auto increment method. Declaration public AutoIncrementMethodType AutoIncrementMethodType { get; } Property Value Type Description AutoIncrementMethodType Name Gets the name of key. Declaration public string Name { get; } Property Value Type Description System.String"
  },
  "api/Kros.KORM/Kros.KORM.Query.CommandParameterCollection.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.CommandParameterCollection.html",
    "title": "Class CommandParameterCollection | Kros.Libs",
    "keywords": "Class CommandParameterCollection Zoznam parametrov pre pre SQL príkaz ( ExecuteNonQuery(String) ), alebo stored procedúru ( ExecuteStoredProcedure<TResult>(String) ). Inheritance System.Object System.Collections.ObjectModel.Collection < CommandParameter > System.Collections.ObjectModel.KeyedCollection < System.String , CommandParameter > CommandParameterCollection Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public class CommandParameterCollection : KeyedCollection<string, CommandParameter>, IList<CommandParameter>, ICollection<CommandParameter>, IList, ICollection, IReadOnlyList<CommandParameter>, IReadOnlyCollection<CommandParameter>, IEnumerable<CommandParameter>, IEnumerable Constructors CommandParameterCollection() Vytvorí inštanciu triedy. V názvoch parametrov, ktoré predstavujú kľúč do slovníka, nezáleží na veľkosti písmen. Declaration public CommandParameterCollection() Methods Add(String, Object) Pridá do zoznamu nový parameter so zadanými hodnotami. Declaration public CommandParameter Add(string parameterName, object value) Parameters Type Name Description System.String parameterName Meno parametra. System.Object value Hodnota parametra. Returns Type Description CommandParameter Pridaný parameter. Add(String, Object, DbType) Pridá do zoznamu nový parameter so zadanými hodnotami. Declaration public CommandParameter Add(string parameterName, object value, DbType dataType) Parameters Type Name Description System.String parameterName Meno parametra. System.Object value Hodnota parametra. System.Data.DbType dataType Dátový typ parametra. Returns Type Description CommandParameter Pridaný parameter. Add(String, Object, ParameterDirection) Pridá do zoznamu nový parameter so zadanými hodnotami. Declaration public CommandParameter Add(string parameterName, object value, ParameterDirection direction) Parameters Type Name Description System.String parameterName Meno parametra. System.Object value Hodnota parametra. System.Data.ParameterDirection direction Druh parametra. Zmysel má len pri parametroch pre stored procedúry. Returns Type Description CommandParameter Pridaný parameter. Add(String, Object, Nullable<DbType>, ParameterDirection) Pridá do zoznamu nový parameter so zadanými hodnotami. Declaration public CommandParameter Add(string parameterName, object value, DbType? dataType, ParameterDirection direction) Parameters Type Name Description System.String parameterName Meno parametra. System.Object value Hodnota parametra. System.Nullable < System.Data.DbType > dataType Dátový typ parametra. System.Data.ParameterDirection direction Druh parametra. Zmysel má len pri parametroch pre stored procedúry. Returns Type Description CommandParameter Pridaný parameter. GetKeyForItem(CommandParameter) Vráti kľuč do slovníka, čo je meno parametra ParameterName . Declaration protected override string GetKeyForItem(CommandParameter item) Parameters Type Name Description CommandParameter item Parameter, pre ktorý sa zíkava kľúč. Returns Type Description System.String Reťazec - meno parametra. Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.KORM.Query.CommandParameter>.GetKeyForItem(Kros.KORM.Query.CommandParameter)"
  },
  "api/Kros.KORM/Kros.KORM.Query.Expressions.SqlExpression.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Expressions.SqlExpression.html",
    "title": "Class SqlExpression | Kros.Libs",
    "keywords": "Class SqlExpression Expression, which represent sql query. Inheritance System.Object System.Linq.Expressions.Expression QueryExpression ArgsExpression SqlExpression Inherited Members ArgsExpression.Sql ArgsExpression.Parameters QueryExpression.NodeType QueryExpression.Type Namespace : Kros.KORM.Query.Expressions Assembly : Kros.KORM.dll Syntax public class SqlExpression : ArgsExpression Constructors SqlExpression(String, Object[]) Initializes a new instance of the SqlExpression class. Declaration public SqlExpression(string sqlQuery, params object[] args) Parameters Type Name Description System.String sqlQuery The SQL query. System.Object [] args Where args. Methods Accept(ExpressionVisitor) Dispatches to the specific visit method for this node type. For example, System.Linq.Expressions.MethodCallExpression calls the System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression) . Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor The visitor to visit this node with. Returns Type Description System.Linq.Expressions.Expression The result of visiting this node. Overrides System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor) See Also ISqlExpressionVisitor"
  },
  "api/Kros.KORM/Kros.KORM.Query.IProjectionQuery-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.IProjectionQuery-1.html",
    "title": "Interface IProjectionQuery<T> | Kros.Libs",
    "keywords": "Interface IProjectionQuery<T> Represent result of projection operation. Inherited Members IQueryBase<T>.AsDbSet() IQueryBase<T>.ExecuteScalar() IQueryBase<T>.ExecuteStringScalar() IQueryBase<T>.ExecuteScalar<TRet>() Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public interface IProjectionQuery<T> : IQueryBase<T>, IOrderedQueryable<T>, IQueryable<T>, IEnumerable<T>, IOrderedQueryable, IQueryable, IEnumerable Type Parameters Name Description T Type of model class. Methods Any(String, Object[]) Check if exist elements in the table which match condition. Declaration bool Any(string whereCondition, params object[] args) Parameters Type Name Description System.String whereCondition The where condition. System.Object [] args The arguments for where. Returns Type Description System.Boolean true if exist elements in the table which match condition; otherwise, false. Examples Exceptions Type Condition System.ArgumentNullException if whereCondition is null or white string. FirstOrDefault(String, Object[]) Returns the first item of which match where condition, or a default value if item doesn't exist. Declaration T FirstOrDefault(string whereCondition, params object[] args) Parameters Type Name Description System.String whereCondition The where condition. System.Object [] args The arguments for where. Returns Type Description T null if item doesn't exist; otherwise, the first item which match the condition. Examples var item = query.FirstOrDefault(\"Id = @1\", 22); Exceptions Type Condition System.ArgumentNullException if whereCondition is null or white string. GroupBy(String) Add group by statement to sql query. Declaration IGroupedQuery<T> GroupBy(string groupBy) Parameters Type Name Description System.String groupBy The group by statement. Returns Type Description IGroupedQuery <T> Query for enumerable models. Remarks You can also add HAVING statement. Examples Exceptions Type Condition System.ArgumentNullException if groupBy is null or white string. OrderBy(String) Add order by statement to sql. Declaration IOrderedQuery<T> OrderBy(string orderBy) Parameters Type Name Description System.String orderBy The order by statement. Returns Type Description IOrderedQuery <T> Query for enumerable models. Examples Exceptions Type Condition System.ArgumentNullException if orderBy is null or white string. Where(String, Object[]) Add where condition to sql. Declaration IFilteredQuery<T> Where(string whereCondition, params object[] args) Parameters Type Name Description System.String whereCondition The where condition. System.Object [] args The arguments for where. Returns Type Description IFilteredQuery <T> Query for enumerable models. Examples Exceptions Type Condition System.ArgumentNullException if whereCondition is null or white string. See Also IQueryBase <T>"
  },
  "api/Kros.KORM/Kros.KORM.Query.Sql.ParameterExtractingExpressionVisitor.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Sql.ParameterExtractingExpressionVisitor.html",
    "title": "Class ParameterExtractingExpressionVisitor | Kros.Libs",
    "keywords": "Class ParameterExtractingExpressionVisitor Class for extracting parameters from Expression. Inheritance System.Object System.Linq.Expressions.ExpressionVisitor ParameterExtractingExpressionVisitor Namespace : Kros.KORM.Query.Sql Assembly : Kros.KORM.dll Syntax public class ParameterExtractingExpressionVisitor : ExpressionVisitor Methods ExtractParametersToCommand(DbCommand, Expression) Extracts the parrameters to command. Declaration public static void ExtractParametersToCommand(DbCommand command, Expression expression) Parameters Type Name Description System.Data.Common.DbCommand command The command. System.Linq.Expressions.Expression expression The expression. Visit(Expression) Dispatches the expression to one of the more specialized visit methods in this class. Declaration public override Expression Visit(Expression node) Parameters Type Name Description System.Linq.Expressions.Expression node The expression to visit. Returns Type Description System.Linq.Expressions.Expression The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. Overrides System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression) See Also System.Linq.Expressions.ExpressionVisitor"
  },
  "api/Kros.KORM/Kros.KORM.Query.Sql.SqlServerQuerySqlGenerator.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Sql.SqlServerQuerySqlGenerator.html",
    "title": "Class SqlServerQuerySqlGenerator | Kros.Libs",
    "keywords": "Class SqlServerQuerySqlGenerator Generator sql query for SQL server. Inheritance System.Object System.Linq.Expressions.ExpressionVisitor DefaultQuerySqlGenerator SqlServerQuerySqlGenerator Implements ISqlExpressionVisitor Inherited Members DefaultQuerySqlGenerator.DatabaseMapper DefaultQuerySqlGenerator.BindAnyCondition(String) DefaultQuerySqlGenerator.VisitSql(SqlExpression) DefaultQuerySqlGenerator.VisitSelect(SelectExpression) DefaultQuerySqlGenerator.VisitColumns(ColumnsExpression) DefaultQuerySqlGenerator.VisitTable(TableExpression) DefaultQuerySqlGenerator.VisitWhere(WhereExpression) DefaultQuerySqlGenerator.VisitGroupBy(GroupByExpression) DefaultQuerySqlGenerator.VisitOrderBy(OrderByExpression) DefaultQuerySqlGenerator.SelectExpression DefaultQuerySqlGenerator.LinqStringBuilder DefaultQuerySqlGenerator.LinqParameters DefaultQuerySqlGenerator.Visit(Expression) DefaultQuerySqlGenerator.VisitMethodCall(MethodCallExpression) DefaultQuerySqlGenerator.VisitVbOperatorsMethods(MethodCallExpression, ExpressionType) DefaultQuerySqlGenerator.VisitCompare(MethodCallExpression, ExpressionType) DefaultQuerySqlGenerator.VisitLinqExpression(MethodCallExpression) DefaultQuerySqlGenerator.VisitAny(MethodCallExpression) DefaultQuerySqlGenerator.VisitTake(MethodCallExpression) DefaultQuerySqlGenerator.VisitAggregate(MethodCallExpression, String) DefaultQuerySqlGenerator.VisitCount(MethodCallExpression) DefaultQuerySqlGenerator.VisitWhere(MethodCallExpression) DefaultQuerySqlGenerator.VisitFirst(MethodCallExpression) DefaultQuerySqlGenerator.VisitUnary(UnaryExpression) DefaultQuerySqlGenerator.VisitBinary(BinaryExpression) DefaultQuerySqlGenerator.GetOperator(BinaryExpression) DefaultQuerySqlGenerator.VisitConstant(ConstantExpression) DefaultQuerySqlGenerator.VisitMember(MemberExpression) DefaultQuerySqlGenerator.VisitStringMethods(MethodCallExpression) DefaultQuerySqlGenerator.BindTrim(MethodCallExpression) DefaultQuerySqlGenerator.BindSubstring(MethodCallExpression) DefaultQuerySqlGenerator.BindReplace(MethodCallExpression) DefaultQuerySqlGenerator.BindToLower(MethodCallExpression) DefaultQuerySqlGenerator.BindToUpper(MethodCallExpression) DefaultQuerySqlGenerator.BindIsNullOrEmpty(MethodCallExpression) DefaultQuerySqlGenerator.BindContains(MethodCallExpression) DefaultQuerySqlGenerator.BindEndWith(MethodCallExpression) DefaultQuerySqlGenerator.BindStartWith(MethodCallExpression) Namespace : Kros.KORM.Query.Sql Assembly : Kros.KORM.dll Syntax public class SqlServerQuerySqlGenerator : DefaultQuerySqlGenerator, ISqlExpressionVisitor Constructors SqlServerQuerySqlGenerator(IDatabaseMapper) Constructor. Declaration public SqlServerQuerySqlGenerator(IDatabaseMapper databaseMapper) Parameters Type Name Description IDatabaseMapper databaseMapper Database mapper. Methods GenerateSql(Expression) Generates the SQL from expression. Declaration public override string GenerateSql(Expression expression) Parameters Type Name Description System.Linq.Expressions.Expression expression The expression. Returns Type Description System.String SQL select command text. Overrides DefaultQuerySqlGenerator.GenerateSql(Expression) Implements ISqlExpressionVisitor See Also DefaultQuerySqlGenerator"
  },
  "api/Kros.KORM/Kros.KORM.Exceptions.CompositePrimaryKeyException.html": {
    "href": "api/Kros.KORM/Kros.KORM.Exceptions.CompositePrimaryKeyException.html",
    "title": "Class CompositePrimaryKeyException | Kros.Libs",
    "keywords": "Class CompositePrimaryKeyException Exception class for composite primary key. Inheritance System.Object System.Exception CompositePrimaryKeyException Namespace : Kros.KORM.Exceptions Assembly : Kros.KORM.dll Syntax public class CompositePrimaryKeyException : Exception, ISerializable, _Exception Constructors CompositePrimaryKeyException(String) Initializes a new instance of the CompositePrimaryKeyException class. Declaration public CompositePrimaryKeyException(string message) Parameters Type Name Description System.String message Exception message."
  },
  "api/Kros.KORM/Kros.KORM.Query.Expressions.GroupByExpression.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Expressions.GroupByExpression.html",
    "title": "Class GroupByExpression | Kros.Libs",
    "keywords": "Class GroupByExpression Expression, which represent GROUP BY statement from sql select query. Inheritance System.Object System.Linq.Expressions.Expression QueryExpression GroupByExpression Inherited Members QueryExpression.NodeType QueryExpression.Type Namespace : Kros.KORM.Query.Expressions Assembly : Kros.KORM.dll Syntax public class GroupByExpression : QueryExpression Constructors GroupByExpression(String) Initializes a new instance of the GroupByExpression class. Declaration public GroupByExpression(string groupBy) Parameters Type Name Description System.String groupBy The groupBy part of sql. Remarks Group by columns are separate by , GroupByExpression(String[]) Initializes a new instance of the GroupByExpression class. Declaration public GroupByExpression(params string[] groupBy) Parameters Type Name Description System.String [] groupBy The groupBy. Fields GroupByStatement The group by statement Declaration public const string GroupByStatement = \"GROUP BY\" Field Value Type Description System.String Properties GroupByPart Gets or sets the group by part. Declaration public string GroupByPart { get; } Property Value Type Description System.String Methods Accept(ExpressionVisitor) Dispatches to the specific visit method for this node type. For example, System.Linq.Expressions.MethodCallExpression calls the System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression) . Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor The visitor to visit this node with. Returns Type Description System.Linq.Expressions.Expression The result of visiting this node. Overrides System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor) Create<T, TResult>(Func<T, TResult>) Creates the GroupByExpression by selector. Declaration public static GroupByExpression Create<T, TResult>(Func<T, TResult> selector) where T : new() Parameters Type Name Description System.Func <T, TResult> selector The selector. Returns Type Description GroupByExpression GroupByExpression Type Parameters Name Description T Type of model class. TResult The type of the result. See Also ISqlExpressionVisitor"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.BulkActions.MsAccess.MsAccessBulkInsertColumnCollection.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.BulkActions.MsAccess.MsAccessBulkInsertColumnCollection.html",
    "title": "Class MsAccessBulkInsertColumnCollection | Kros.Libs",
    "keywords": "Class MsAccessBulkInsertColumnCollection Zoznam stĺpcov pre hromadné vkladanie do MS Access tabuľky z CSV súboru ( MsAccessBulkInsert ). Inheritance System.Object System.Collections.Generic.List < MsAccessBulkInsertColumn > MsAccessBulkInsertColumnCollection Namespace : Kros.Data.BulkActions.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessBulkInsertColumnCollection : List<MsAccessBulkInsertColumn>, IList<MsAccessBulkInsertColumn>, ICollection<MsAccessBulkInsertColumn>, IList, ICollection, IReadOnlyList<MsAccessBulkInsertColumn>, IReadOnlyCollection<MsAccessBulkInsertColumn>, IEnumerable<MsAccessBulkInsertColumn>, IEnumerable Constructors MsAccessBulkInsertColumnCollection() Inicializuje novú inštanciu triedy MsAccessBulkInsertColumnCollection . Declaration public MsAccessBulkInsertColumnCollection() MsAccessBulkInsertColumnCollection(IEnumerable<MsAccessBulkInsertColumn>) Inicializuje novú inštanciu triedy MsAccessBulkInsertColumnCollection so zadaných dát. Declaration public MsAccessBulkInsertColumnCollection(IEnumerable<MsAccessBulkInsertColumn> collection) Parameters Type Name Description System.Collections.Generic.IEnumerable < MsAccessBulkInsertColumn > collection Dáta, ktorými je zoznam naplnený. MsAccessBulkInsertColumnCollection(Int32) Inicializuje novú inštanciu triedy MsAccessBulkInsertColumnCollection so zadanou počiatočnou kapacitou. Declaration public MsAccessBulkInsertColumnCollection(int capacity) Parameters Type Name Description System.Int32 capacity Počet položiek, ktoré môže zoznam zo začiatku obsahovať. Methods Add(MsAccessColumnSchema) Pridá stĺpec podľa definície stĺpca z databázy. Typ stĺpca je určený automaticky podľa dátového typu v databáze. Declaration public void Add(MsAccessColumnSchema column) Parameters Type Name Description MsAccessColumnSchema column Definícia databázového stĺpca. Add(String) Pridá stĺpec s názvom columnName . Typ stĺpca nie je definovaný BulkInsertColumnType . Declaration public void Add(string columnName) Parameters Type Name Description System.String columnName Názov stĺpca. Add(String, BulkInsertColumnType) Pridá stĺpec s názvom columnName a typom columnType . Declaration public void Add(string columnName, BulkInsertColumnType columnType) Parameters Type Name Description System.String columnName Názov stĺpca. BulkInsertColumnType columnType Typ stĺpca. AddRange(IEnumerable<MsAccessColumnSchema>) Pridá viacero stĺpcov naraz určených podľa definícií z databázy columns . Typy stĺpcov sú určené automaticky podľa dátového typu v databáze. Declaration public void AddRange(IEnumerable<MsAccessColumnSchema> columns) Parameters Type Name Description System.Collections.Generic.IEnumerable < MsAccessColumnSchema > columns Zoznam databázových definícií stĺpcov. AddRange(String[]) Pridá viacero stĺpcov naraz v zozname columnNames . Všetky stĺpce nemajú definovaný typ ( BulkInsertColumnType ). Declaration public void AddRange(params string[] columnNames) Parameters Type Name Description System.String [] columnNames Zoznam názvov stĺpcov."
  },
  "api/Kros.KORM/Kros.KORM.Query.SqlServerQueryProviderFactory.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.SqlServerQueryProviderFactory.html",
    "title": "Class SqlServerQueryProviderFactory | Kros.Libs",
    "keywords": "Class SqlServerQueryProviderFactory Factory which create sql server provider. Inheritance System.Object SqlServerQueryProviderFactory Implements IQueryProviderFactory Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public class SqlServerQueryProviderFactory : IQueryProviderFactory Methods Create(ConnectionStringSettings, IModelBuilder, IDatabaseMapper) Creates the SqlServer query provider. Declaration public IQueryProvider Create(ConnectionStringSettings connectionString, IModelBuilder modelBuilder, IDatabaseMapper databaseMapper) Parameters Type Name Description System.Configuration.ConnectionStringSettings connectionString The connection string. IModelBuilder modelBuilder The model builder. IDatabaseMapper databaseMapper Database mapper. Returns Type Description IQueryProvider Instance of SqlServerQueryProvider . Create(DbConnection, IModelBuilder, IDatabaseMapper) Creates the SqlServer query provider. Declaration public IQueryProvider Create(DbConnection connection, IModelBuilder modelBuilder, IDatabaseMapper databaseMapper) Parameters Type Name Description System.Data.Common.DbConnection connection The connection. IModelBuilder modelBuilder The model builder. IDatabaseMapper databaseMapper Database mapper. Returns Type Description IQueryProvider Instance of SqlServerQueryProvider . Implements IQueryProviderFactory"
  },
  "api/Kros.KORM/Kros.KORM.Exceptions.html": {
    "href": "api/Kros.KORM/Kros.KORM.Exceptions.html",
    "title": "Namespace Kros.KORM.Exceptions | Kros.Libs",
    "keywords": "Namespace Kros.KORM.Exceptions Classes AlreadyInCollectionException Exception class for item already exists in the collection. CompositePrimaryKeyException Exception class for composite primary key. MissingPrimaryKeyException Exception class for missing primary key."
  },
  "api/Kros.KORM/Kros.KORM.Query.Expressions.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Expressions.html",
    "title": "Namespace Kros.KORM.Query.Expressions | Kros.Libs",
    "keywords": "Namespace Kros.KORM.Query.Expressions Classes ArgsExpression Base class for args expression. ColumnsExpression Expression which represent projection part of sql select. GroupByExpression Expression, which represent GROUP BY statement from sql select query. OrderByExpression Expression, which represent ORDER BY statement from sql select query. QueryExpression Base expression. SelectExpression Expression, which represent SELECT query. SqlExpression Expression, which represent sql query. TableExpression Expression, which represent FROM statement from sql select query. WhereExpression Expression, which represent WHERE statement from sql select query."
  },
  "api/Kros.KORM/Kros.KORM.CommandGenerator.ICommandGenerator-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.CommandGenerator.ICommandGenerator-1.html",
    "title": "Interface ICommandGenerator<T> | Kros.Libs",
    "keywords": "Interface ICommandGenerator<T> Iterface, which describes generating single-table commands that are used to commit changes made to a DbSet with the associated database. Namespace : Kros.KORM.CommandGenerator Assembly : Kros.KORM.dll Syntax public interface ICommandGenerator<T> Type Parameters Name Description T Methods FillCommand(DbCommand, T) Fills command's parameters with values from item . Declaration void FillCommand(DbCommand command, T item) Parameters Type Name Description System.Data.Common.DbCommand command Command which parameters are filled. T item Item, from which command is filled. Exceptions Type Condition System.ArgumentNullException Either command or item is null . GetColumnValue(ColumnInfo, T) Gets value from the specific column. Declaration object GetColumnValue(ColumnInfo columnInfo, T item) Parameters Type Name Description ColumnInfo columnInfo The specific column. T item The item whose value will be returned. Returns Type Description System.Object Value from the specific column. GetDeleteCommand() Gets the automatically generated DbCommand object required to perform deletions on the database. Declaration DbCommand GetDeleteCommand() Returns Type Description System.Data.Common.DbCommand Delete command. Exceptions Type Condition MissingPrimaryKeyException GetDeleteCommand doesn't supported when entity doesn't have primary key. GetDeleteCommands(IEnumerable<T>) Gets the automatically generated DbCommands object required to perform deletions on the database. Declaration IEnumerable<DbCommand> GetDeleteCommands(IEnumerable<T> items) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items Type class of model collection. Returns Type Description System.Collections.Generic.IEnumerable < System.Data.Common.DbCommand > Delete command collection. Exceptions Type Condition MissingPrimaryKeyException GetDeleteCommands doesn't supported when entity doesn't have primary key. GetInsertCommand() Gets the automatically generated DbCommand object required to perform insertions on the database. Declaration DbCommand GetInsertCommand() Returns Type Description System.Data.Common.DbCommand Insert command. GetQueryColumns() Get columns for query. Declaration IEnumerable<ColumnInfo> GetQueryColumns() Returns Type Description System.Collections.Generic.IEnumerable < ColumnInfo > GetUpdateCommand() Gets the automatically generated DbCommand object required to perform updates on the database Declaration DbCommand GetUpdateCommand() Returns Type Description System.Data.Common.DbCommand Update command. Exceptions Type Condition MissingPrimaryKeyException GetUpdateCommand doesn't supported when entity doesn't have primary key."
  },
  "api/Kros.KORM/Kros.KORM.Materializer.html": {
    "href": "api/Kros.KORM/Kros.KORM.Materializer.html",
    "title": "Namespace Kros.KORM.Materializer | Kros.Libs",
    "keywords": "Namespace Kros.KORM.Materializer Classes DynamicMethodModelFactory Modelfactory, which materialize model by dynamic method delegates. ModelBuilder ModelBuilder, which know materialize data from Db to objects. ModelBuilder.ModelBuilderEnumerable<T> Enumerable which support iteration over the materialized models. ModelBuilder.ModelBuilderEnumerator<T> Enumerator that iterates through the materialized models. Interfaces IMaterialize Specifies that this object supports notification about materializing. IModelBuilder Interface for ModelBuilder, which know materialize data from Ado to objects. IModelFactory Interface for factory, which know materialize model from database."
  },
  "api/Kros.KORM/Kros.KORM.Query.IQueryProviderFactory.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.IQueryProviderFactory.html",
    "title": "Interface IQueryProviderFactory | Kros.Libs",
    "keywords": "Interface IQueryProviderFactory Interface, which describe factory for creating provider. Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public interface IQueryProviderFactory Methods Create(ConnectionStringSettings, IModelBuilder, IDatabaseMapper) Creates the specified QueryProvider. Declaration IQueryProvider Create(ConnectionStringSettings connectionString, IModelBuilder modelBuilder, IDatabaseMapper databaseMapper) Parameters Type Name Description System.Configuration.ConnectionStringSettings connectionString The connection string. IModelBuilder modelBuilder The model builder. IDatabaseMapper databaseMapper Database mapper. Returns Type Description IQueryProvider Instance of IQueryProvider. Create(DbConnection, IModelBuilder, IDatabaseMapper) Creates the specified QueryProvider. Declaration IQueryProvider Create(DbConnection connection, IModelBuilder modelBuilder, IDatabaseMapper databaseMapper) Parameters Type Name Description System.Data.Common.DbConnection connection The connection. IModelBuilder modelBuilder The model builder. IDatabaseMapper databaseMapper Database mapper. Returns Type Description IQueryProvider Instance of IQueryProvider."
  },
  "api/Kros.KORM/Kros.KORM.Materializer.ModelBuilder.ModelBuilderEnumerator-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.Materializer.ModelBuilder.ModelBuilderEnumerator-1.html",
    "title": "Class ModelBuilder.ModelBuilderEnumerator<T> | Kros.Libs",
    "keywords": "Class ModelBuilder.ModelBuilderEnumerator<T> Enumerator that iterates through the materialized models. Inheritance System.Object ModelBuilder.ModelBuilderEnumerator<T> Namespace : Kros.KORM.Materializer Assembly : Kros.KORM.dll Syntax public class ModelBuilderEnumerator<T> : IEnumerator<T>, IDisposable, IEnumerator Type Parameters Name Description T Model Type Properties Current Gets the element in the collection at the current position of the enumerator. Declaration public T Current { get; } Property Value Type Description T Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() MoveNext() Advances the enumerator to the next element of the collection. Declaration public bool MoveNext() Returns Type Description System.Boolean true if the enumerator was successfully advanced to the next element, false if the enumerator has passed the end of the collection. Reset() Sets the enumerator to its initial position, which is before the first element in the collection. Declaration public void Reset() Exceptions Type Condition System.NotImplementedException See Also System.Collections.Generic.IEnumerator <T>"
  },
  "api/Kros.KORM/Kros.KORM.Query.Expressions.SelectExpression.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Expressions.SelectExpression.html",
    "title": "Class SelectExpression | Kros.Libs",
    "keywords": "Class SelectExpression Expression, which represent SELECT query. Inheritance System.Object System.Linq.Expressions.Expression QueryExpression SelectExpression Namespace : Kros.KORM.Query.Expressions Assembly : Kros.KORM.dll Syntax public class SelectExpression : QueryExpression Constructors SelectExpression(TableInfo) Initializes a new instance of the SelectExpression class. Declaration public SelectExpression(TableInfo tableInfo) Parameters Type Name Description TableInfo tableInfo The table info. Fields SelectStatement The select statement Declaration public const string SelectStatement = \"SELECT\" Field Value Type Description System.String Properties ColumnsExpression Gets the columns expression. Declaration public ColumnsExpression ColumnsExpression { get; } Property Value Type Description ColumnsExpression GroupByExpression Gets or sets the group by expression. Declaration public GroupByExpression GroupByExpression { get; } Property Value Type Description GroupByExpression NodeType Gets the node type of this System.Linq.Expressions.Expression . Declaration public override sealed ExpressionType NodeType { get; } Property Value Type Description System.Linq.Expressions.ExpressionType Overrides QueryExpression.NodeType OrderByExpression Gets or sets the order by expression. Declaration public OrderByExpression OrderByExpression { get; } Property Value Type Description OrderByExpression TableExpression Gets the table expression. Declaration public TableExpression TableExpression { get; } Property Value Type Description TableExpression Type Gets the static type of the expression that this System.Linq.Expressions.Expression represents. Declaration public override Type Type { get; } Property Value Type Description System.Type Overrides QueryExpression.Type Value Gets the value. Declaration public object Value { get; } Property Value Type Description System.Object WhereExpression Gets or sets the where expression. Declaration public WhereExpression WhereExpression { get; } Property Value Type Description WhereExpression Methods Accept(ExpressionVisitor) Dispatches to the specific visit method for this node type. For example, System.Linq.Expressions.MethodCallExpression calls the System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression) . Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor The visitor to visit this node with. Returns Type Description System.Linq.Expressions.Expression The result of visiting this node. Overrides System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor) SetColumnsExpression(ColumnsExpression) Sets the columns expression. Declaration public void SetColumnsExpression(ColumnsExpression columnExpression) Parameters Type Name Description ColumnsExpression columnExpression The column expression. Exceptions Type Condition System.ArgumentException 'columnExpression' can be applied only once.;columnsExpression SetGroupByExpression(GroupByExpression) Sets the group by expression. Declaration public void SetGroupByExpression(GroupByExpression groupByExpression) Parameters Type Name Description GroupByExpression groupByExpression The group by expression. Exceptions Type Condition System.ArgumentException 'groupByExpression' can be applied only once.;groupByExpression SetOrderByExpression(OrderByExpression) Sets the order by expression. Declaration public void SetOrderByExpression(OrderByExpression orderByExpression) Parameters Type Name Description OrderByExpression orderByExpression The order by expression. Exceptions Type Condition System.ArgumentException 'orderByExpression' can be applied only once.;orderByExpression SetTableExpression(TableExpression) Sets the table expression. Declaration public void SetTableExpression(TableExpression tableExpression) Parameters Type Name Description TableExpression tableExpression The table expression. Exceptions Type Condition System.ArgumentException 'tableExpression' can be applied only once.;tableExpression SetWhereExpression(WhereExpression) Sets the where expression. Declaration public void SetWhereExpression(WhereExpression whereExpression) Parameters Type Name Description WhereExpression whereExpression The where expression. Exceptions Type Condition System.ArgumentException 'whereExpression' can be applied only once.;whereExpression VisitChildren(ExpressionVisitor) Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible. Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor An instance of System.Func<T, TResult> . Returns Type Description System.Linq.Expressions.Expression The expression being visited, or an expression which should replace it in the tree. Overrides System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor) See Also ISqlExpressionVisitor"
  },
  "api/Kros.KORM/Kros.KORM.Query.IOrderedQuery-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.IOrderedQuery-1.html",
    "title": "Interface IOrderedQuery<T> | Kros.Libs",
    "keywords": "Interface IOrderedQuery<T> Represents result of a sorting operation. Inherited Members IQueryBase<T>.AsDbSet() IQueryBase<T>.ExecuteScalar() IQueryBase<T>.ExecuteStringScalar() IQueryBase<T>.ExecuteScalar<TRet>() Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public interface IOrderedQuery<T> : IQueryBase<T>, IOrderedQueryable<T>, IQueryable<T>, IEnumerable<T>, IOrderedQueryable, IQueryable, IEnumerable Type Parameters Name Description T Type of model class. See Also IQueryBase <T>"
  },
  "api/Kros.KORM/Kros.KORM.Query.Sql.DefaultQuerySqlGenerator.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Sql.DefaultQuerySqlGenerator.html",
    "title": "Class DefaultQuerySqlGenerator | Kros.Libs",
    "keywords": "Class DefaultQuerySqlGenerator Default sql query visitor for generating SELECT command. Inheritance System.Object System.Linq.Expressions.ExpressionVisitor DefaultQuerySqlGenerator SqlServerQuerySqlGenerator Implements ISqlExpressionVisitor Namespace : Kros.KORM.Query.Sql Assembly : Kros.KORM.dll Syntax public abstract class DefaultQuerySqlGenerator : ExpressionVisitor, ISqlExpressionVisitor Constructors DefaultQuerySqlGenerator(IDatabaseMapper) Constructor. Declaration public DefaultQuerySqlGenerator(IDatabaseMapper databaseMapper) Parameters Type Name Description IDatabaseMapper databaseMapper Database mapper. Properties DatabaseMapper Gets the database mapper. Declaration protected IDatabaseMapper DatabaseMapper { get; } Property Value Type Description IDatabaseMapper LinqParameters Gets the linq query parameters. Declaration protected DefaultQuerySqlGenerator.Parameters LinqParameters { get; } Property Value Type Description DefaultQuerySqlGenerator.Parameters LinqStringBuilder Gets the linq string builder. Declaration protected StringBuilder LinqStringBuilder { get; } Property Value Type Description System.Text.StringBuilder SelectExpression Get root select expression. Declaration protected SelectExpression SelectExpression { get; } Property Value Type Description SelectExpression Methods BindAnyCondition(String) Adds any method to query. Declaration protected virtual string BindAnyCondition(string existsCondition) Parameters Type Name Description System.String existsCondition Returns Type Description System.String BindContains(MethodCallExpression) Binds the System.String.Contains(System.String) method. Declaration protected virtual Expression BindContains(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression BindEndWith(MethodCallExpression) Binds the System.String.EndsWith(System.String) method. Declaration protected virtual Expression BindEndWith(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression BindIsNullOrEmpty(MethodCallExpression) Binds the System.String.IsNullOrEmpty(System.String) method. Declaration protected virtual Expression BindIsNullOrEmpty(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression BindReplace(MethodCallExpression) Binds the System.String.Replace(System.String,System.String) method. Declaration protected virtual Expression BindReplace(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression BindStartWith(MethodCallExpression) Binds the System.String.StartsWith(System.String) method. Declaration protected virtual Expression BindStartWith(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression BindSubstring(MethodCallExpression) Binds the System.String.Substring(System.Int32) method. Declaration protected virtual Expression BindSubstring(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression BindToLower(MethodCallExpression) Binds to System.String.ToLower method. Declaration protected virtual Expression BindToLower(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression BindToUpper(MethodCallExpression) Binds to System.String.ToUpper method. Declaration protected virtual Expression BindToUpper(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression BindTrim(MethodCallExpression) Binds the System.String.Trim method. Declaration protected virtual Expression BindTrim(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression GenerateSql(Expression) Generates the SQL from expression. Declaration public virtual string GenerateSql(Expression expression) Parameters Type Name Description System.Linq.Expressions.Expression expression The expression. Returns Type Description System.String SQL select command text. GetOperator(BinaryExpression) Gets the operator. Declaration protected virtual string GetOperator(BinaryExpression expression) Parameters Type Name Description System.Linq.Expressions.BinaryExpression expression The expression. Returns Type Description System.String Visit(Expression) Dispatches the expression to one of the more specialized visit methods in this class. Declaration public override Expression Visit(Expression node) Parameters Type Name Description System.Linq.Expressions.Expression node The expression to visit. Returns Type Description System.Linq.Expressions.Expression The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. Overrides System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression) VisitAggregate(MethodCallExpression, String) Visits the Linq aggregate methods. Declaration protected virtual Expression VisitAggregate(MethodCallExpression expression, string aggregateName) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. System.String aggregateName Name of aggreage method. Returns Type Description System.Linq.Expressions.Expression VisitAny(MethodCallExpression) Visits the Linq Any method. Declaration protected virtual Expression VisitAny(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression VisitBinary(BinaryExpression) Visits the Linq Binary. Declaration protected override Expression VisitBinary(BinaryExpression expression) Parameters Type Name Description System.Linq.Expressions.BinaryExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression Overrides System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression) Exceptions Type Condition System.NotSupportedException If this binary expression is not supported. VisitColumns(ColumnsExpression) Visits the columns. Declaration public virtual Expression VisitColumns(ColumnsExpression columnExpression) Parameters Type Name Description ColumnsExpression columnExpression The column expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitCompare(MethodCallExpression, ExpressionType) Visit Visual Basic Compare expression Declaration protected virtual Expression VisitCompare(MethodCallExpression expression, ExpressionType binExpNodeType) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression Method call expression Compare expression System.Linq.Expressions.ExpressionType binExpNodeType Binary expression node type Returns Type Description System.Linq.Expressions.Expression Reduced expression. VisitConstant(ConstantExpression) Visits the constant. Declaration protected override Expression VisitConstant(ConstantExpression expression) Parameters Type Name Description System.Linq.Expressions.ConstantExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression Overrides System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression) Exceptions Type Condition System.NotSupportedException If type of constant is System.Object . VisitCount(MethodCallExpression) Visits the Linq Count method. Declaration protected virtual Expression VisitCount(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression VisitFirst(MethodCallExpression) Visits the Linq First. Declaration protected virtual Expression VisitFirst(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression VisitGroupBy(GroupByExpression) Visits the group by. Declaration public virtual Expression VisitGroupBy(GroupByExpression groupByExpression) Parameters Type Name Description GroupByExpression groupByExpression The group by expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitLinqExpression(MethodCallExpression) Visits the linq expression. Declaration protected virtual Expression VisitLinqExpression(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The method call expression. Returns Type Description System.Linq.Expressions.Expression Reduced expression. VisitMember(MemberExpression) Visits the member. Declaration protected override Expression VisitMember(MemberExpression expression) Parameters Type Name Description System.Linq.Expressions.MemberExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression Overrides System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression) Exceptions Type Condition System.NotSupportedException If the member type is not supported. VisitMethodCall(MethodCallExpression) Visits the method call. Declaration protected override Expression VisitMethodCall(MethodCallExpression m) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression m The method call expression. Returns Type Description System.Linq.Expressions.Expression Reuced expression Overrides System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression) VisitOrderBy(OrderByExpression) Visits the order by. Declaration public virtual Expression VisitOrderBy(OrderByExpression orderByExpression) Parameters Type Name Description OrderByExpression orderByExpression The order by expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitSelect(SelectExpression) Visits the select. Declaration public virtual Expression VisitSelect(SelectExpression selectExpression) Parameters Type Name Description SelectExpression selectExpression The select expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitSql(SqlExpression) Visits the SQL. Declaration public virtual Expression VisitSql(SqlExpression sqlExpression) Parameters Type Name Description SqlExpression sqlExpression The SQL expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitStringMethods(MethodCallExpression) Visits the string methods. Declaration protected virtual Expression VisitStringMethods(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression Exceptions Type Condition System.NotSupportedException If this System.String method is not supported. VisitTable(TableExpression) Visits the table. Declaration public virtual Expression VisitTable(TableExpression tableExpression) Parameters Type Name Description TableExpression tableExpression The table expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitTake(MethodCallExpression) Visits the Linq Take method. Declaration protected virtual Expression VisitTake(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression Exceptions Type Condition System.NotSupportedException If call of Take method is not supported. VisitUnary(UnaryExpression) Visits the unary. Declaration protected override Expression VisitUnary(UnaryExpression expression) Parameters Type Name Description System.Linq.Expressions.UnaryExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression Overrides System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression) Exceptions Type Condition System.NotSupportedException If this unary expression is not supported. VisitVbOperatorsMethods(MethodCallExpression, ExpressionType) Visit Visual Basic operators expressions. Declaration protected virtual Expression VisitVbOperatorsMethods(MethodCallExpression expression, ExpressionType binExpNodeType) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression Method call expression System.Linq.Expressions.ExpressionType binExpNodeType Binary expression node type Returns Type Description System.Linq.Expressions.Expression Reduced expression. VisitWhere(WhereExpression) Visits the where. Declaration public virtual Expression VisitWhere(WhereExpression whereExpression) Parameters Type Name Description WhereExpression whereExpression The where expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitWhere(MethodCallExpression) Visits the Linq Where method. Declaration protected virtual Expression VisitWhere(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression Implements ISqlExpressionVisitor See Also ISqlExpressionVisitor"
  },
  "api/Kros.KORM/Kros.KORM.Query.DbSet-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.DbSet-1.html",
    "title": "Class DbSet<T> | Kros.Libs",
    "keywords": "Class DbSet<T> Represents the collection of all items that can be saved to the database, of a given type. Inheritance System.Object DbSet<T> Implements IDbSet <T> Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public class DbSet<T> : IDbSet<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T The type that defines the set. Constructors DbSet(ICommandGenerator<T>, IQueryProvider, IQueryBase<T>, TableInfo) Initializes a new instance of the DbSet<T> class. Declaration public DbSet(ICommandGenerator<T> commandGenerator, IQueryProvider provider, IQueryBase<T> query, TableInfo tableInfo) Parameters Type Name Description ICommandGenerator <T> commandGenerator Generator to create commands. IQueryProvider provider Provider to executing commands. IQueryBase <T> query Query. TableInfo tableInfo Information about table from database. Properties AddedItems List of items in Added state. Declaration public IEnumerable<T> AddedItems { get; } Property Value Type Description System.Collections.Generic.IEnumerable <T> DeletedItems List of items in Deleted state. Declaration public IEnumerable<T> DeletedItems { get; } Property Value Type Description System.Collections.Generic.IEnumerable <T> EditedItems List of items in Edited state. Declaration public IEnumerable<T> EditedItems { get; } Property Value Type Description System.Collections.Generic.IEnumerable <T> Methods Add(T) Adds the item to the context underlying the set in the Added state such that it will be inserted into the database when CommitChanges is called. Declaration public void Add(T entity) Parameters Type Name Description T entity Item to add. Exceptions Type Condition AlreadyInCollectionException Adding item already exists in list of items. Add(IEnumerable<T>) Adds the items to the context underlying the set in the Added state such that it will be inserted into the database when CommitChanges is called. Declaration public void Add(IEnumerable<T> entities) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities The items to add. BulkInsert() Executes bulk insert over pending added items. Declaration public void BulkInsert() Remarks Clears added items. Examples BulkInsert(IEnumerable<T>) Executes bulk insert over items . Declaration public void BulkInsert(IEnumerable<T> items) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items The items to insert. BulkUpdate() Executes bulk update over pending edited items. Declaration public void BulkUpdate() Remarks Clears edited items. Examples BulkUpdate(Action<IDbConnection, IDbTransaction, String>) Executes bulk update over pending edited items with specific action. Declaration public void BulkUpdate(Action<IDbConnection, IDbTransaction, string> tempTableAction) Parameters Type Name Description System.Action < System.Data.IDbConnection , System.Data.IDbTransaction , System.String > tempTableAction The action execute on temp table (modify data in temp table). Remarks Clears edited items. BulkUpdate(IEnumerable<T>) Executes bulk update over items . Declaration public void BulkUpdate(IEnumerable<T> items) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items The items to update. BulkUpdate(IEnumerable<T>, Action<IDbConnection, IDbTransaction, String>) Executes bulk update over items with specific action. Declaration public void BulkUpdate(IEnumerable<T> items, Action<IDbConnection, IDbTransaction, string> tempTableAction) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items The items to update. System.Action < System.Data.IDbConnection , System.Data.IDbTransaction , System.String > tempTableAction The action execute on temp table (modify data in temp table). Clear() Clear Added, Edited and Deleted lists of items. Declaration public void Clear() CommitChanges() Commits all pending changes to the database. Declaration public void CommitChanges() Delete(T) Adds the item to the context underlying the set in the Deleted state such that it will be deleted from the database when CommitChanges is called. Declaration public void Delete(T entity) Parameters Type Name Description T entity Item to add. Exceptions Type Condition AlreadyInCollectionException Adding item already exists in list of items. Delete(IEnumerable<T>) Marks the items as Deleted such that it will be deleted from the database when CommitChanges is called. Declaration public void Delete(IEnumerable<T> entities) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities The items to delete. Edit(T) Adds the item to the context underlying the set in the Edited state such that it will be updated in the database when CommitChanges is called. Declaration public void Edit(T entity) Parameters Type Name Description T entity Item to add. Exceptions Type Condition AlreadyInCollectionException Adding item already exists in list of items. Edit(IEnumerable<T>) Marks the items as Edited such that it will be updated in the database when CommitChanges is called. Declaration public void Edit(IEnumerable<T> entities) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities The items to edit. GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> An enumerator that can be used to iterate through the collection. Implements IDbSet<T>"
  },
  "api/Kros.KORM/Kros.KORM.Query.Expressions.ArgsExpression.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Expressions.ArgsExpression.html",
    "title": "Class ArgsExpression | Kros.Libs",
    "keywords": "Class ArgsExpression Base class for args expression. Inheritance System.Object System.Linq.Expressions.Expression QueryExpression ArgsExpression SqlExpression WhereExpression Inherited Members QueryExpression.NodeType QueryExpression.Type Namespace : Kros.KORM.Query.Expressions Assembly : Kros.KORM.dll Syntax public abstract class ArgsExpression : QueryExpression Properties Parameters Gets the parameters. Declaration public IEnumerable<object> Parameters { get; protected set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.Object > Sql Sql. Declaration public string Sql { get; protected set; } Property Value Type Description System.String See Also System.Linq.Expressions.Expression"
  },
  "api/Kros.KORM/Kros.KORM.Query.Expressions.WhereExpression.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Expressions.WhereExpression.html",
    "title": "Class WhereExpression | Kros.Libs",
    "keywords": "Class WhereExpression Expression, which represent WHERE statement from sql select query. Inheritance System.Object System.Linq.Expressions.Expression QueryExpression ArgsExpression WhereExpression Inherited Members ArgsExpression.Sql ArgsExpression.Parameters QueryExpression.NodeType QueryExpression.Type Namespace : Kros.KORM.Query.Expressions Assembly : Kros.KORM.dll Syntax public class WhereExpression : ArgsExpression Constructors WhereExpression(String, Object[]) Initializes a new instance of the TableExpression class. Declaration public WhereExpression(string whereCondition, params object[] args) Parameters Type Name Description System.String whereCondition The where condition. System.Object [] args Where args. Fields WhereStatement Where statement Declaration public const string WhereStatement = \"WHERE\" Field Value Type Description System.String Methods Accept(ExpressionVisitor) Dispatches to the specific visit method for this node type. For example, System.Linq.Expressions.MethodCallExpression calls the System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression) . Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor The visitor to visit this node with. Returns Type Description System.Linq.Expressions.Expression The result of visiting this node. Overrides System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor) See Also ISqlExpressionVisitor"
  },
  "api/Kros.KORM/Kros.KORM.Query.IQueryBase-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.IQueryBase-1.html",
    "title": "Interface IQueryBase<T> | Kros.Libs",
    "keywords": "Interface IQueryBase<T> Interface, which describe class for executing query. Instance which implement this interface can be used for creating and executing query for T model. Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public interface IQueryBase<T> : IOrderedQueryable<T>, IQueryable<T>, IEnumerable<T>, IOrderedQueryable, IQueryable, IEnumerable Type Parameters Name Description T Type of model class. Methods AsDbSet() Returns the collection of all entities that can be queried from the database. Declaration IDbSet<T> AsDbSet() Returns Type Description IDbSet <T> DbSet<T> . ExecuteScalar() Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration object ExecuteScalar() Returns Type Description System.Object The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. Examples ExecuteScalar<TRet>() Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration TRet? ExecuteScalar<TRet>() where TRet : struct Returns Type Description System.Nullable <TRet> The first column of the first row in the result set as nullable type of TRet. If the result set is empty, then HasValue is false. Returns a maximum of 2033 characters. Type Parameters Name Description TRet Return type. Examples ExecuteStringScalar() Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration string ExecuteStringScalar() Returns Type Description System.String The first column of the first row in the result set as string, or null if the result set is empty. Returns a maximum of 2033 characters. Examples"
  },
  "api/Kros.Utils.MsAccess/Kros.UnitTests.MsAccessTestHelper.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.UnitTests.MsAccessTestHelper.html",
    "title": "Class MsAccessTestHelper | Kros.Libs",
    "keywords": "Class MsAccessTestHelper Pomocná trieda pre unit testy, ak je potrebné mať pri testovaní reálnu databázu. Umožňuje jednoducho vytvoriť dočasnú databázu v ktorej sa bude testovať. Táto databáza je automaticky po skončení práce vymazaná. Inheritance System.Object MsAccessTestHelper Namespace : Kros.UnitTests Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessTestHelper : IDisposable Constructors MsAccessTestHelper(ProviderType, Stream) Vytvorí inštanciu so zadanými parametrami. Nový mdb súbor je vytvorený ako kópia sourceDatabaseStream . Declaration public MsAccessTestHelper(ProviderType provider, Stream sourceDatabaseStream) Parameters Type Name Description ProviderType provider MS Access provider, ktorý sa má pre spojenie použiť. System.IO.Stream sourceDatabaseStream Zdrojová databáza - nová databáza sa vytvorí ako jej kópia. MsAccessTestHelper(ProviderType, Stream, IEnumerable<String>) Vytvorí inštanciu so zadanými parametrami. Nový mdb súbor je vytvorený ako kópia sourceDatabaseStream a inicializovaný skriptami initDatabaseScripts . Declaration public MsAccessTestHelper(ProviderType provider, Stream sourceDatabaseStream, IEnumerable<string> initDatabaseScripts) Parameters Type Name Description ProviderType provider MS Access provider, ktorý sa má pre spojenie použiť. System.IO.Stream sourceDatabaseStream Zdrojová databáza - nová databáza sa vytvorí ako jej kópia. System.Collections.Generic.IEnumerable < System.String > initDatabaseScripts Zoznam skriptov, ktoré sa spustia a inicializujú tak novovytvorenú databázu. Môžu to byť napríklad skripty na vytvorenie a naplnenie potrebných tabuliek. MsAccessTestHelper(ProviderType, Stream, String) Vytvorí inštanciu so zadanými parametrami. Nový mdb súbor je vytvorený ako kópia sourceDatabaseStream a inicializovaný skriptom initDatabaseScript . Declaration public MsAccessTestHelper(ProviderType provider, Stream sourceDatabaseStream, string initDatabaseScript) Parameters Type Name Description ProviderType provider MS Access provider, ktorý sa má pre spojenie použiť. System.IO.Stream sourceDatabaseStream Zdrojová databáza - nová databáza sa vytvorí ako jej kópia. System.String initDatabaseScript Skript, ktorý sa spustí a inicializuje tak novovytvorenú databázu. Môže to byť napríklad skript na vytvorenie a naplnenie potrebných tabuliek. MsAccessTestHelper(ProviderType, String) Vytvorí inštanciu so zadanými parametrami. Nový mdb súbor je vytvorený ako kópia sourceDatabasePath . Declaration public MsAccessTestHelper(ProviderType provider, string sourceDatabasePath) Parameters Type Name Description ProviderType provider MS Access provider, ktorý sa má pre spojenie použiť. System.String sourceDatabasePath Zdrojová databáza - nová databáza sa vytvorí ako jej kópia. MsAccessTestHelper(ProviderType, String, IEnumerable<String>) Vytvorí inštanciu so zadanými parametrami. Nový mdb súbor je vytvorený ako kópia súboru sourceDatabasePath a inicializovaný skriptami initDatabaseScripts . Declaration public MsAccessTestHelper(ProviderType provider, string sourceDatabasePath, IEnumerable<string> initDatabaseScripts) Parameters Type Name Description ProviderType provider MS Access provider, ktorý sa má pre spojenie použiť. System.String sourceDatabasePath Zdrojová databáza - nová databáza sa vytvorí ako jej kópia. System.Collections.Generic.IEnumerable < System.String > initDatabaseScripts Zoznam skriptov, ktoré sa spustia a inicializujú tak novovytvorenú databázu. Môžu to byť napríklad skripty na vytvorenie a naplnenie potrebných tabuliek. MsAccessTestHelper(ProviderType, String, String) Vytvorí inštanciu so zadanými parametrami. Nový mdb súbor je vytvorený ako kópia súboru sourceDatabasePath a inicializovaný skriptom initDatabaseScript . Declaration public MsAccessTestHelper(ProviderType provider, string sourceDatabasePath, string initDatabaseScript) Parameters Type Name Description ProviderType provider MS Access provider, ktorý sa má pre spojenie použiť. System.String sourceDatabasePath Zdrojová databáza - nová databáza sa vytvorí ako jej kópia. System.String initDatabaseScript Skript, ktorý sa spustí a inicializuje tak novovytvorenú databázu. Môže to byť napríklad skript na vytvorenie a naplnenie potrebných tabuliek. Properties Connection Spojenie na vytvorenú databázu. Declaration public OleDbConnection Connection { get; } Property Value Type Description System.Data.OleDb.OleDbConnection DatabasePath Cesta k vytvorenej databáze. Declaration public string DatabasePath { get; } Property Value Type Description System.String Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing GenerateDatabaseName() Vygeneruje názov k súboru, kde sa vytovrí databáza. Štandardne je to náhodný súbor v dočasnom (Temp) priečinku. Declaration protected virtual string GenerateDatabaseName() Returns Type Description System.String Názov databázy. InitDatabase() Inicializuje databázu. Metóda je volaná po vytvorení databázy a štandardne spustí skript(y), ktoré boli zadané v konštruktore. Metóda sa volá iba raz, po vytvorení databázy. Declaration protected virtual void InitDatabase()"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.BulkActions.MsAccess.MsAccessBulkInsertColumn.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.BulkActions.MsAccess.MsAccessBulkInsertColumn.html",
    "title": "Class MsAccessBulkInsertColumn | Kros.Libs",
    "keywords": "Class MsAccessBulkInsertColumn Definícia stĺpca pre hromadné vkladanie do MS Access tabuľky z CSV súboru ( MsAccessBulkInsert ). Inheritance System.Object MsAccessBulkInsertColumn Namespace : Kros.Data.BulkActions.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessBulkInsertColumn Constructors MsAccessBulkInsertColumn(String) Vytvorí novú definíciu pre stĺpec columnName , s typom nastaveným na BulkInsertColumnType . Declaration public MsAccessBulkInsertColumn(string columnName) Parameters Type Name Description System.String columnName Názov stĺpca. MsAccessBulkInsertColumn(String, BulkInsertColumnType) Vytvorí novú definíciu pre stĺpec columnName , s typom columnType . Declaration public MsAccessBulkInsertColumn(string columnName, BulkInsertColumnType columnType) Parameters Type Name Description System.String columnName Názov stĺpca. BulkInsertColumnType columnType Typ stĺpca. Exceptions Type Condition System.ArgumentNullException Vyvolaná, ak názov stĺpca je null , alebo zložený len z bielych znakov. Properties ColumnName Názov stĺpca. Declaration public string ColumnName { get; } Property Value Type Description System.String Reťazec. ColumnType Typ stĺpca. Declaration public BulkInsertColumnType ColumnType { get; } Property Value Type Description BulkInsertColumnType Hodnota BulkInsertColumnType ."
  },
  "api/Kros.KORM/Kros.KORM.Query.Sql.ISqlExpressionVisitor.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Sql.ISqlExpressionVisitor.html",
    "title": "Interface ISqlExpressionVisitor | Kros.Libs",
    "keywords": "Interface ISqlExpressionVisitor Interface, which describe visitor for genereting sql select command. Namespace : Kros.KORM.Query.Sql Assembly : Kros.KORM.dll Syntax public interface ISqlExpressionVisitor Methods GenerateSql(Expression) Generates the SQL from expression. Declaration string GenerateSql(Expression expression) Parameters Type Name Description System.Linq.Expressions.Expression expression The expression. Returns Type Description System.String SQL select command text. VisitColumns(ColumnsExpression) Visits the columns. Declaration Expression VisitColumns(ColumnsExpression columnExpression) Parameters Type Name Description ColumnsExpression columnExpression The column expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitGroupBy(GroupByExpression) Visits the group by. Declaration Expression VisitGroupBy(GroupByExpression groupByExpression) Parameters Type Name Description GroupByExpression groupByExpression The group by expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitOrderBy(OrderByExpression) Visits the order by. Declaration Expression VisitOrderBy(OrderByExpression orderByExpression) Parameters Type Name Description OrderByExpression orderByExpression The order by expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitSelect(SelectExpression) Visits the select. Declaration Expression VisitSelect(SelectExpression selectExpression) Parameters Type Name Description SelectExpression selectExpression The select expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitSql(SqlExpression) Visits the SQL. Declaration Expression VisitSql(SqlExpression sqlExpression) Parameters Type Name Description SqlExpression sqlExpression The SQL expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitTable(TableExpression) Visits the table. Declaration Expression VisitTable(TableExpression tableExpression) Parameters Type Name Description TableExpression tableExpression The table expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitWhere(WhereExpression) Visits the where. Declaration Expression VisitWhere(WhereExpression whereExpression) Parameters Type Name Description WhereExpression whereExpression The where expression. Returns Type Description System.Linq.Expressions.Expression Expression"
  },
  "api/Kros.Utils.MsAccess/Kros.UnitTests.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.UnitTests.html",
    "title": "Namespace Kros.UnitTests | Kros.Libs",
    "keywords": "Namespace Kros.UnitTests Classes MsAccessTestHelper Pomocná trieda pre unit testy, ak je potrebné mať pri testovaní reálnu databázu. Umožňuje jednoducho vytvoriť dočasnú databázu v ktorej sa bude testovať. Táto databáza je automaticky po skončení práce vymazaná."
  },
  "api/Kros.KORM.MsAccess/Kros.KORM.Query.MsAccess.MsAccessQueryProviderFactory.html": {
    "href": "api/Kros.KORM.MsAccess/Kros.KORM.Query.MsAccess.MsAccessQueryProviderFactory.html",
    "title": "Class MsAccessQueryProviderFactory | Kros.Libs",
    "keywords": "Class MsAccessQueryProviderFactory Factory, which know create MsAccess query provider. Inheritance System.Object MsAccessQueryProviderFactory Implements IQueryProviderFactory Namespace : Kros.KORM.Query.MsAccess Assembly : Kros.KORM.MsAccess.dll Syntax public class MsAccessQueryProviderFactory : IQueryProviderFactory Methods Create(ConnectionStringSettings, IModelBuilder, IDatabaseMapper) Creates the specified MsAccess QueryProvider factory. Declaration public IQueryProvider Create(ConnectionStringSettings connectionString, IModelBuilder modelBuilder, IDatabaseMapper databaseMapper) Parameters Type Name Description System.Configuration.ConnectionStringSettings connectionString The connection string. IModelBuilder modelBuilder The model builder. IDatabaseMapper databaseMapper Database mapper. Returns Type Description IQueryProvider Instance of MsAccessQueryProvider . Create(DbConnection, IModelBuilder, IDatabaseMapper) Creates the specified MsAccess QueryProvider factory. Declaration public IQueryProvider Create(DbConnection connection, IModelBuilder modelBuilder, IDatabaseMapper databaseMapper) Parameters Type Name Description System.Data.Common.DbConnection connection The connection. IModelBuilder modelBuilder The model builder. IDatabaseMapper databaseMapper Database mapper. Returns Type Description IQueryProvider Instance of MsAccessQueryProvider . Register() Registers instance of this type to QueryProviderFactories . Declaration public static void Register() Implements IQueryProviderFactory See Also IQueryProviderFactory"
  },
  "api/Kros.KORM/Kros.KORM.Metadata.Attribute.ConverterAttribute.html": {
    "href": "api/Kros.KORM/Kros.KORM.Metadata.Attribute.ConverterAttribute.html",
    "title": "Class ConverterAttribute | Kros.Libs",
    "keywords": "Class ConverterAttribute Attribute for getting data converter. Inheritance System.Object System.Attribute ConverterAttribute Namespace : Kros.KORM.Metadata.Attribute Assembly : Kros.KORM.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public class ConverterAttribute : Attribute, _Attribute Constructors ConverterAttribute(Type) Initializes a new instance of the ConverterAttribute class. Declaration public ConverterAttribute(Type converterType) Parameters Type Name Description System.Type converterType Type of the converter. Exceptions Type Condition System.ArgumentNullException converterType;Argument 'converterType' is required. Properties Converter Gets the converter for property. Declaration public IConverter Converter { get; } Property Value Type Description IConverter"
  },
  "api/Kros.KORM/Kros.KORM.Exceptions.MissingPrimaryKeyException.html": {
    "href": "api/Kros.KORM/Kros.KORM.Exceptions.MissingPrimaryKeyException.html",
    "title": "Class MissingPrimaryKeyException | Kros.Libs",
    "keywords": "Class MissingPrimaryKeyException Exception class for missing primary key. Inheritance System.Object System.Exception MissingPrimaryKeyException Namespace : Kros.KORM.Exceptions Assembly : Kros.KORM.dll Syntax public class MissingPrimaryKeyException : Exception, ISerializable, _Exception Constructors MissingPrimaryKeyException(String, String) Initializes a new instance of the MissingPrimaryKeyException class. Declaration public MissingPrimaryKeyException(string message, string tableName) Parameters Type Name Description System.String message Exception message. System.String tableName Table name whitch doesn't have primary key. Properties TableName Table name whitch doesn't have primary key. Declaration public string TableName { get; } Property Value Type Description System.String"
  },
  "api/Kros.KORM/Kros.KORM.Query.Expressions.QueryExpression.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Expressions.QueryExpression.html",
    "title": "Class QueryExpression | Kros.Libs",
    "keywords": "Class QueryExpression Base expression. Inheritance System.Object System.Linq.Expressions.Expression QueryExpression ArgsExpression ColumnsExpression GroupByExpression OrderByExpression SelectExpression TableExpression Namespace : Kros.KORM.Query.Expressions Assembly : Kros.KORM.dll Syntax public abstract class QueryExpression : Expression Properties NodeType Gets the node type of this System.Linq.Expressions.Expression . Declaration public override ExpressionType NodeType { get; } Property Value Type Description System.Linq.Expressions.ExpressionType Overrides System.Linq.Expressions.Expression.NodeType Type Gets the static type of the expression that this System.Linq.Expressions.Expression represents. Declaration public override Type Type { get; } Property Value Type Description System.Type Overrides System.Linq.Expressions.Expression.Type See Also System.Linq.Expressions.Expression"
  },
  "api/Kros.KORM/Kros.KORM.Query.IGroupedQuery-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.IGroupedQuery-1.html",
    "title": "Interface IGroupedQuery<T> | Kros.Libs",
    "keywords": "Interface IGroupedQuery<T> Represents result of grouping operation. Inherited Members IQueryBase<T>.AsDbSet() IQueryBase<T>.ExecuteScalar() IQueryBase<T>.ExecuteStringScalar() IQueryBase<T>.ExecuteScalar<TRet>() Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public interface IGroupedQuery<T> : IQueryBase<T>, IOrderedQueryable<T>, IQueryable<T>, IEnumerable<T>, IOrderedQueryable, IQueryable, IEnumerable Type Parameters Name Description T Type of model class. Methods OrderBy(String) Add order by statement to sql. Declaration IOrderedQuery<T> OrderBy(string orderBy) Parameters Type Name Description System.String orderBy The order by statement. Returns Type Description IOrderedQuery <T> Query for enumerable models. Examples Exceptions Type Condition System.ArgumentNullException if orderBy is null or white string. See Also IQueryBase <T>"
  },
  "api/Kros.KORM/Kros.KORM.Metadata.Attribute.AliasAttribute.html": {
    "href": "api/Kros.KORM/Kros.KORM.Metadata.Attribute.AliasAttribute.html",
    "title": "Class AliasAttribute | Kros.Libs",
    "keywords": "Class AliasAttribute Attribute which describe database name of property / class. Inheritance System.Object System.Attribute AliasAttribute Namespace : Kros.KORM.Metadata.Attribute Assembly : Kros.KORM.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Property, AllowMultiple = false)] public class AliasAttribute : Attribute, _Attribute Constructors AliasAttribute(String) Initializes a new instance of the AliasAttribute class. Declaration public AliasAttribute(string alias) Parameters Type Name Description System.String alias The database alias. Properties Alias Database alias Declaration public string Alias { get; } Property Value Type Description System.String"
  },
  "api/Kros.KORM/Kros.KORM.Data.ITransaction.html": {
    "href": "api/Kros.KORM/Kros.KORM.Data.ITransaction.html",
    "title": "Interface ITransaction | Kros.Libs",
    "keywords": "Interface ITransaction Represent database transaction. Instances of this class are obtained from BeginTransaction() and it is not designed to be directly constructed in your application code. Namespace : Kros.KORM.Data Assembly : Kros.KORM.dll Syntax public interface ITransaction : IDisposable Properties CommandTimeout The time in seconds to wait for the System.Data.Common.DbCommand.CommandTimeout in this transaction to execute. If not set, default value (30 s) will be used. Caution: Can be set only for main transaction (nested will share this value). Declaration int CommandTimeout { get; set; } Property Value Type Description System.Int32 Remarks A value of 0 indicates no limit (an attempt to execute a command will wait indefinitely). Methods Commit() Commits all changes made to the database in the current transaction. Declaration void Commit() Rollback() Discards all changes made to the database in the current transaction. Declaration void Rollback()"
  },
  "api/Kros.KORM/Kros.KORM.Query.IQuery-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.IQuery-1.html",
    "title": "Interface IQuery<T> | Kros.Libs",
    "keywords": "Interface IQuery<T> Interface, which describe class for executing query. Instance which implement this interface can be used for creating and executing query for T model. Inherited Members IProjectionQuery<T>.Where(String, Object[]) IProjectionQuery<T>.FirstOrDefault(String, Object[]) IProjectionQuery<T>.Any(String, Object[]) IProjectionQuery<T>.OrderBy(String) IProjectionQuery<T>.GroupBy(String) IQueryBase<T>.AsDbSet() IQueryBase<T>.ExecuteScalar() IQueryBase<T>.ExecuteStringScalar() IQueryBase<T>.ExecuteScalar<TRet>() Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public interface IQuery<T> : IProjectionQuery<T>, IQueryBase<T>, IOrderedQueryable<T>, IQueryable<T>, IEnumerable<T>, IOrderedQueryable, IQueryable, IEnumerable Type Parameters Name Description T Type of model class. Remarks When you don't use Select or From function, than default values are taken from model. Examples You can use standard string sql query for querying data. You can use sql query builder. Methods From(String) Add FROM part to sql query. Declaration IProjectionQuery<T> From(string table) Parameters Type Name Description System.String table Table name or join. Returns Type Description IProjectionQuery <T> Query for enumerable models. Remarks When From method is not call, query take table by T model type. Examples Exceptions Type Condition System.ArgumentNullException if table is null or white string. Select(String) Add select part to sql. Declaration IQuery<T> Select(string selectPart) Parameters Type Name Description System.String selectPart The columns for select clausule. (Separate by ,) Returns Type Description IQuery <T> Query for enumerable models. Remarks When Select method is not call, query take columns by T model. Examples Exceptions Type Condition System.ArgumentNullException if sqlPart is null or white string. Select(String[]) Add columns to sql. Declaration IQuery<T> Select(params string[] columns) Parameters Type Name Description System.String [] columns The columns for select clausule. Returns Type Description IQuery <T> Query for enumerable models. Remarks When Select method is not call, query take columns by T model. Examples Select<TResult>(Func<T, TResult>) Add columns to sql Declaration IQuery<T> Select<TResult>(Func<T, TResult> selector) Parameters Type Name Description System.Func <T, TResult> selector The selector. Returns Type Description IQuery <T> Query for enumerable models. Type Parameters Name Description TResult The type of the result. Remarks When Select method is not call, query take columns by T model. Examples Exceptions Type Condition System.ArgumentNullException if selector is null. Sql(String, Object[]) Create query from sql statement. Declaration IQueryBase<T> Sql(string sql, params object[] args) Parameters Type Name Description System.String sql The SQL for executing in server. System.Object [] args The arguments. Returns Type Description IQueryBase <T> Query from sql. Remarks Sql must be server specific. Because no translation is provide. Exceptions Type Condition System.ArgumentNullException if sql is null or white string. See Also IQueryBase <T>"
  },
  "api/Kros.KORM/Kros.KORM.Query.IDbSet-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.IDbSet-1.html",
    "title": "Interface IDbSet<T> | Kros.Libs",
    "keywords": "Interface IDbSet<T> An IDbSet represents the collection of all entities in the context, or that can be queried from the database, of a given type. DbSet is a concrete implementation of IDbSet. Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public interface IDbSet<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T The type that defines the set. Properties AddedItems List of items in Added state. Declaration IEnumerable<T> AddedItems { get; } Property Value Type Description System.Collections.Generic.IEnumerable <T> DeletedItems List of items in Deleted state. Declaration IEnumerable<T> DeletedItems { get; } Property Value Type Description System.Collections.Generic.IEnumerable <T> EditedItems List of items in Edited state. Declaration IEnumerable<T> EditedItems { get; } Property Value Type Description System.Collections.Generic.IEnumerable <T> Methods Add(T) Adds the item to the context underlying the set in the Added state such that it will be inserted into the database when CommitChanges is called. Declaration void Add(T entity) Parameters Type Name Description T entity The item to add. Add(IEnumerable<T>) Adds the items to the context underlying the set in the Added state such that it will be inserted into the database when CommitChanges is called. Declaration void Add(IEnumerable<T> entities) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities The items to add. BulkInsert() Executes bulk insert over pending added items. Declaration void BulkInsert() Examples BulkInsert(IEnumerable<T>) Executes bulk insert over items . Declaration void BulkInsert(IEnumerable<T> items) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items The items to insert. BulkUpdate() Executes bulk update over pending edited items. Declaration void BulkUpdate() Examples BulkUpdate(Action<IDbConnection, IDbTransaction, String>) Executes bulk update over pending edited items with specific action. Declaration void BulkUpdate(Action<IDbConnection, IDbTransaction, string> tempTableAction) Parameters Type Name Description System.Action < System.Data.IDbConnection , System.Data.IDbTransaction , System.String > tempTableAction The action execute on temp table (modify data in temp table). BulkUpdate(IEnumerable<T>) Executes bulk update over items . Declaration void BulkUpdate(IEnumerable<T> items) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items The items to update. BulkUpdate(IEnumerable<T>, Action<IDbConnection, IDbTransaction, String>) Executes bulk update over items with specific action. Declaration void BulkUpdate(IEnumerable<T> items, Action<IDbConnection, IDbTransaction, string> tempTableAction) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items The items to update. System.Action < System.Data.IDbConnection , System.Data.IDbTransaction , System.String > tempTableAction The action execute on temp table (modify data in temp table). Clear() Rolls back all pending changes. Declaration void Clear() CommitChanges() Commits all pending changes to the database. Declaration void CommitChanges() Delete(T) Marks the item as Deleted such that it will be deleted from the database when CommitChanges is called. Declaration void Delete(T entity) Parameters Type Name Description T entity The item to delete. Delete(IEnumerable<T>) Marks the items as Deleted such that it will be deleted from the database when CommitChanges is called. Declaration void Delete(IEnumerable<T> entities) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities The items to delete. Edit(T) Marks the item as Edited such that it will be updated in the database when CommitChanges is called. Declaration void Edit(T entity) Parameters Type Name Description T entity The item to edit. Edit(IEnumerable<T>) Marks the items as Edited such that it will be updated in the database when CommitChanges is called. Declaration void Edit(IEnumerable<T> entities) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities The items to edit."
  },
  "api/Kros.KORM.MsAccess/Kros.KORM.Query.Sql.MsAccess.MsAccessQuerySqlGenerator.html": {
    "href": "api/Kros.KORM.MsAccess/Kros.KORM.Query.Sql.MsAccess.MsAccessQuerySqlGenerator.html",
    "title": "Class MsAccessQuerySqlGenerator | Kros.Libs",
    "keywords": "Class MsAccessQuerySqlGenerator Generator sql query for MS Access. Inheritance System.Object System.Linq.Expressions.ExpressionVisitor DefaultQuerySqlGenerator MsAccessQuerySqlGenerator Implements ISqlExpressionVisitor Inherited Members DefaultQuerySqlGenerator.DatabaseMapper DefaultQuerySqlGenerator.GenerateSql(Expression) DefaultQuerySqlGenerator.VisitSql(SqlExpression) DefaultQuerySqlGenerator.VisitSelect(SelectExpression) DefaultQuerySqlGenerator.VisitColumns(ColumnsExpression) DefaultQuerySqlGenerator.VisitTable(TableExpression) DefaultQuerySqlGenerator.VisitWhere(WhereExpression) DefaultQuerySqlGenerator.VisitGroupBy(GroupByExpression) DefaultQuerySqlGenerator.VisitOrderBy(OrderByExpression) DefaultQuerySqlGenerator.SelectExpression DefaultQuerySqlGenerator.LinqStringBuilder DefaultQuerySqlGenerator.LinqParameters DefaultQuerySqlGenerator.Visit(Expression) DefaultQuerySqlGenerator.VisitMethodCall(MethodCallExpression) DefaultQuerySqlGenerator.VisitVbOperatorsMethods(MethodCallExpression, ExpressionType) DefaultQuerySqlGenerator.VisitCompare(MethodCallExpression, ExpressionType) DefaultQuerySqlGenerator.VisitLinqExpression(MethodCallExpression) DefaultQuerySqlGenerator.VisitAny(MethodCallExpression) DefaultQuerySqlGenerator.VisitTake(MethodCallExpression) DefaultQuerySqlGenerator.VisitAggregate(MethodCallExpression, String) DefaultQuerySqlGenerator.VisitCount(MethodCallExpression) DefaultQuerySqlGenerator.VisitWhere(MethodCallExpression) DefaultQuerySqlGenerator.VisitFirst(MethodCallExpression) DefaultQuerySqlGenerator.VisitUnary(UnaryExpression) DefaultQuerySqlGenerator.VisitBinary(BinaryExpression) DefaultQuerySqlGenerator.GetOperator(BinaryExpression) DefaultQuerySqlGenerator.VisitConstant(ConstantExpression) DefaultQuerySqlGenerator.VisitMember(MemberExpression) DefaultQuerySqlGenerator.VisitStringMethods(MethodCallExpression) DefaultQuerySqlGenerator.BindReplace(MethodCallExpression) DefaultQuerySqlGenerator.BindIsNullOrEmpty(MethodCallExpression) DefaultQuerySqlGenerator.BindContains(MethodCallExpression) DefaultQuerySqlGenerator.BindEndWith(MethodCallExpression) DefaultQuerySqlGenerator.BindStartWith(MethodCallExpression) Namespace : Kros.KORM.Query.Sql.MsAccess Assembly : Kros.KORM.MsAccess.dll Syntax public class MsAccessQuerySqlGenerator : DefaultQuerySqlGenerator, ISqlExpressionVisitor Constructors MsAccessQuerySqlGenerator(IDatabaseMapper) Initializes a new instance of the MsAccessQuerySqlGenerator class. Declaration public MsAccessQuerySqlGenerator(IDatabaseMapper databaseMapper) Parameters Type Name Description IDatabaseMapper databaseMapper Database mapper. Methods BindAnyCondition(String) Adds any method to query. Declaration protected override string BindAnyCondition(string existsCondition) Parameters Type Name Description System.String existsCondition Returns Type Description System.String Overrides DefaultQuerySqlGenerator.BindAnyCondition(String) BindSubstring(MethodCallExpression) Declaration protected override Expression BindSubstring(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression Returns Type Description System.Linq.Expressions.Expression Overrides DefaultQuerySqlGenerator.BindSubstring(MethodCallExpression) BindToLower(MethodCallExpression) Declaration protected override Expression BindToLower(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression Returns Type Description System.Linq.Expressions.Expression Overrides DefaultQuerySqlGenerator.BindToLower(MethodCallExpression) BindToUpper(MethodCallExpression) Declaration protected override Expression BindToUpper(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression Returns Type Description System.Linq.Expressions.Expression Overrides DefaultQuerySqlGenerator.BindToUpper(MethodCallExpression) BindTrim(MethodCallExpression) Declaration protected override Expression BindTrim(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression Returns Type Description System.Linq.Expressions.Expression Overrides DefaultQuerySqlGenerator.BindTrim(MethodCallExpression) Implements ISqlExpressionVisitor See Also DefaultQuerySqlGenerator"
  },
  "api/Kros.KORM/Kros.KORM.Metadata.Attribute.DbTypeAttribute.html": {
    "href": "api/Kros.KORM/Kros.KORM.Metadata.Attribute.DbTypeAttribute.html",
    "title": "Class DbTypeAttribute | Kros.Libs",
    "keywords": "Class DbTypeAttribute Attribute which describe database column type of property. Inheritance System.Object System.Attribute DbTypeAttribute Namespace : Kros.KORM.Metadata.Attribute Assembly : Kros.KORM.dll Syntax [Obsolete(\"Atribút Alias sa už nepoužíva. KORM si databázový typ načíta priamo zo schémy databázy.\")] [AttributeUsage(AttributeTargets.Property)] public class DbTypeAttribute : Attribute, _Attribute Examples You can use DbTypeAttribute for defined custom DbType. Properties Type Database type. Declaration public DbType Type { get; set; } Property Value Type Description System.Data.DbType"
  },
  "api/Kros.KORM/Kros.KORM.Exceptions.AlreadyInCollectionException.html": {
    "href": "api/Kros.KORM/Kros.KORM.Exceptions.AlreadyInCollectionException.html",
    "title": "Class AlreadyInCollectionException | Kros.Libs",
    "keywords": "Class AlreadyInCollectionException Exception class for item already exists in the collection. Inheritance System.Object System.Exception AlreadyInCollectionException Namespace : Kros.KORM.Exceptions Assembly : Kros.KORM.dll Syntax public class AlreadyInCollectionException : Exception, ISerializable, _Exception Constructors AlreadyInCollectionException() Initializes a new instance of the AlreadyInCollectionException class. Declaration public AlreadyInCollectionException() AlreadyInCollectionException(String) Initializes a new instance of the AlreadyInCollectionException class. Declaration public AlreadyInCollectionException(string message) Parameters Type Name Description System.String message Exception message."
  },
  "api/Kros.KORM/Kros.KORM.Query.Sql.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Sql.html",
    "title": "Namespace Kros.KORM.Query.Sql | Kros.Libs",
    "keywords": "Namespace Kros.KORM.Query.Sql Classes DefaultQuerySqlGenerator Default sql query visitor for generating SELECT command. DefaultQuerySqlGenerator.OrderBy Class which has information about order statement. DefaultQuerySqlGenerator.Parameters Class which help with Linq query parameters. ParameterExtractingExpressionVisitor Class for extracting parameters from Expression. SqlServerQuerySqlGenerator Generator sql query for SQL server. Interfaces ISqlExpressionVisitor Interface, which describe visitor for genereting sql select command. Enums DefaultQuerySqlGenerator.OrderType Order type."
  },
  "api/Kros.KORM/Kros.KORM.CommandGenerator.html": {
    "href": "api/Kros.KORM/Kros.KORM.CommandGenerator.html",
    "title": "Namespace Kros.KORM.CommandGenerator | Kros.Libs",
    "keywords": "Namespace Kros.KORM.CommandGenerator Interfaces ICommandGenerator<T> Iterface, which describes generating single-table commands that are used to commit changes made to a DbSet with the associated database."
  },
  "api/Kros.KORM/Kros.KORM.Query.IFilteredQuery-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.IFilteredQuery-1.html",
    "title": "Interface IFilteredQuery<T> | Kros.Libs",
    "keywords": "Interface IFilteredQuery<T> Represent result of filter (where) operation. Inherited Members IQueryBase<T>.AsDbSet() IQueryBase<T>.ExecuteScalar() IQueryBase<T>.ExecuteStringScalar() IQueryBase<T>.ExecuteScalar<TRet>() Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public interface IFilteredQuery<T> : IQueryBase<T>, IOrderedQueryable<T>, IQueryable<T>, IEnumerable<T>, IOrderedQueryable, IQueryable, IEnumerable Type Parameters Name Description T Type of model class. Methods GroupBy(String) Add group by statement to sql query. Declaration IGroupedQuery<T> GroupBy(string groupBy) Parameters Type Name Description System.String groupBy The group by statement. Returns Type Description IGroupedQuery <T> Query for enumerable models. Examples Exceptions Type Condition System.ArgumentNullException if groupBy is null or white string. OrderBy(String) Add order by statement to sql. Declaration IOrderedQuery<T> OrderBy(string orderBy) Parameters Type Name Description System.String orderBy The order by statement. Returns Type Description IOrderedQuery <T> Query for enumerable models. Examples Exceptions Type Condition System.ArgumentNullException if orderBy is null or white string. See Also IQueryBase <T>"
  },
  "api/Kros.KORM.MsAccess/Kros.KORM.Query.Sql.MsAccess.html": {
    "href": "api/Kros.KORM.MsAccess/Kros.KORM.Query.Sql.MsAccess.html",
    "title": "Namespace Kros.KORM.Query.Sql.MsAccess | Kros.Libs",
    "keywords": "Namespace Kros.KORM.Query.Sql.MsAccess Classes MsAccessQuerySqlGenerator Generator sql query for MS Access."
  },
  "api/Kros.KORM/Kros.KORM.Query.CommandParameter.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.CommandParameter.html",
    "title": "Class CommandParameter | Kros.Libs",
    "keywords": "Class CommandParameter Parameter pre SQL príkaz ( ExecuteNonQuery(String) ), alebo stored procedúru ( ExecuteStoredProcedure<TResult>(String) ). Inheritance System.Object CommandParameter Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public class CommandParameter Constructors CommandParameter(String, Object) Vytvorí nový parameter so zadanými hodnotami. Declaration public CommandParameter(string parameterName, object value) Parameters Type Name Description System.String parameterName Meno parametra. System.Object value Hodnota parametra. CommandParameter(String, Object, DbType) Vytvorí nový parameter so zadanými hodnotami. Declaration public CommandParameter(string parameterName, object value, DbType dataType) Parameters Type Name Description System.String parameterName Meno parametra. System.Object value Hodnota parametra. System.Data.DbType dataType Dátový typ parametra. CommandParameter(String, Object, ParameterDirection) Vytvorí nový parameter so zadanými hodnotami. Declaration public CommandParameter(string parameterName, object value, ParameterDirection direction) Parameters Type Name Description System.String parameterName Meno parametra. System.Object value Hodnota parametra. System.Data.ParameterDirection direction Druh parametra. Zmysel má len pri parametroch pre stored procedúry. CommandParameter(String, Object, Nullable<DbType>, ParameterDirection) Vytvorí nový parameter so zadanými hodnotami. Declaration public CommandParameter(string parameterName, object value, DbType? dataType, ParameterDirection direction) Parameters Type Name Description System.String parameterName Meno parametra. System.Object value Hodnota parametra. System.Nullable < System.Data.DbType > dataType Dátový typ parametra. System.Data.ParameterDirection direction Druh parametra. Zmysel má len pri parametroch pre stored procedúry. Properties DataType Dátový typ parametra. Ak nie je nastavený, reálnemu databázovému parametru sa nastaví automaticky podľa typu hodnoty Value . Musí byť nastavený, ak Value je NULL. Declaration public DbType? DataType { get; set; } Property Value Type Description System.Nullable < System.Data.DbType > Direction Druh parametra: vstupný, výstupný, vstupno-výstupný, alebo návratová hodnota. Zmysel má len pri parametroch pre stored procedúry. Declaration public ParameterDirection Direction { get; set; } Property Value Type Description System.Data.ParameterDirection ParameterName Meno parametra. Declaration public string ParameterName { get; } Property Value Type Description System.String Value Hodnota parametra. Ak je NULL ( null , alebo DbNull.Value ), mal by byť nastavený presný dátový typ DataType . Declaration public object Value { get; set; } Property Value Type Description System.Object"
  },
  "api/Kros.KORM/Kros.KORM.Metadata.Attribute.html": {
    "href": "api/Kros.KORM/Kros.KORM.Metadata.Attribute.html",
    "title": "Namespace Kros.KORM.Metadata.Attribute | Kros.Libs",
    "keywords": "Namespace Kros.KORM.Metadata.Attribute Classes AliasAttribute Attribute which describe database name of property / class. ConverterAttribute Attribute for getting data converter. DbTypeAttribute Attribute which describe database column type of property. KeyAttribute Attribute, which describe property, which are part of primary key. NoMapAttribute Attribute, which describe property, which doesn't exist in database."
  },
  "api/Kros.KORM/Kros.KORM.Data.html": {
    "href": "api/Kros.KORM/Kros.KORM.Data.html",
    "title": "Namespace Kros.KORM.Data | Kros.Libs",
    "keywords": "Namespace Kros.KORM.Data Interfaces ITransaction Represent database transaction. Instances of this class are obtained from BeginTransaction() and it is not designed to be directly constructed in your application code."
  },
  "api/Kros.KORM/Kros.KORM.Query.Expressions.ColumnsExpression.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Expressions.ColumnsExpression.html",
    "title": "Class ColumnsExpression | Kros.Libs",
    "keywords": "Class ColumnsExpression Expression which represent projection part of sql select. Inheritance System.Object System.Linq.Expressions.Expression QueryExpression ColumnsExpression Inherited Members QueryExpression.NodeType QueryExpression.Type Namespace : Kros.KORM.Query.Expressions Assembly : Kros.KORM.dll Syntax public class ColumnsExpression : QueryExpression Constructors ColumnsExpression(String) Initializes a new instance of the ColumnsExpression class. Declaration public ColumnsExpression(string columns) Parameters Type Name Description System.String columns The columns part of sql. Remarks Columns are separate by , ColumnsExpression(String[]) Initializes a new instance of the ColumnsExpression class. Declaration public ColumnsExpression(params string[] columns) Parameters Type Name Description System.String [] columns The columns. Fields SelectStatement The select statement Declaration public const string SelectStatement = \"SELECT\" Field Value Type Description System.String Properties ColumnsPart Gets the columns part. Declaration public string ColumnsPart { get; } Property Value Type Description System.String Methods Accept(ExpressionVisitor) Dispatches to the specific visit method for this node type. For example, System.Linq.Expressions.MethodCallExpression calls the System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression) . Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor The visitor to visit this node with. Returns Type Description System.Linq.Expressions.Expression The result of visiting this node. Overrides System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor) Create<T, TResult>(Func<T, TResult>, TableInfo) Creates the ColumnsExpression by selector. Declaration public static ColumnsExpression Create<T, TResult>(Func<T, TResult> selector, TableInfo tableInfo) Parameters Type Name Description System.Func <T, TResult> selector The selector. TableInfo tableInfo The table information. Returns Type Description ColumnsExpression ColumnsExpression Type Parameters Name Description T Type of model class. TResult The type of the result. See Also ISqlExpressionVisitor"
  },
  "api/Kros.KORM/Kros.KORM.Query.Expressions.OrderByExpression.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Expressions.OrderByExpression.html",
    "title": "Class OrderByExpression | Kros.Libs",
    "keywords": "Class OrderByExpression Expression, which represent ORDER BY statement from sql select query. Inheritance System.Object System.Linq.Expressions.Expression QueryExpression OrderByExpression Inherited Members QueryExpression.NodeType QueryExpression.Type Namespace : Kros.KORM.Query.Expressions Assembly : Kros.KORM.dll Syntax public class OrderByExpression : QueryExpression Constructors OrderByExpression(String) Initializes a new instance of the OrderByExpression class. Declaration public OrderByExpression(string orderBy) Parameters Type Name Description System.String orderBy The orderBy part of sql. Remarks Order by columns are separate by , OrderByExpression(String[]) Initializes a new instance of the OrderByExpression class. Declaration public OrderByExpression(params string[] columns) Parameters Type Name Description System.String [] columns The orderBy. Fields OrderByStatement The group by statement Declaration public const string OrderByStatement = \"ORDER BY\" Field Value Type Description System.String Properties OrderByPart Gets or sets the group by part. Declaration public string OrderByPart { get; } Property Value Type Description System.String Methods Accept(ExpressionVisitor) Dispatches to the specific visit method for this node type. For example, System.Linq.Expressions.MethodCallExpression calls the System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression) . Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor The visitor to visit this node with. Returns Type Description System.Linq.Expressions.Expression The result of visiting this node. Overrides System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor) See Also ISqlExpressionVisitor"
  },
  "api/Kros.KORM/Kros.KORM.Query.Expressions.TableExpression.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Expressions.TableExpression.html",
    "title": "Class TableExpression | Kros.Libs",
    "keywords": "Class TableExpression Expression, which represent FROM statement from sql select query. Inheritance System.Object System.Linq.Expressions.Expression QueryExpression TableExpression Inherited Members QueryExpression.NodeType QueryExpression.Type Namespace : Kros.KORM.Query.Expressions Assembly : Kros.KORM.dll Syntax public class TableExpression : QueryExpression Constructors TableExpression(String) Initializes a new instance of the TableExpression class. Declaration public TableExpression(string table) Parameters Type Name Description System.String table The table (or join). Fields FromStatement From statement Declaration public const string FromStatement = \"FROM\" Field Value Type Description System.String Properties TablePart Gets the table part. Declaration public string TablePart { get; } Property Value Type Description System.String Methods Accept(ExpressionVisitor) Dispatches to the specific visit method for this node type. For example, System.Linq.Expressions.MethodCallExpression calls the System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression) . Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor The visitor to visit this node with. Returns Type Description System.Linq.Expressions.Expression The result of visiting this node. Overrides System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor) See Also ISqlExpressionVisitor"
  },
  "api/Kros.KORM/Kros.KORM.Materializer.IMaterialize.html": {
    "href": "api/Kros.KORM/Kros.KORM.Materializer.IMaterialize.html",
    "title": "Interface IMaterialize | Kros.Libs",
    "keywords": "Interface IMaterialize Specifies that this object supports notification about materializing. Namespace : Kros.KORM.Materializer Assembly : Kros.KORM.dll Syntax public interface IMaterialize Methods OnAfterMaterialize(IDataRecord) Called when model is materialized. Declaration void OnAfterMaterialize(IDataRecord source) Parameters Type Name Description System.Data.IDataRecord source The source, which from was model materialized."
  },
  "api/Kros.Utils/Kros.Data.Schema.IndexType.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.IndexType.html",
    "title": "Enum IndexType | Kros.Libs",
    "keywords": "Enum IndexType Typ indexu tabuľky. Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public enum IndexType Fields Name Description Index Obyčajný index. PrimaryKey Primárny kľúč tabuľky. UniqueKey Unikátny index."
  },
  "api/Kros.KORM/Kros.KORM.Converter.IConverter.html": {
    "href": "api/Kros.KORM/Kros.KORM.Converter.IConverter.html",
    "title": "Interface IConverter | Kros.Libs",
    "keywords": "Interface IConverter Interface, which describe converter, which know convert data from db to object and reverse. Namespace : Kros.KORM.Converter Assembly : Kros.KORM.dll Syntax public interface IConverter Methods Convert(Object) Converts the specified value from Db to Clr. Declaration object Convert(object value) Parameters Type Name Description System.Object value The value. Returns Type Description System.Object ConvertBack(Object) Converts the value from Clr to Db. Declaration object ConvertBack(object value) Parameters Type Name Description System.Object value The value. Returns Type Description System.Object Converted value for Db."
  },
  "api/Kros.Utils.MsAccess/Kros.Data.BulkActions.MsAccess.BulkInsertColumnType.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.BulkActions.MsAccess.BulkInsertColumnType.html",
    "title": "Enum BulkInsertColumnType | Kros.Libs",
    "keywords": "Enum BulkInsertColumnType Typ stĺpca pre hromadné vkladanie dát do databázy zo súboru. Namespace : Kros.Data.BulkActions.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public enum BulkInsertColumnType Fields Name Description Text Stĺpec je textový. Undefined Typ stĺpca nie definovaný."
  },
  "api/Kros.KORM/Kros.KORM.Query.Sql.DefaultQuerySqlGenerator.OrderType.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Sql.DefaultQuerySqlGenerator.OrderType.html",
    "title": "Enum DefaultQuerySqlGenerator.OrderType | Kros.Libs",
    "keywords": "Enum DefaultQuerySqlGenerator.OrderType Order type. Namespace : Kros.KORM.Query.Sql Assembly : Kros.KORM.dll Syntax protected enum OrderType Fields Name Description Ascending The ascending. Descending The descending."
  },
  "api/Kros.KORM/Kros.KORM.Materializer.IModelBuilder.html": {
    "href": "api/Kros.KORM/Kros.KORM.Materializer.IModelBuilder.html",
    "title": "Interface IModelBuilder | Kros.Libs",
    "keywords": "Interface IModelBuilder Interface for ModelBuilder, which know materialize data from Ado to objects. Namespace : Kros.KORM.Materializer Assembly : Kros.KORM.dll Syntax public interface IModelBuilder Examples Methods Materialize<T>(DataRow) Materialize data from dataRow to instances of model type T . Declaration T Materialize<T>(DataRow dataRow) Parameters Type Name Description System.Data.DataRow dataRow Data row of the table. Returns Type Description T Model. Type Parameters Name Description T Type of model. Examples Materialize<T>(DataTable) Materialize data from data table to instances of model type . Declaration IEnumerable<T> Materialize<T>(DataTable table) Parameters Type Name Description System.Data.DataTable table The table. Returns Type Description System.Collections.Generic.IEnumerable <T> IEnumerable of models. Type Parameters Name Description T Type of model. Examples Materialize<T>(IDataReader) Materialize data from reader to instances of model type. Declaration IEnumerable<T> Materialize<T>(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader The reader from which materialize data. Returns Type Description System.Collections.Generic.IEnumerable <T> IEnumerable of models. Type Parameters Name Description T Type of model. Remarks Doesn' call dispose over reader. Examples"
  },
  "api/Kros.KORM/Kros.KORM.Injection.IInjectionConfigurator-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.Injection.IInjectionConfigurator-1.html",
    "title": "Interface IInjectionConfigurator<TModel> | Kros.Libs",
    "keywords": "Interface IInjectionConfigurator<TModel> Interface, which describe configurator, for configurate model property injection. Namespace : Kros.KORM.Injection Assembly : Kros.KORM.dll Syntax public interface IInjectionConfigurator<TModel> Type Parameters Name Description TModel Model type. Methods FillProperty<TValue>(Expression<Func<TModel, TValue>>, Func<TValue>) Fill model property with injector. Declaration IInjectionConfigurator<TModel> FillProperty<TValue>(Expression<Func<TModel, TValue>> modelProperty, Func<TValue> injector) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TModel, TValue>> modelProperty Expression for defined property for injection. System.Func <TValue> injector Function which is used for injection value to property. Returns Type Description IInjectionConfigurator <TModel> Configurator, for next configurations. Type Parameters Name Description TValue Property type."
  },
  "api/Kros.Utils/Kros.Data.Schema.SortOrder.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SortOrder.html",
    "title": "Enum SortOrder | Kros.Libs",
    "keywords": "Enum SortOrder Zoradenie indexového stĺpca. Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public enum SortOrder Fields Name Description Ascending Vzostupne - od najmenšej hodnoty po najväčšiu. Descending Zostupne - od najväčšej hodnoty po najmenšiu."
  },
  "api/Kros.Utils/Kros.Data.Schema.DefaultValueParsers.ParseDefaultValueFunction.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.DefaultValueParsers.ParseDefaultValueFunction.html",
    "title": "Delegate DefaultValueParsers.ParseDefaultValueFunction | Kros.Libs",
    "keywords": "Delegate DefaultValueParsers.ParseDefaultValueFunction Hlavička funkcie, ktorá parsuje predvolenú hodnotu stĺpca. Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public delegate object ParseDefaultValueFunction(string defaultValue); Parameters Type Name Description System.String defaultValue Predvolená hodnota stĺpca ako reťazec. Returns Type Description System.Object Vráti hodnotu skonvertovanú na potrebný dátový typ, alebo null , ak sa konverzia nepodarila."
  },
  "api/Kros.Utils/Kros.Caching.ICache-2.html": {
    "href": "api/Kros.Utils/Kros.Caching.ICache-2.html",
    "title": "Interface ICache<TKey, TValue> | Kros.Libs",
    "keywords": "Interface ICache<TKey, TValue> Interface, which describe class for caching data. Namespace : Kros.Caching Assembly : Kros.Utils.dll Syntax public interface ICache<TKey, TValue> Type Parameters Name Description TKey The type of the key. TValue The type of the value. Properties Count Gets the count of cached data. Declaration int Count { get; } Property Value Type Description System.Int32 Methods Clear() Clears the cache. Declaration void Clear() Get(TKey, Func<TValue>) Gets the cached value by key. Declaration TValue Get(TKey key, Func<TValue> factory) Parameters Type Name Description TKey key The key. System.Func <TValue> factory The factory for creating value, if doesn't exist in cahce. Returns Type Description TValue Value from Cache. Remarks If value key doesn't exist in cache, then factory is use for creating value and value is set to cache."
  },
  "api/Kros.KORM/Kros.KORM.Converter.html": {
    "href": "api/Kros.KORM/Kros.KORM.Converter.html",
    "title": "Namespace Kros.KORM.Converter | Kros.Libs",
    "keywords": "Namespace Kros.KORM.Converter Interfaces IConverter Interface, which describe converter, which know convert data from db to object and reverse."
  },
  "api/Kros.KORM/Kros.KORM.Materializer.IModelFactory.html": {
    "href": "api/Kros.KORM/Kros.KORM.Materializer.IModelFactory.html",
    "title": "Interface IModelFactory | Kros.Libs",
    "keywords": "Interface IModelFactory Interface for factory, which know materialize model from database. Namespace : Kros.KORM.Materializer Assembly : Kros.KORM.dll Syntax public interface IModelFactory Methods GetFactory<T>(IDataReader) Gets the factory for creating and filling model. Declaration Func<IDataReader, T> GetFactory<T>(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Reader from fill model. Returns Type Description System.Func < System.Data.IDataReader , T> Factory for creating and filling model. Type Parameters Name Description T Type of model class."
  },
  "api/Kros.KORM/Kros.KORM.Metadata.AutoIncrementMethodType.html": {
    "href": "api/Kros.KORM/Kros.KORM.Metadata.AutoIncrementMethodType.html",
    "title": "Enum AutoIncrementMethodType | Kros.Libs",
    "keywords": "Enum AutoIncrementMethodType Type of primary key auto increment method. Namespace : Kros.KORM.Metadata Assembly : Kros.KORM.dll Syntax public enum AutoIncrementMethodType Fields Name Description Custom KORM generate primary key for entity. None The primary key is not auto incremented."
  },
  "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.MsAccessErrorCode.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.MsAccessErrorCode.html",
    "title": "Enum MsAccessErrorCode | Kros.Libs",
    "keywords": "Enum MsAccessErrorCode Chybové kódy Microsoft JET. Namespace : Kros.Data.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public enum MsAccessErrorCode Remarks Chybový kód je vo výnimke System.Data.OleDb.OleDbException vo vlastnosti System.Data.OleDb.OleDbError.SQLState . Zoznam chybových kódov je na adrese https://msdn.microsoft.com/en-us/library/bb221208(v=office.12).aspx . Fields Name Description CannotFindTableOrQuery The Microsoft Jet database engine cannot find the input table or query 'name'. Make sure it exists and that its name is spelled correctly. CannotOpenDatabaseFileIsInvalid Cannot open database 'name'. It may not be a database that your application recognizes, or the file may be corrupt. CannotOpenDatabaseIsLocked The Microsoft Jet database engine cannot open the file 'name'. It is already opened exclusively by another user, or you need permission to view its data. CouldNotReadRecordIsLocked Could not read the record; currently locked by another user. CouldNotUpdateCurrentlyLocked Could not update; currently locked. CouldNotUseFileAlreadyInUse Could not use <name>; file already in use. DatabaseAlreadyOpenedExclusively You attempted to open a database that is already opened exclusively by user 'userName' on machine 'machineName'. Try again when the database is available. KeyDuplicity The changes you requested to the table were not successful because they would create duplicate values in the index, primary key, or relationship. Change the data in the field or fields that contain duplicate data, remove the index, or redefine the index to permit duplicate entries and try again. RelationshipViolation You cannot add or change a record because a related record is required in table 'name'. Unknown Neznámy typ chyby."
  },
  "api/Kros.Utils/Kros.Data.SqlServer.SqlServerErrorCode.html": {
    "href": "api/Kros.Utils/Kros.Data.SqlServer.SqlServerErrorCode.html",
    "title": "Enum SqlServerErrorCode | Kros.Libs",
    "keywords": "Enum SqlServerErrorCode Chybové kódy Microsoft Sql Server-a. Namespace : Kros.Data.SqlServer Assembly : Kros.Utils.dll Syntax public enum SqlServerErrorCode Remarks Chybový kód je vo výnimke System.Data.SqlClient.SqlException vo vlastnosti System.Data.SqlClient.SqlException.Number . Zoznam chybových kódov je na adrese https://msdn.microsoft.com/en-us/library/cc645603.aspx . Fields Name Description CannotInsertDuplicateKeyRow Cannot insert duplicate key row in object 'objectName' with unique index 'indexName'. ConstraintViolation The ... statement conflicted with the ... constraint. The conflict occurred in database ..., table .... DatabaseAlreadyExists Database 'name' already exists. Choose a different database name. DuplicateKeyViolation Violation of ... constraint 'constraintName'. Cannot insert duplicate key in object 'objectName'. InvalidColumnName Invalid column name 'name'. InvalidObjectName Invalid object name 'name'. ServerNotAccessible A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: Named Pipes Provider, error: 40 - Could not open a connection to SQL Server) TheDatabaseCouldNotBeExclusivelyLocked The database could not be exclusively locked to perform the operation. Unknown Neznámy typ chyby."
  },
  "api/Kros.KORM/Kros.KORM.Injection.html": {
    "href": "api/Kros.KORM/Kros.KORM.Injection.html",
    "title": "Namespace Kros.KORM.Injection | Kros.Libs",
    "keywords": "Namespace Kros.KORM.Injection Interfaces IInjectionConfigurator<TModel> Interface, which describe configurator, for configurate model property injection. IInjector Interface, which describe service injector, which know get injected values."
  },
  "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.ProviderType.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.ProviderType.html",
    "title": "Enum ProviderType | Kros.Libs",
    "keywords": "Enum ProviderType Typ MS Access providera, ktorý sa má použiť. Namespace : Kros.Data.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public enum ProviderType Fields Name Description Ace ACE provider. Jet JET provider."
  },
  "api/Kros.KORM/Kros.KORM.Injection.IInjector.html": {
    "href": "api/Kros.KORM/Kros.KORM.Injection.IInjector.html",
    "title": "Interface IInjector | Kros.Libs",
    "keywords": "Interface IInjector Interface, which describe service injector, which know get injected values. Namespace : Kros.KORM.Injection Assembly : Kros.KORM.dll Syntax public interface IInjector Methods GetValue(String) Get injected value for property. Declaration object GetValue(string propertyName) Parameters Type Name Description System.String propertyName Property, which want resolve. Returns Type Description System.Object Value for injection. IsInjectable(String) Can by property injected? Declaration bool IsInjectable(string propertyName) Parameters Type Name Description System.String propertyName Property name. Returns Type Description System.Boolean true if can by injected, otherwise false ."
  },
  "api/Kros.Utils/Kros.Data.Schema.ForeignKeyRule.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.ForeignKeyRule.html",
    "title": "Enum ForeignKeyRule | Kros.Libs",
    "keywords": "Enum ForeignKeyRule Pravidlo cudzieho kľúča - ako sa zachovať k detským záznamom po zmenení/zmazaní hlavného nadradeného. Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public enum ForeignKeyRule Fields Name Description Cascade Zmena v hlavnej tabuľke sa propaguje do detských záznamov. NoAction Žiadna akcia. SetDefault Pri zmene hlavného záznamu sa cudzí kľúč v detských záznamoch nastaví na predvolenú hodnotu stĺpca. SetNull Pri zmene hlavného záznamu sa cudzí kľúč v detských záznamoch nastaví na NULL ."
  },
  "api/Kros.KORM/Kros.KORM.Helper.ILogger.html": {
    "href": "api/Kros.KORM/Kros.KORM.Helper.ILogger.html",
    "title": "Interface ILogger | Kros.Libs",
    "keywords": "Interface ILogger Interface, which describe logger. Namespace : Kros.KORM.Helper Assembly : Kros.KORM.dll Syntax public interface ILogger Methods LogCommand(IDbCommand) Logs the command. Declaration void LogCommand(IDbCommand command) Parameters Type Name Description System.Data.IDbCommand command The command."
  },
  "api/Kros.Utils.MsAccess/index.html": {
    "href": "api/Kros.Utils.MsAccess/index.html",
    "title": "Kros.Utils.MsAccess | Kros.Libs",
    "keywords": "Kros.Utils.MsAccess"
  },
  "api/Kros.KORM.MsAccess/index.html": {
    "href": "api/Kros.KORM.MsAccess/index.html",
    "title": "Kros.KORM.MsAccess | Kros.Libs",
    "keywords": "Kros.KORM.MsAccess"
  },
  "api/Kros.Utils/index.html": {
    "href": "api/Kros.Utils/index.html",
    "title": "Kros.Utils | Kros.Libs",
    "keywords": "Kros.Utils"
  },
  "api/Kros.KORM/index.html": {
    "href": "api/Kros.KORM/index.html",
    "title": "Kros.KORM | Kros.Libs",
    "keywords": "Kros.KORM"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Welcome to Kros.Libs | Kros.Libs",
    "keywords": "Welcome to Kros.Libs This is Kros.Utils, Kros.Utils.MsAccess, Kros.KORM and Kros.KORM.MsAccess libraries documentation. Kros.Utils Universal library of various tools to simplify the work of the programmer. It is platform-independent (also applicable to desktop applications and server services) and is independent of third-party libraries. Kros.Utils.MsAccess Kros.Utils library extension for MS Access support. Only applicable in the full .NET framework. Kros.KORM Simple and fast micro-ORM framework for .NET. Kros.KORM.MsAccess Kros.KORM library extension for MS Access support. Only applicable in the full .NET framework."
  },
  "api/Kros.KORM/Kros.KORM.Metadata.ConventionModelMapper.html": {
    "href": "api/Kros.KORM/Kros.KORM.Metadata.ConventionModelMapper.html",
    "title": "Class ConventionModelMapper | Kros.Libs",
    "keywords": "Class ConventionModelMapper Model mapper, which know define convention for name mapping. Inheritance System.Object ConventionModelMapper Implements IModelMapper Namespace : Kros.KORM.Metadata Assembly : Kros.KORM.dll Syntax public class ConventionModelMapper : IModelMapper Constructors ConventionModelMapper() Initializes a new instance of the ConventionModelMapper class. Declaration public ConventionModelMapper() Properties MapColumnName Gets or sets the column name mapping logic. Declaration public Func<ColumnInfo, Type, string> MapColumnName { get; set; } Property Value Type Description System.Func < ColumnInfo , System.Type , System.String > Remarks Params: ColumnInfo - info about column. Type - Type of model. string - return column name. MapPrimaryKey Gets or sets the primary key mapping logic. Declaration public Func<TableInfo, IEnumerable<ColumnInfo>> MapPrimaryKey { get; set; } Property Value Type Description System.Func < TableInfo , System.Collections.Generic.IEnumerable < ColumnInfo >> MapTableName Gets or sets the table name mapping logic. Declaration public Func<TableInfo, Type, string> MapTableName { get; set; } Property Value Type Description System.Func < TableInfo , System.Type , System.String > Methods GetInjector<T>() Get property service injector. Declaration public IInjector GetInjector<T>() Returns Type Description IInjector Service property injector. Type Parameters Name Description T Model type. GetTableInfo(Type) Gets the table information. Declaration public TableInfo GetTableInfo(Type modelType) Parameters Type Name Description System.Type modelType Type of the model. Returns Type Description TableInfo Table info. GetTableInfo<T>() Gets the table information. Declaration public TableInfo GetTableInfo<T>() Returns Type Description TableInfo Table info. Type Parameters Name Description T Type of model. InjectionConfigurator<T>() Get property injection configuration for model T. Declaration public IInjectionConfigurator<T> InjectionConfigurator<T>() Returns Type Description IInjectionConfigurator <T> Type Parameters Name Description T Examples SetColumnName<TModel, TValue>(Expression<Func<TModel, TValue>>, String) Set column name for specific property. Declaration public void SetColumnName<TModel, TValue>(Expression<Func<TModel, TValue>> modelProperty, string columnName) where TModel : class Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TModel, TValue>> modelProperty Expression for defined property to. System.String columnName Database column name. Type Parameters Name Description TModel TValue Examples Implements IModelMapper See Also IModelMapper"
  },
  "api/Kros.Utils/Kros.IO.PathFormatter.html": {
    "href": "api/Kros.Utils/Kros.IO.PathFormatter.html",
    "title": "Class PathFormatter | Kros.Libs",
    "keywords": "Class PathFormatter Trieda na formátovanie ciest k súborom. Stará sa o to, aby celková cesta nepresiahla maximálnu povolenú dĺžku a aj o to, aby bola vygenerovaná cesta k súboru, ktorý ešte neexistuje. Inheritance System.Object PathFormatter Namespace : Kros.IO Assembly : Kros.Utils.dll Syntax public class PathFormatter Remarks Použitie triedy je vhodné napríklad pri exportoch, ak sa pri exporte generuje viacero súborov. Používateľ programu zadá len výstupný adresár a názvy súborov sa generujú na základe exportovaných dát. Trieda zabezpečí, aby vygenerované názvy boli platné, tzn. aby neobsahovali nepovolené znaky a aj aby náhodou nebola vygenerovaná príliš dlhá cesta k súboru. Zároveň kontroluje existenciu súboru. Ak už existuje spbor, ktorý vygenerovala, je k vygenerovanej ceste pridané číslo. K vytvoreným cestám je možné pridať ešte vlastný informačný reťazec. Pre jednoduché priame použitie je vytvorená statická inštancia Default . Properties CounterClosingString Uzatvárací reťazec pre počítadlo, ktorý sa vloží do názvu súboru/zložky za toto počítadlo. Počítadlo je uzavreté medzi CounterOpeningString a CounterClosingString . Štandardne je to pravá okrúhla zátvorka: ) . Declaration public string CounterClosingString { get; set; } Property Value Type Description System.String Remarks Pri nastavení hodnoty sú v nej nahradené znaky, ktoré nie sú platné pre názov súboru/zložky ( ReplaceInvalidPathChars(String) ). CounterOpeningString Otvárací reťazec pre počítadlo, ktorý sa vloží do názvu súboru/zložky pred toto počítadlo. Počítadlo je uzavreté medzi CounterOpeningString a CounterClosingString . Štandardne je to ľavá okrúhla zátvorka: ( . Declaration public string CounterOpeningString { get; set; } Property Value Type Description System.String Remarks Pri nastavení hodnoty sú v nej nahradené znaky, ktoré nie sú platné pre názov súboru/zložky ( ReplaceInvalidPathChars(String) ). Default Inštancia pre jednoduchšie priame použitie. Declaration public static PathFormatter Default { get; } Property Value Type Description PathFormatter InfoClosingString Uzatvárací reťazec pre dodatočnú informáciu, ktorý sa vloží do názvu súboru/zložky za túto informáciu. Dodatočná informácia je uzavretá medzi InfoOpeningString a InfoClosingString . Štandardne je to pravá okrúhla zátvorka: ) . Declaration public string InfoClosingString { get; set; } Property Value Type Description System.String Remarks Pri nastavení hodnoty sú v nej nahradené znaky, ktoré nie sú platné pre názov súboru/zložky ( ReplaceInvalidPathChars(String) ). InfoOpeningString Otvárací reťazec pre dodatočnú informáciu, ktorý sa vloží do názvu súboru/zložky pred túto informáciu. Dodatočná informácia je uzavretá medzi InfoOpeningString a InfoClosingString . Štandardne je to ľavá okrúhla zátvorka: ( . Declaration public string InfoOpeningString { get; set; } Property Value Type Description System.String Remarks Pri nastavení hodnoty sú v nej nahradené znaky, ktoré nie sú platné pre názov súboru/zložky ( ReplaceInvalidPathChars(String) ). MaxPathLength Maximálna dĺžka cesty. Je určená na interné použitie. Declaration protected int MaxPathLength { get; set; } Property Value Type Description System.Int32 Methods FileExists(String) Vráti, či existuje zadaný súbor. Metóda je určená na interné použitie. Declaration public virtual bool FileExists(string filePath) Parameters Type Name Description System.String filePath Cesta k súboru. Returns Type Description System.Boolean true , ak súbor existuje, false ak neexistuje. FolderExists(String) Vráti, či existuje zadaná zložka. Metóda je určená na interné použitie. Declaration public virtual bool FolderExists(string folderPath) Parameters Type Name Description System.String folderPath Cesta k zložke. Returns Type Description System.Boolean true , ak zložka existuje, false ak neexistuje. FormatDateForPath(DateTime) Naformátuje dátum do podoby, ako bude použitý v názve súboru/zložky. Declaration protected virtual string FormatDateForPath(DateTime value) Parameters Type Name Description System.DateTime value Formátovaný dátum. Returns Type Description System.String Remarks Minimálna ( System.DateTime.MinValue ) a maximálna ( System.DateTime.MaxValue ) hodnota dátumu sa neformátuje a je vrátený prázdny reťazec. FormatNewPath(String, String) Spojí zadanú zložku folder a názov súboru fileName do cieľovej cesty. Vrátená je cesta k takému súboru, ktorý ešte na disku neexistuje. Declaration public string FormatNewPath(string folder, string fileName) Parameters Type Name Description System.String folder Zložka. System.String fileName Názov súboru. Returns Type Description System.String Remarks V prípade existencie súboru je k názvu pridané také číslo ( (1)... ), aby zadaný súbor neexistoval. Ak je výsledná cesta príliš dlhá, názov súboru je skrátený aby cesta bola platná. Skráti sa pôvodný názov súboru, v prípade, že bolo k názvu dodané číslo, toto je zachované. FormatNewPath(String, String, String) Spojí zadanú zložku folder a názov súboru fileName do cieľovej cesty, pričom k názvu súboru pridá zadanú informáciu info . Vrátená je cesta k takému súboru, ktorý ešte na disku neexistuje. Declaration public string FormatNewPath(string folder, string fileName, string info) Parameters Type Name Description System.String folder Zložka. System.String fileName Názov súboru. System.String info Informácia, ktorá je pridaná k názvu súboru. Returns Type Description System.String Remarks Informácia info je pridaná k názvu súboru do zátvoriek. Teda ak fileName je exported.xml a info je Lorem Ipsum , výsledný názov súboru bude exported (Lorem Ipsum).xml . V prípade existencie súboru je k názvu pridané také číslo ( (1)... ), aby zadaný súbor neexistoval. Ak je výsledná cesta príliš dlhá, názov súboru je skrátený tak, aby bola platná. Pričom je skrátený pôvodný názov súboru, teda dodatočná informácia info a prípadné pridané číslo ostanú zachované. FormatPath(String, String) Spojí zadanú zložku folder a názov súboru fileName do cieľovej cesty. Nekontroluje, či taký súbor existuje. Declaration public string FormatPath(string folder, string fileName) Parameters Type Name Description System.String folder Zložka. System.String fileName Názov súboru. Returns Type Description System.String Remarks Ak je výsledná cesta príliš dlhá, názov súboru je skrátený tak, aby bola platná. FormatPath(String, String, String) Spojí zadanú zložku folder a názov súboru fileName do cieľovej cesty, pričom k názvu súboru pridá zadanú informáciu info . Nekontroluje, či taký súbor existuje. Declaration public string FormatPath(string folder, string fileName, string info) Parameters Type Name Description System.String folder Zložka. System.String fileName Názov súboru. System.String info Informácia, ktorá je pridaná k názvu súboru. Returns Type Description System.String Remarks Informácia info je pridaná k názvu súboru do zátvoriek. Teda ak fileName je exported.xml a info je Lorem Ipsum , výsledný názov súboru bude exported (Lorem Ipsum).xml . Ak je výsledná cesta príliš dlhá, názov súboru je skrátený tak, aby bola platná. Pričom je skrátený pôvodný názov súboru, teda dodatočná informácia info ostane zachovaná. FormatPaths<TKey>(String, String, Dictionary<TKey, String>) Vráti zoznam ciest k súborom. Cesty sú vytvorené na základe zadanej zložky baseFolder , základného mena súboru baseFileName a informácií pre jednotlivé súbory fileInfos . Declaration public Dictionary<TKey, string> FormatPaths<TKey>(string baseFolder, string baseFileName, Dictionary<TKey, string> fileInfos) Parameters Type Name Description System.String baseFolder Základná zložka pre cesty k súborom. System.String baseFileName Základný názov súboru. System.Collections.Generic.Dictionary <TKey, System.String > fileInfos Informácie, podľa ktorých sa vytvárajú cesty jednotlivým výstupným súborom. Returns Type Description System.Collections.Generic.Dictionary <TKey, System.String > Slovník s rovnakými kľúčmi ako sú v fileInfos , kde pre každý kľúč je vytvorená cesta k výstupnému súboru. Type Parameters Name Description TKey Typ kľúča vo vstupnom slovníku fileInfos . Rovnaké kľúče sú vo vrátenom zozname ciest k súborom. Remarks Vo výstupnom slovníku je vytvorená cesta pre každú hodnodu z vstupného fileInfos , pričom kľúče sú rovnaké. Zložka v ktorej budú súbory má základ baseFolder . Názvy súborov sú vytvorené spôsobom ako to robí metóda FormatPath(String, String) s parametrom info , teda k základnému názvu baseFileName je pridaná informácia zo zoznamu fileInfos . Výsledná cesty sú skrátené tak, aby nepresiahli maximálnu dĺžky cesty pre súborový systém. Ak je nejaká cesta príliš dlhá, sú všetky skrátené rovnakým spôsobom tak, aby najdlahšia z nich bola platná. Skrátený je základný názov súboru o príslušný počet znakov. Preto v tomto prípade je skrátený aj názov podzložky aj základný názov pre súbory v nej. Dodatočné informácie pre jednotlivé súbory fileInfos nie sú orezávané. Examples Ak napríklad baseFolder je C:\\lorem\\ipsum , baseFileName je filename.xml a hodnoty v fileInfos sú: kľúč informácia k súboru 1 some info 1 2 some info 2 3 some info 3 Výsledný zoznam vytvorených ciest bude: kľúč cesta 1 C:\\lorem\\ipsum\\filename (some info 1).xml 2 C:\\lorem\\ipsum\\filename (some info 2).xml 3 C:\\lorem\\ipsum\\filename (some info 3).xml FormatPathsInSubfolder<TKey>(String, String, Dictionary<TKey, String>) Vráti zoznam ciest k súborom. Cesty sú vytvorené na základe zadanej zložky baseFolder , základného mena súboru baseFileName a informácií pre jednotlivé súbory fileInfos . Declaration public Dictionary<TKey, string> FormatPathsInSubfolder<TKey>(string baseFolder, string baseFileName, Dictionary<TKey, string> fileInfos) Parameters Type Name Description System.String baseFolder Základná zložka pre cesty k súborom. K nej sa pridá pod zložka s rovnakým názovm, ako je základné meno súboru baseFileName . System.String baseFileName Základný názov súboru. Podľa neho sa vytvorí vo výslednej ceste podzložka a zároveň je to základ pre názvy výstupných súborov. System.Collections.Generic.Dictionary <TKey, System.String > fileInfos Informácie, podľa ktorých sa vytvárajú cesty jednotlivým výstupným súborom. Returns Type Description System.Collections.Generic.Dictionary <TKey, System.String > Slovník s rovnakými kľúčmi ako sú v fileInfos , kde pre každý kľúč je vytvorená cesta k výstupnému súboru. Type Parameters Name Description TKey Typ kľúča vo vstupnom slovníku fileInfos . Rovnaké kľúče sú vo vrátenom zozname ciest k súborom. Remarks Vo výstupnom slovníku je vytvorená cesta pre každú hodnodu z vstupného fileInfos , pričom kľúče sú rovnaké. Zložka v ktorej budú súbory má základ baseFolder , ku ktorému je pridaná podzložka vytvorená z názvu súboru baseFileName . Vždy sa vytvorí taká cesta, ktorá ešte neexistuje na disku. Ak zadaná zložka už existuje, je k nej ešte pridané číslo ( (1) ...). Názvy súborov sú vytvorené spôsobom ako to robí metóda FormatPath(String, String) s parametrom info , teda k základnému názvu baseFileName je pridaná informácia zo zoznamu fileInfos . Výsledná cesty sú skrátené tak, aby nepresiahli maximálnu dĺžky cesty pre súborový systém. Ak je nejaká cesta príliš dlhá, sú všetky skrátené rovnakým spôsobom tak, aby najdlahšia z nich bola platná. Skrátený je základný názov súboru o príslušný počet znakov. Preto v tomto prípade je skrátený aj názov podzložky aj základný názov pre súbory v nej. Dodatočné informácie pre jednotlivé súbory fileInfos nie sú orezávané. Examples Ak napríklad baseFolder je C:\\lorem\\ipsum , baseFileName je filename.xml a hodnoty v fileInfos sú: kľúč informácia k súboru 1 some info 1 2 some info 2 3 some info 3 Výsledný zoznam vytvorených ciest bude: kľúč cesta 1 C:\\lorem\\ipsum\\filename\\filename (some info 1).xml 2 C:\\lorem\\ipsum\\filename\\filename (some info 2).xml 3 C:\\lorem\\ipsum\\filename\\filename (some info 3).xml FormatPathsInSubfolder<TKey>(String, String, String, Dictionary<TKey, String>) Vráti zoznam ciest k súborom. Cesty sú vytvorené na základe zadanej zložky baseFolder , základného mena súboru baseFileName a informácií pre jednotlivé súbory fileInfos . Declaration public Dictionary<TKey, string> FormatPathsInSubfolder<TKey>(string baseFolder, string baseFileName, string subfolderInfo, Dictionary<TKey, string> fileInfos) Parameters Type Name Description System.String baseFolder Základná zložka pre cesty k súborom. K nej sa pridá pod zložka s rovnakým názovm, ako je základné meno súboru baseFileName . System.String baseFileName Základný názov súboru. Podľa neho sa vytvorí vo výslednej ceste podzložka a zároveň je to základ pre názvy výstupných súborov. System.String subfolderInfo Informácia, pridaná k názvu podzložky, System.Collections.Generic.Dictionary <TKey, System.String > fileInfos Informácie, podľa ktorých sa vytvárajú cesty jednotlivým výstupným súborom. Returns Type Description System.Collections.Generic.Dictionary <TKey, System.String > Slovník s rovnakými kľúčmi ako sú v fileInfos , kde pre každý kľúč je vytvorená cesta k výstupnému súboru. Type Parameters Name Description TKey Typ kľúča vo vstupnom slovníku fileInfos . Rovnaké kľúče sú vo vrátenom zozname ciest k súborom. Remarks Vo výstupnom slovníku je vytvorená cesta pre každú hodnodu z vstupného fileInfos , pričom kľúče sú rovnaké. Zložka v ktorej budú súbory má základ baseFolder , ku ktorému je pridaná podzložka vytvorená z názvu súboru baseFileName ku ktorému je pridaná informácia subfolderInfo . Vždy sa vytvorí taká cesta, ktorá ešte neexistuje na disku. Ak zadaná zložka už existuje, je k nej ešte pridané číslo ( (1) ...). Názvy súborov sú vytvorené spôsobom ako to robí metóda FormatPath(String, String) s parametrom info , teda k základnému názvu baseFileName je pridaná informácia zo zoznamu fileInfos . Výsledná cesty sú skrátené tak, aby nepresiahli maximálnu dĺžky cesty pre súborový systém. Ak je nejaká cesta príliš dlhá, sú všetky skrátené rovnakým spôsobom tak, aby najdlahšia z nich bola platná. Skrátený je základný názov súboru o príslušný počet znakov. Preto v tomto prípade je skrátený aj názov podzložky aj základný názov pre súbory v nej. Dodatočné informácie pre zložku subfolderInfo a pre jednotlivé súbory fileInfos nie sú orezávané. Examples Ak napríklad baseFolder je C:\\lorem\\ipsum , baseFileName je filename.xml a hodnoty v fileInfos sú: kľúč informácia k súboru 1 some info 1 2 some info 2 3 some info 3 Výsledný zoznam vytvorených ciest bude: kľúč cesta 1 C:\\lorem\\ipsum\\filename\\filename (some info 1).xml 2 C:\\lorem\\ipsum\\filename\\filename (some info 2).xml 3 C:\\lorem\\ipsum\\filename\\filename (some info 3).xml FormatSeasonForPath(DateTime, DateTime) Naformátuje obdobie from - to do podoby, ako bude použité v názve súboru/zložky. Declaration public virtual string FormatSeasonForPath(DateTime from, DateTime to) Parameters Type Name Description System.DateTime from Začiatok obdobia. System.DateTime to Koniec obdobia. Returns Type Description System.String Remarks Ak hodnota niektorého parametra je minimálny alebo maximálny dátum, parameter sa nepoužije. Na samotné formátovanie dátumu sa použije metóda FormatDateForPath(DateTime) ."
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.UsersSchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.UsersSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.UsersSchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.UsersSchemaNames Inheritance System.Object SqlServerSchemaLoader.UsersSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class UsersSchemaNames Fields CreateDate Declaration public const string CreateDate = \"CREATEDATE\" Field Value Type Description System.String Name Declaration public const string Name = \"NAME\" Field Value Type Description System.String Uid Declaration public const string Uid = \"UID\" Field Value Type Description System.String UpdateDate Declaration public const string UpdateDate = \"UPDATEDATE\" Field Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Extensions.StringExtensions.html": {
    "href": "api/Kros.Utils/Kros.Extensions.StringExtensions.html",
    "title": "Class StringExtensions | Kros.Libs",
    "keywords": "Class StringExtensions Všeobecné rozšírenia pre reťazec ( System.String ). Inheritance System.Object StringExtensions Namespace : Kros.Extensions Assembly : Kros.Utils.dll Syntax public static class StringExtensions Methods IsNullOrEmpty(String) Vráti, či zadaný reťazec value je null , alebo prázdny reťazec string.Empty . Declaration public static bool IsNullOrEmpty(this string value) Parameters Type Name Description System.String value Testovaný reťazec. Returns Type Description System.Boolean true , ak testovaný reťazec je null , alebo string.Empty . IsNullOrWhiteSpace(String) Vráti, či zadaný reťazec value je null , alebo prázdny reťazec string.Empty , alebo pozostáva iba z bielych znakov. Declaration public static bool IsNullOrWhiteSpace(this string value) Parameters Type Name Description System.String value Testovaný reťazec. Returns Type Description System.Boolean true , ak testovaný reťazec je null , alebo string.Empty , alebo pozostáva iba z bielych znakov. Left(String, Int32) Vráti prvých length znakov zo vstupného reťazca value . Declaration public static string Left(this string value, int length) Parameters Type Name Description System.String value Vstupný reťazec. System.Int32 length Dĺžka reťazca. Returns Type Description System.String Reťazec. RemoveDiacritics(String) Odstráni diakritiku z reťazca. Declaration public static string RemoveDiacritics(this string value) Parameters Type Name Description System.String value Returns Type Description System.String RemoveNewLines(String) Removes new lines from string. Removed are line feed ( \\n ) and carriage return ( \\r ) characters. Declaration public static string RemoveNewLines(this string value) Parameters Type Name Description System.String value Value. Returns Type Description System.String String without new lines. Right(String, Int32) Vráti posledných length znakov zo vstupného reťazca value . Declaration public static string Right(this string value, int length) Parameters Type Name Description System.String value Vstupný reťazec. System.Int32 length Dĺžka reťazca. Returns Type Description System.String Reťazec."
  },
  "api/Kros.Utils/Kros.Extensions.DateTimeExtensions.html": {
    "href": "api/Kros.Utils/Kros.Extensions.DateTimeExtensions.html",
    "title": "Class DateTimeExtensions | Kros.Libs",
    "keywords": "Class DateTimeExtensions Rozšírenia pre dátum a čas System.DateTime . Inheritance System.Object DateTimeExtensions Namespace : Kros.Extensions Assembly : Kros.Utils.dll Syntax public static class DateTimeExtensions Methods FirstDayOfCurrentMonth() Vráti dátum, ktorý predstavuje prvý deň v aktuálnom mesiaci. Declaration public static DateTime FirstDayOfCurrentMonth() Returns Type Description System.DateTime Dátum. FirstDayOfMonth(DateTime) Vráti dátum, ktorý predstavuje prvý deň v mesiaci a roku vstupného dátumu value . Časová zložka je vynulovaná. Declaration public static DateTime FirstDayOfMonth(this DateTime value) Parameters Type Name Description System.DateTime value Dátum, ku ktorému je vrátený prvý deň v mesiaci. Returns Type Description System.DateTime Dátum. LastDayOfCurrentMonth() Vráti dátum, ktorý predstavuje posledný deň v aktuálnom mesiaci. Declaration public static DateTime LastDayOfCurrentMonth() Returns Type Description System.DateTime Dátum. LastDayOfMonth(DateTime) Vráti dátum, ktorý predstavuje posledný deň v mesiaci a roku vstupného dátumu value . Časová zložka je vynulovaná. Declaration public static DateTime LastDayOfMonth(this DateTime value) Parameters Type Name Description System.DateTime value Dátum, ku ktorému je vrátený posledný deň v mesiaci. Returns Type Description System.DateTime Dátum."
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.TablesSchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.TablesSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.TablesSchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.TablesSchemaNames Inheritance System.Object SqlServerSchemaLoader.TablesSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class TablesSchemaNames Fields TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String TableType Declaration public const string TableType = \"TABLE_TYPE\" Field Value Type Description System.String"
  },
  "api/Kros.KORM/Kros.KORM.Helper.MethodName-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.Helper.MethodName-1.html",
    "title": "Class MethodName<T> | Kros.Libs",
    "keywords": "Class MethodName<T> Helper for getting method name. Inheritance System.Object MethodName<T> Namespace : Kros.KORM.Helper Assembly : Kros.KORM.dll Syntax public static class MethodName<T> Type Parameters Name Description T Type of class or interface, which method we want. Methods GetName(Expression<Action<T>>) Gets the name of method. Declaration public static string GetName(Expression<Action<T>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Action <T>> expression The expression. Returns Type Description System.String Method name."
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ColumnSetColumnsSchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ColumnSetColumnsSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.ColumnSetColumnsSchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.ColumnSetColumnsSchemaNames Inheritance System.Object SqlServerSchemaLoader.ColumnSetColumnsSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class ColumnSetColumnsSchemaNames Fields CollationCatalog Declaration public const string CollationCatalog = \"COLLATION_CATALOG\" Field Value Type Description System.String ColumnDefault Declaration public const string ColumnDefault = \"COLUMN_DEFAULT\" Field Value Type Description System.String ColumnName Declaration public const string ColumnName = \"COLUMN_NAME\" Field Value Type Description System.String DataType Declaration public const string DataType = \"DATA_TYPE\" Field Value Type Description System.String DatetimePrecision Declaration public const string DatetimePrecision = \"DATETIME_PRECISION\" Field Value Type Description System.String CharacterMaximumLength Declaration public const string CharacterMaximumLength = \"CHARACTER_MAXIMUM_LENGTH\" Field Value Type Description System.String CharacterOctetLength Declaration public const string CharacterOctetLength = \"CHARACTER_OCTET_LENGTH\" Field Value Type Description System.String CharacterSetCataloG Declaration public const string CharacterSetCataloG = \"CHARACTER_SET_CATALOG\" Field Value Type Description System.String CharacterSetName Declaration public const string CharacterSetName = \"CHARACTER_SET_NAME\" Field Value Type Description System.String CharacterSetSchema Declaration public const string CharacterSetSchema = \"CHARACTER_SET_SCHEMA\" Field Value Type Description System.String IsColumnSet Declaration public const string IsColumnSet = \"IS_COLUMN_SET\" Field Value Type Description System.String IsFilestream Declaration public const string IsFilestream = \"IS_FILESTREAM\" Field Value Type Description System.String IsNullable Declaration public const string IsNullable = \"IS_NULLABLE\" Field Value Type Description System.String IsSparse Declaration public const string IsSparse = \"IS_SPARSE\" Field Value Type Description System.String NumericPrecision Declaration public const string NumericPrecision = \"NUMERIC_PRECISION\" Field Value Type Description System.String NumericPrecisionRadix Declaration public const string NumericPrecisionRadix = \"NUMERIC_PRECISION_RADIX\" Field Value Type Description System.String NumericScale Declaration public const string NumericScale = \"NUMERIC_SCALE\" Field Value Type Description System.String OrdinalPosition Declaration public const string OrdinalPosition = \"ORDINAL_POSITION\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Data.Schema.ForeignKeySchema.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.ForeignKeySchema.html",
    "title": "Class ForeignKeySchema | Kros.Libs",
    "keywords": "Class ForeignKeySchema Schéma cudzieho kľúča tabuľky. Inheritance System.Object ForeignKeySchema Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class ForeignKeySchema Constructors ForeignKeySchema(String, String, IEnumerable<String>, String, IEnumerable<String>) Vytvorí novú definíciu cudzieho kľúča s menom name . Cudzí kľúč je nad stĺpcami foreignKeyTableColumns tabuľky foreignKeyTableName a odkazuje sa na stĺpce primaryKeyTableColumns tabuľky primaryKeyTableName . Declaration public ForeignKeySchema(string name, string primaryKeyTableName, IEnumerable<string> primaryKeyTableColumns, string foreignKeyTableName, IEnumerable<string> foreignKeyTableColumns) Parameters Type Name Description System.String name Meno cudzieho kľúča. System.String primaryKeyTableName Meno tabuľky s primárnym kľúčom. System.Collections.Generic.IEnumerable < System.String > primaryKeyTableColumns Zoznam odkazovaných stĺpcov v tabuľke s primárnym kľúčom. System.String foreignKeyTableName Meno tabuľky s cudzím kľúčom. System.Collections.Generic.IEnumerable < System.String > foreignKeyTableColumns Zoznam stĺpcov v tabuľke cudzieho kľúča. Exceptions Type Condition System.ArgumentNullException Hodnota ľubovoľného parametra je null . System.ArgumentException ForeignKeySchema(String, String, String, String, String) Vytvorí novú definíciu cudzieho kľúča s menom name . Cudzí kľúč je nad stĺpcom foreignKeyTableColumn tabuľky foreignKeyTableName a odkazuje sa na stĺpec primaryKeyTableColumn tabuľky primaryKeyTableName . Declaration public ForeignKeySchema(string name, string primaryKeyTableName, string primaryKeyTableColumn, string foreignKeyTableName, string foreignKeyTableColumn) Parameters Type Name Description System.String name Meno cudzieho kľúča. System.String primaryKeyTableName Meno tabuľky s primárnym kľúčom. System.String primaryKeyTableColumn Meno odkazovaného stĺpca v tabuľke s primárnym kľúčom. System.String foreignKeyTableName Meno tabuľky s cudzím kľúčom. System.String foreignKeyTableColumn Meno stĺpca v tabuľke cudzieho kľúča. Exceptions Type Condition System.ArgumentNullException Hodnota ľubovoľného parametra je null . System.ArgumentException Hodnota ľubovoľného parametra je prázdny reťazec, alebo reťazec bielych znakov. Properties DeleteRule Pravidlo ako sa správať, ak je v hlavnej tabuľke vymazaný príslušný záznam. Declaration public ForeignKeyRule DeleteRule { get; set; } Property Value Type Description ForeignKeyRule ForeignKeyTableColumns Zoznam stĺpcov cudzieho kľúča v tabuľke, kde je definovaný. Declaration public ReadOnlyCollection<string> ForeignKeyTableColumns { get; } Property Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < System.String > ForeignKeyTableName Meno tabuľky, v ktorej je definovaný cudzí kľúč. Declaration public string ForeignKeyTableName { get; } Property Value Type Description System.String Name Meno cudzieho kľúča. Declaration public string Name { get; } Property Value Type Description System.String PrimaryKeyTableColumns Zoznam stĺpcov tabuľky z ktorej je primárny kľúč. Declaration public ReadOnlyCollection<string> PrimaryKeyTableColumns { get; } Property Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < System.String > PrimaryKeyTableName Meno tabuľky z ktorej je primárny kľúč. Declaration public string PrimaryKeyTableName { get; } Property Value Type Description System.String Table Tabuľka, ktorej cudzí kľúč patrí. Declaration public TableSchema Table { get; } Property Value Type Description TableSchema UpdateRule Pravidlo ako sa správať, ak je v hlavnej tabuľke aktualizovaný príslušný záznam. Declaration public ForeignKeyRule UpdateRule { get; set; } Property Value Type Description ForeignKeyRule Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.ColumnsSchemaNames.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.ColumnsSchemaNames.html",
    "title": "Class MsAccessSchemaLoader.ColumnsSchemaNames | Kros.Libs",
    "keywords": "Class MsAccessSchemaLoader.ColumnsSchemaNames Inheritance System.Object MsAccessSchemaLoader.ColumnsSchemaNames Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class ColumnsSchemaNames Fields CollationCatalog Declaration public const string CollationCatalog = \"COLLATION_CATALOG\" Field Value Type Description System.String CollationName Declaration public const string CollationName = \"COLLATION_NAME\" Field Value Type Description System.String CollationSchema Declaration public const string CollationSchema = \"COLLATION_SCHEMA\" Field Value Type Description System.String ColumnDefault Declaration public const string ColumnDefault = \"COLUMN_DEFAULT\" Field Value Type Description System.String ColumnFlags Declaration public const string ColumnFlags = \"COLUMN_FLAGS\" Field Value Type Description System.String ColumnGuid Declaration public const string ColumnGuid = \"COLUMN_GUID\" Field Value Type Description System.String ColumnHasdefault Declaration public const string ColumnHasdefault = \"COLUMN_HASDEFAULT\" Field Value Type Description System.String ColumnName Declaration public const string ColumnName = \"COLUMN_NAME\" Field Value Type Description System.String ColumnPropid Declaration public const string ColumnPropid = \"COLUMN_PROPID\" Field Value Type Description System.String DataType Declaration public const string DataType = \"DATA_TYPE\" Field Value Type Description System.String DatetimePrecision Declaration public const string DatetimePrecision = \"DATETIME_PRECISION\" Field Value Type Description System.String Description Declaration public const string Description = \"DESCRIPTION\" Field Value Type Description System.String DomainCatalog Declaration public const string DomainCatalog = \"DOMAIN_CATALOG\" Field Value Type Description System.String DomainName Declaration public const string DomainName = \"DOMAIN_NAME\" Field Value Type Description System.String DomainSchema Declaration public const string DomainSchema = \"DOMAIN_SCHEMA\" Field Value Type Description System.String CharacterMaximumLength Declaration public const string CharacterMaximumLength = \"CHARACTER_MAXIMUM_LENGTH\" Field Value Type Description System.String CharacterOctetLength Declaration public const string CharacterOctetLength = \"CHARACTER_OCTET_LENGTH\" Field Value Type Description System.String CharacterSet_catalog Declaration public const string CharacterSet_catalog = \"CHARACTER_SET_CATALOG\" Field Value Type Description System.String CharacterSet_name Declaration public const string CharacterSet_name = \"CHARACTER_SET_NAME\" Field Value Type Description System.String CharacterSet_schema Declaration public const string CharacterSet_schema = \"CHARACTER_SET_SCHEMA\" Field Value Type Description System.String IsNullable Declaration public const string IsNullable = \"IS_NULLABLE\" Field Value Type Description System.String NumericPrecision Declaration public const string NumericPrecision = \"NUMERIC_PRECISION\" Field Value Type Description System.String NumericScale Declaration public const string NumericScale = \"NUMERIC_SCALE\" Field Value Type Description System.String OrdinalPosition Declaration public const string OrdinalPosition = \"ORDINAL_POSITION\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String TypeGuid Declaration public const string TypeGuid = \"TYPE_GUID\" Field Value Type Description System.String"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.TablesSchemaNames.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.TablesSchemaNames.html",
    "title": "Class MsAccessSchemaLoader.TablesSchemaNames | Kros.Libs",
    "keywords": "Class MsAccessSchemaLoader.TablesSchemaNames Inheritance System.Object MsAccessSchemaLoader.TablesSchemaNames Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class TablesSchemaNames Fields DateCreated Declaration public const string DateCreated = \"DATE_CREATED\" Field Value Type Description System.String DateModified Declaration public const string DateModified = \"DATE_MODIFIED\" Field Value Type Description System.String Description Declaration public const string Description = \"DESCRIPTION\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableGuid Declaration public const string TableGuid = \"TABLE_GUID\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TablePropid Declaration public const string TablePropid = \"TABLE_PROPID\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String TableType Declaration public const string TableType = \"TABLE_TYPE\" Field Value Type Description System.String"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.SchemaNames.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.SchemaNames.html",
    "title": "Class MsAccessSchemaLoader.SchemaNames | Kros.Libs",
    "keywords": "Class MsAccessSchemaLoader.SchemaNames Inheritance System.Object MsAccessSchemaLoader.SchemaNames Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class SchemaNames Fields Columns Declaration public const string Columns = \"Columns\" Field Value Type Description System.String DataSourceInformation Declaration public const string DataSourceInformation = \"DataSourceInformation\" Field Value Type Description System.String DataTypes Declaration public const string DataTypes = \"DataTypes\" Field Value Type Description System.String Indexes Declaration public const string Indexes = \"Indexes\" Field Value Type Description System.String MetaDataCollections Declaration public const string MetaDataCollections = \"MetaDataCollections\" Field Value Type Description System.String Procedures Declaration public const string Procedures = \"Procedures\" Field Value Type Description System.String ReservedWords Declaration public const string ReservedWords = \"ReservedWords\" Field Value Type Description System.String Restrictions Declaration public const string Restrictions = \"Restrictions\" Field Value Type Description System.String Tables Declaration public const string Tables = \"Tables\" Field Value Type Description System.String Views Declaration public const string Views = \"Views\" Field Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.SchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.SchemaNames.html",
    "title": "Class SqlServerSchemaLoader.SchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.SchemaNames Inheritance System.Object SqlServerSchemaLoader.SchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class SchemaNames Fields AllColumns Declaration public const string AllColumns = \"AllColumns\" Field Value Type Description System.String Columns Declaration public const string Columns = \"Columns\" Field Value Type Description System.String ColumnSetColumns Declaration public const string ColumnSetColumns = \"ColumnSetColumns\" Field Value Type Description System.String Databases Declaration public const string Databases = \"Databases\" Field Value Type Description System.String DataSourceInformation Declaration public const string DataSourceInformation = \"DataSourceInformation\" Field Value Type Description System.String DataTypes Declaration public const string DataTypes = \"DataTypes\" Field Value Type Description System.String ForeignKeys Declaration public const string ForeignKeys = \"ForeignKeys\" Field Value Type Description System.String IndexColumns Declaration public const string IndexColumns = \"IndexColumns\" Field Value Type Description System.String Indexes Declaration public const string Indexes = \"Indexes\" Field Value Type Description System.String MetaDataCollections Declaration public const string MetaDataCollections = \"MetaDataCollections\" Field Value Type Description System.String ProcedureParameters Declaration public const string ProcedureParameters = \"ProcedureParameters\" Field Value Type Description System.String Procedures Declaration public const string Procedures = \"Procedures\" Field Value Type Description System.String ReservedWords Declaration public const string ReservedWords = \"ReservedWords\" Field Value Type Description System.String Restrictions Declaration public const string Restrictions = \"Restrictions\" Field Value Type Description System.String StructuredTypeMembers Declaration public const string StructuredTypeMembers = \"StructuredTypeMembers\" Field Value Type Description System.String Tables Declaration public const string Tables = \"Tables\" Field Value Type Description System.String UserDefinedTypes Declaration public const string UserDefinedTypes = \"UserDefinedTypes\" Field Value Type Description System.String Users Declaration public const string Users = \"Users\" Field Value Type Description System.String ViewColumns Declaration public const string ViewColumns = \"ViewColumns\" Field Value Type Description System.String Views Declaration public const string Views = \"Views\" Field Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Data.Schema.IndexColumnSchema.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.IndexColumnSchema.html",
    "title": "Class IndexColumnSchema | Kros.Libs",
    "keywords": "Class IndexColumnSchema Schéma stĺpca v indexe tabuľky. Inheritance System.Object IndexColumnSchema Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class IndexColumnSchema Constructors IndexColumnSchema(String) Vytvorí inštanciu indexového stĺpca s menom name . Zoradenie stĺpca je Ascending . Declaration public IndexColumnSchema(string name) Parameters Type Name Description System.String name Meno stĺpca v indexe. Exceptions Type Condition System.ArgumentNullException Hodnota name je null . System.ArgumentException Hodnota name je prázdny reťazec, alebo reťazec bielych znakov. IndexColumnSchema(String, SortOrder) Vytvorí inštanciu indexového stĺpca s menom name a zoradením order . Declaration public IndexColumnSchema(string name, SortOrder order) Parameters Type Name Description System.String name Meno stĺpca v indexe. SortOrder order Zoradenie stĺpca v indexe. Exceptions Type Condition System.ArgumentNullException Hodnota name je null . System.ArgumentException Hodnota name je prázdny reťazec, alebo reťazec bielych znakov. Properties Index Index, ktorému stĺpec patrí. Declaration public IndexSchema Index { get; } Property Value Type Description IndexSchema Name Meno stĺpca v indexe. Declaration public string Name { get; } Property Value Type Description System.String Order Zoradenie stĺpca v indexe. Declaration public SortOrder Order { get; set; } Property Value Type Description SortOrder"
  },
  "api/Kros.KORM/Kros.KORM.Query.Sql.DefaultQuerySqlGenerator.Parameters.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Sql.DefaultQuerySqlGenerator.Parameters.html",
    "title": "Class DefaultQuerySqlGenerator.Parameters | Kros.Libs",
    "keywords": "Class DefaultQuerySqlGenerator.Parameters Class which help with Linq query parameters. Inheritance System.Object DefaultQuerySqlGenerator.Parameters Namespace : Kros.KORM.Query.Sql Assembly : Kros.KORM.dll Syntax protected class Parameters Methods AddParameter(Object) Adds the parameter. Declaration public void AddParameter(object param) Parameters Type Name Description System.Object param The parameter. Clear() Clears this instance. Declaration public void Clear() GetNextParamName() Gets the name of the next parameter. Declaration public string GetNextParamName() Returns Type Description System.String GetParams() Gets the parameters. Declaration public object[] GetParams() Returns Type Description System.Object []"
  },
  "api/Kros.Utils/Kros.Data.Schema.IDatabaseSchemaCache.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.IDatabaseSchemaCache.html",
    "title": "Interface IDatabaseSchemaCache | Kros.Libs",
    "keywords": "Interface IDatabaseSchemaCache Rozhranie pre triedy načítavajúce a kešujúce schému databázy. Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public interface IDatabaseSchemaCache Methods ClearAllSchemas() Vyčistí celú keš - vymaže všetky načítané schémy. Declaration void ClearAllSchemas() ClearSchema(Object) Zruší z keše schému databázy načítanú pre spojenie connection . Declaration void ClearSchema(object connection) Parameters Type Name Description System.Object connection Spojenie na databázu. GetSchema(Object) Vráti schému databázy pre spojenie connection . Declaration DatabaseSchema GetSchema(object connection) Parameters Type Name Description System.Object connection Spojenie na databázu. Returns Type Description DatabaseSchema Schéma danej databázy. RefreshSchema(Object) Načíta schému databázy pre spojenie connection . Schéma je načítaná priamo z databázy aj v prípade, že už je uložená v keši. Declaration DatabaseSchema RefreshSchema(object connection) Parameters Type Name Description System.Object connection Spojenie na databázu. Returns Type Description DatabaseSchema Schéma danej databázy."
  },
  "api/Kros.Utils/Kros.IO.html": {
    "href": "api/Kros.Utils/Kros.IO.html",
    "title": "Namespace Kros.IO | Kros.Libs",
    "keywords": "Namespace Kros.IO Classes PathFormatter Trieda na formátovanie ciest k súborom. Stará sa o to, aby celková cesta nepresiahla maximálnu povolenú dĺžku a aj o to, aby bola vygenerovaná cesta k súboru, ktorý ešte neexistuje. PathHelper Pomocná trieda na prácu s cestami k súborom/zložkám."
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ForeignKeysSchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ForeignKeysSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.ForeignKeysSchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.ForeignKeysSchemaNames Inheritance System.Object SqlServerSchemaLoader.ForeignKeysSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class ForeignKeysSchemaNames Fields ConstraintCatalog Declaration public const string ConstraintCatalog = \"CONSTRAINT_CATALOG\" Field Value Type Description System.String ConstraintName Declaration public const string ConstraintName = \"CONSTRAINT_NAME\" Field Value Type Description System.String ConstraintSchema Declaration public const string ConstraintSchema = \"CONSTRAINT_SCHEMA\" Field Value Type Description System.String ConstraintType Declaration public const string ConstraintType = \"CONSTRAINT_TYPE\" Field Value Type Description System.String InitiallyDeferred Declaration public const string InitiallyDeferred = \"INITIALLY_DEFERRED\" Field Value Type Description System.String IsDeferrable Declaration public const string IsDeferrable = \"IS_DEFERRABLE\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.DatabasesSchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.DatabasesSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.DatabasesSchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.DatabasesSchemaNames Inheritance System.Object SqlServerSchemaLoader.DatabasesSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class DatabasesSchemaNames Fields CreateDate Declaration public const string CreateDate = \"CREATE_DATE\" Field Value Type Description System.String DatabaseName Declaration public const string DatabaseName = \"DATABASE_NAME\" Field Value Type Description System.String DbId Declaration public const string DbId = \"DBID\" Field Value Type Description System.String"
  },
  "api/Kros.KORM/Kros.KORM.Query.Sql.DefaultQuerySqlGenerator.OrderBy.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Sql.DefaultQuerySqlGenerator.OrderBy.html",
    "title": "Class DefaultQuerySqlGenerator.OrderBy | Kros.Libs",
    "keywords": "Class DefaultQuerySqlGenerator.OrderBy Class which has information about order statement. Inheritance System.Object DefaultQuerySqlGenerator.OrderBy Namespace : Kros.KORM.Query.Sql Assembly : Kros.KORM.dll Syntax protected class OrderBy Properties ColumnaName Gets or sets the name of the columna. Declaration public string ColumnaName { get; set; } Property Value Type Description System.String Type Gets or sets the type. Declaration public DefaultQuerySqlGenerator.OrderType Type { get; set; } Property Value Type Description DefaultQuerySqlGenerator.OrderType"
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.UserDefinedTypesSchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.UserDefinedTypesSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.UserDefinedTypesSchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.UserDefinedTypesSchemaNames Inheritance System.Object SqlServerSchemaLoader.UserDefinedTypesSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class UserDefinedTypesSchemaNames Fields AssemblyName Declaration public const string AssemblyName = \"ASSEMBLY_NAME\" Field Value Type Description System.String CreateDate Declaration public const string CreateDate = \"CREATE_DATE\" Field Value Type Description System.String CultureInfo Declaration public const string CultureInfo = \"CULTURE_INFO\" Field Value Type Description System.String IsFixedLength Declaration public const string IsFixedLength = \"IS_FIXED_LENGTH\" Field Value Type Description System.String MaxLength Declaration public const string MaxLength = \"MAX_LENGTH\" Field Value Type Description System.String PermissionSetDesc Declaration public const string PermissionSetDesc = \"PERMISSION_SET_DESC\" Field Value Type Description System.String PublicKey Declaration public const string PublicKey = \"PUBLIC_KEY\" Field Value Type Description System.String UdtName Declaration public const string UdtName = \"UDT_NAME\" Field Value Type Description System.String VersionBuild Declaration public const string VersionBuild = \"VERSION_BUILD\" Field Value Type Description System.String VersionMajor Declaration public const string VersionMajor = \"VERSION_MAJOR\" Field Value Type Description System.String VersionMinor Declaration public const string VersionMinor = \"VERSION_MINOR\" Field Value Type Description System.String VersionRevision Declaration public const string VersionRevision = \"VERSION_REVISION\" Field Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Data.Schema.DefaultValueParsers.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.DefaultValueParsers.html",
    "title": "Class DefaultValueParsers | Kros.Libs",
    "keywords": "Class DefaultValueParsers Štandardné parsery pre predvolené hodnoty stĺpcov databáz. Predvolené hodnoty sú v databáze uložené ako reťazec a je potrebné ich konvertovať na typ daného stĺpca. Ak sa hodnotu nepodarilo skonvertovať na určený typ, vždy je vrátená hodnota null . Inheritance System.Object DefaultValueParsers Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public static class DefaultValueParsers Methods ParseBool(String) Declaration public static object ParseBool(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseByte(String) Declaration public static object ParseByte(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseDate(String) Declaration public static object ParseDate(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseDateSql(String) Declaration public static object ParseDateSql(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseDecimal(String) Declaration public static object ParseDecimal(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseDouble(String) Declaration public static object ParseDouble(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseGuid(String) Declaration public static object ParseGuid(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseInt16(String) Declaration public static object ParseInt16(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseInt32(String) Declaration public static object ParseInt32(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseInt64(String) Declaration public static object ParseInt64(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseSByte(String) Declaration public static object ParseSByte(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseSingle(String) Declaration public static object ParseSingle(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseUInt16(String) Declaration public static object ParseUInt16(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseUInt32(String) Declaration public static object ParseUInt32(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseUInt64(String) Declaration public static object ParseUInt64(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object"
  },
  "api/Kros.Utils/Kros.Data.DataExtensions.html": {
    "href": "api/Kros.Utils/Kros.Data.DataExtensions.html",
    "title": "Class DataExtensions | Kros.Libs",
    "keywords": "Class DataExtensions Rozne rozšírenia dátových tried. Inheritance System.Object DataExtensions Namespace : Kros.Data Assembly : Kros.Utils.dll Syntax public static class DataExtensions Methods IsOpened(IDbConnection) Vráti, či je spojenie na databázu otvorené. Declaration public static bool IsOpened(this IDbConnection cn) Parameters Type Name Description System.Data.IDbConnection cn Spojenie na databázu, ktoré sa testuje. Returns Type Description System.Boolean true , ak spojenie na databázu je otvorené, false ak nie je. SqlServerErrorCode(SqlException) Vráti chybový kód výnimky pre SQL Server. Declaration public static SqlServerErrorCode SqlServerErrorCode(this SqlException ex) Parameters Type Name Description System.Data.SqlClient.SqlException ex Výnimka, ktorej chybový kód sa kontroluje. Returns Type Description SqlServerErrorCode Vráti chybový kód ako hodnotu enumerátu SqlServerErrorCode(SqlException) . Ak chybový kód je neznámy, alebo nie je definovaný, je vrátená hodnota Unknown . Remarks Metóda pozerá hodnotu System.Data.SqlClient.SqlError.Number prvej chyby v zozname System.Data.SqlClient.SqlException.Errors ."
  },
  "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.MsAccessDataHelper.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.MsAccessDataHelper.html",
    "title": "Class MsAccessDataHelper | Kros.Libs",
    "keywords": "Class MsAccessDataHelper Všeobecné pomocné metódy pre praácu s MS Access. Inheritance System.Object MsAccessDataHelper Namespace : Kros.Data.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class MsAccessDataHelper Fields AceProviderBase Identifikácia MS Access ACE providera: Microsoft.ACE.OLEDB . Declaration public const string AceProviderBase = \"Microsoft.ACE.OLEDB\" Field Value Type Description System.String JetProviderBase Identifikácia MS Access JET providera: Microsoft.Jet.OLEDB . Declaration public const string JetProviderBase = \"Microsoft.Jet.OLEDB\" Field Value Type Description System.String Properties MsAccessAceProvider Vráti nainštalovaný ACE provider pre Microsoft Access (napríklad Microsoft.ACE.OLEDB.12.0 ). Ak ACE provider nie je nainštalovaný, vráti prázdny reťazec. Declaration public static string MsAccessAceProvider { get; } Property Value Type Description System.String MsAccessJetProvider Vráti nainštalovaný JET provider pre Microsoft Access (napríklad Microsoft.Jet.OLEDB.4.0 ). Ak JET provider nie je nainštalovaný, vráti prázdny reťazec. Declaration public static string MsAccessJetProvider { get; } Property Value Type Description System.String MsAccessProvider Vráti nainštalovaný provider pre Microsoft Access. Preferovaný je ACE provider pred JET providerom. Ak nie je nainštalovaný žiadny ACE, alebo JET provider, je vrátený prázdny reťazec. Declaration public static string MsAccessProvider { get; } Property Value Type Description System.String Methods CreateConnectionString(String, ProviderType) Vytvorí connection string k databáze databasePath s aktuálnym providerom typu provider . Declaration public static string CreateConnectionString(string databasePath, ProviderType provider) Parameters Type Name Description System.String databasePath Cesta k databáze. ProviderType provider Typ providera, ktorý sa má použiť. Konkrétny reťazec providera sa použije aktuálny, ktorý je v systéme, takže nie je potrebné starať sa o jeho verziu. Returns Type Description System.String Vráti connection string k zadanej databáze, napríklad Provider=Microsoft.ACE.OLEDB.12.0;Data Source=C:\\data\\database.accdb; . CreateEmptyDatabase(String, ProviderType) Vytvorí prázdnu MS Access databázu na umiestnení path . Typ databázy ( .accdb , .mdb ) je určený parametrom provider . Declaration public static void CreateEmptyDatabase(string path, ProviderType provider) Parameters Type Name Description System.String path Cesta, kde sa databáza vytvorí. Cesta je úplná, aj s názvom vytváraného súboru. ProviderType provider Typ databázy, ktorá sa vytovrí. Remarks Ak súbor path už existuje, bude prepísaný. Na základe hodnoty provider sa len vytvorí daný typ databázy, buď databáza typu .accdb , alebo staršieho typu .mdb . S príponou súboru sa však nič nerobí, tzn. databázový súbor sa bude volať tak, ako je zadané v path . Je tak možné vytvoriť databázový súbor s príponou .mdb , ktorý ale v skutočnosti bude databáza .accdb . Správna prípona je tak plne v kompetencii toho, kto metódu volá. GetProviderString(ProviderType) Pre zadaný typ MS Access providera provider vráti konkrétny reťazec predstavujúci tento provider pre použitie v connection string-u. Ak nie je dostupný žiadny provider, je vrátený prázdny reťazec. Declaration public static string GetProviderString(ProviderType provider) Parameters Type Name Description ProviderType provider Typ MS Access pridera. Returns Type Description System.String Vráti hodnoty vlastností: Ace MsAccessAceProvider Jet MsAccessJetProvider GetProviderType(IDbConnection) Vráti typ providera z connection . Declaration public static ProviderType GetProviderType(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection Testované spojenie. Returns Type Description ProviderType Typ providera. GetProviderType(String) Vráti typ providera z connectionString . Declaration public static ProviderType GetProviderType(string connectionString) Parameters Type Name Description System.String connectionString Testované spojenie. Returns Type Description ProviderType Typ providera. HasProvider(ProviderType) Vráti, či je dostupný zadaný MS Access provider. Declaration public static bool HasProvider(ProviderType provider) Parameters Type Name Description ProviderType provider Typ providera, ktorý sa kontroluje. Returns Type Description System.Boolean true ak zadaný provider je dostupný, false ak nie je. IsExclusiveMsAccessConnection(IDbConnection) Vráti, či zadané spojenie na databázu je exkluzívne. Declaration public static bool IsExclusiveMsAccessConnection(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection Spojenie na databázu. Returns Type Description System.Boolean Pre MS Access je spojenie na databázu exkluzívne, ak v connection string-u obsahuje aj Share Deny Read aj Share Deny Write . IsExclusiveMsAccessConnection(String) Vráti, či zadaný connectionString určuje exkluzívne spojenie na MS Access databázu. Declaration public static bool IsExclusiveMsAccessConnection(string connectionString) Parameters Type Name Description System.String connectionString Spojenie na databázu. Returns Type Description System.Boolean Spojenie na databázu je exkluzívne, ak v connection string-u obsahuje nastavenia Share Deny Read aj Share Deny Write . IsMsAccessAceProvider(String) Vráti, či v zadanom connectionString je použitý Ace provider. Declaration public static bool IsMsAccessAceProvider(string connectionString) Parameters Type Name Description System.String connectionString Connection string. Returns Type Description System.Boolean true , ak provider je Ace provider, false ak nie je. IsMsAccessConnection(IDbConnection) Určuje, či zadané spojenie je spojenie na Microsoft Access . Declaration public static bool IsMsAccessConnection(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection Testované spojenie. Returns Type Description System.Boolean true , ak spojenie je na Microsoft Access, false ak nie je. IsMsAccessConnection(String) Určuje, či zadané spojenie je spojenie na Microsoft Access . Declaration public static bool IsMsAccessConnection(string connectionString) Parameters Type Name Description System.String connectionString Testované spojenie. Returns Type Description System.Boolean true , ak spojenie je na Microsoft Access, false ak nie je. IsMsAccessJetProvider(String) Vráti, či v zadanom connectionString je použitý Jet provider. Declaration public static bool IsMsAccessJetProvider(string connectionString) Parameters Type Name Description System.String connectionString Connection string. Returns Type Description System.Boolean true , ak provider je Jet provider, false ak nie je."
  },
  "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.Extensions.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.Extensions.html",
    "title": "Class Extensions | Kros.Libs",
    "keywords": "Class Extensions Všeobecné rozšírenia pre MS Access. Inheritance System.Object Extensions Namespace : Kros.Data.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class Extensions Methods MsAccessErrorCode(OleDbException) Vráti chybový kód výnimky pre MsAccess. Declaration public static MsAccessErrorCode MsAccessErrorCode(this OleDbException ex) Parameters Type Name Description System.Data.OleDb.OleDbException ex Výnimka, ktorej chybový kód sa kontroluje. Returns Type Description MsAccessErrorCode MsAccessErrorCode(OleDbException, out String) Vráti chybový kód výnimky pre MsAccess. Declaration public static MsAccessErrorCode MsAccessErrorCode(this OleDbException ex, out string sqlState) Parameters Type Name Description System.Data.OleDb.OleDbException ex Výnimka, ktorej chybový kód sa kontroluje. System.String sqlState Skutočná hodnota vlastnosti System.Data.OleDb.OleDbError.SQLState . Returns Type Description MsAccessErrorCode Vráti chybový kód ako hodnotu enumerátu MsAccessErrorCode . Ak chybový kód je neznámy, alebo nie je definovaný, je vrátená hodnota Unknown . Remarks Metóda pozerá hodnotu System.Data.OleDb.OleDbError.SQLState prvej chyby v zozname System.Data.OleDb.OleDbException.Errors ."
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ColumnsSchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ColumnsSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.ColumnsSchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.ColumnsSchemaNames Inheritance System.Object SqlServerSchemaLoader.ColumnsSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class ColumnsSchemaNames Fields CollationCatalog Declaration public const string CollationCatalog = \"COLLATION_CATALOG\" Field Value Type Description System.String ColumnDefault Declaration public const string ColumnDefault = \"COLUMN_DEFAULT\" Field Value Type Description System.String ColumnName Declaration public const string ColumnName = \"COLUMN_NAME\" Field Value Type Description System.String DataType Declaration public const string DataType = \"DATA_TYPE\" Field Value Type Description System.String DatetimePrecision Declaration public const string DatetimePrecision = \"DATETIME_PRECISION\" Field Value Type Description System.String CharacterMaximumLength Declaration public const string CharacterMaximumLength = \"CHARACTER_MAXIMUM_LENGTH\" Field Value Type Description System.String CharacterOctetLength Declaration public const string CharacterOctetLength = \"CHARACTER_OCTET_LENGTH\" Field Value Type Description System.String CharacterSetCatalog Declaration public const string CharacterSetCatalog = \"CHARACTER_SET_CATALOG\" Field Value Type Description System.String CharacterSetName Declaration public const string CharacterSetName = \"CHARACTER_SET_NAME\" Field Value Type Description System.String CharacterSetSchema Declaration public const string CharacterSetSchema = \"CHARACTER_SET_SCHEMA\" Field Value Type Description System.String IsColumnSet Declaration public const string IsColumnSet = \"IS_COLUMN_SET\" Field Value Type Description System.String IsFilestream Declaration public const string IsFilestream = \"IS_FILESTREAM\" Field Value Type Description System.String IsNullable Declaration public const string IsNullable = \"IS_NULLABLE\" Field Value Type Description System.String IsSparse Declaration public const string IsSparse = \"IS_SPARSE\" Field Value Type Description System.String NumericPrecision Declaration public const string NumericPrecision = \"NUMERIC_PRECISION\" Field Value Type Description System.String NumericPrecision_radix Declaration public const string NumericPrecision_radix = \"NUMERIC_PRECISION_RADIX\" Field Value Type Description System.String NumericScale Declaration public const string NumericScale = \"NUMERIC_SCALE\" Field Value Type Description System.String OrdinalPosition Declaration public const string OrdinalPosition = \"ORDINAL_POSITION\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String"
  },
  "api/Kros.KORM/Kros.KORM.Metadata.TableInfo.html": {
    "href": "api/Kros.KORM/Kros.KORM.Metadata.TableInfo.html",
    "title": "Class TableInfo | Kros.Libs",
    "keywords": "Class TableInfo Class, which represent information about table from database Inheritance System.Object TableInfo Namespace : Kros.KORM.Metadata Assembly : Kros.KORM.dll Syntax public class TableInfo Constructors TableInfo(IEnumerable<ColumnInfo>, IEnumerable<PropertyInfo>, MethodInfo) Initializes a new instance of the TableInfo class. Declaration public TableInfo(IEnumerable<ColumnInfo> columns, IEnumerable<PropertyInfo> allModelProperties, MethodInfo onAfterMaterialize) Parameters Type Name Description System.Collections.Generic.IEnumerable < ColumnInfo > columns The columns. System.Collections.Generic.IEnumerable < System.Reflection.PropertyInfo > allModelProperties All model properties System.Reflection.MethodInfo onAfterMaterialize Method info accessor for calling OnAfterMaterialize over IMaterialize IMaterialize If Model doesn't implement IMaterialize then null. Exceptions Type Condition System.ArgumentNullException When columns is null. Properties AllModelProperties All model properties. Declaration public IEnumerable<PropertyInfo> AllModelProperties { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.Reflection.PropertyInfo > Columns Gets the columns. Declaration public IEnumerable<ColumnInfo> Columns { get; } Property Value Type Description System.Collections.Generic.IEnumerable < ColumnInfo > The columns. Name Gets or sets the table name. Declaration public string Name { get; set; } Property Value Type Description System.String OnAfterMaterialize Method info accessor for calling OnAfterMaterialize over IMaterialize IMaterialize If Model doesn't implement IMaterialize then null. Declaration public MethodInfo OnAfterMaterialize { get; } Property Value Type Description System.Reflection.MethodInfo PrimaryKey Gets the columns, which are part of primary key. Declaration public IEnumerable<ColumnInfo> PrimaryKey { get; } Property Value Type Description System.Collections.Generic.IEnumerable < ColumnInfo > Methods GetColumnInfo(PropertyInfo) Gets the column information. Declaration public ColumnInfo GetColumnInfo(PropertyInfo property) Parameters Type Name Description System.Reflection.PropertyInfo property Property Info. Returns Type Description ColumnInfo Column information. Exceptions Type Condition System.ArgumentNullException When property is null. GetColumnInfo(String) Gets the column information. Declaration public ColumnInfo GetColumnInfo(string columnName) Parameters Type Name Description System.String columnName Name of the column. Returns Type Description ColumnInfo Column information. Exceptions Type Condition System.ArgumentNullException When columnName is null. GetColumnInfoByPropertyName(String) Gets the name of the column information by property. Declaration public ColumnInfo GetColumnInfoByPropertyName(string propertyName) Parameters Type Name Description System.String propertyName Name of the property. Returns Type Description ColumnInfo"
  },
  "api/Kros.KORM/Kros.KORM.Helper.Logger.html": {
    "href": "api/Kros.KORM/Kros.KORM.Helper.Logger.html",
    "title": "Class Logger | Kros.Libs",
    "keywords": "Class Logger Logger for logging provider activities. Inheritance System.Object Logger Implements ILogger Namespace : Kros.KORM.Helper Assembly : Kros.KORM.dll Syntax public class Logger : ILogger Methods LogCommand(IDbCommand) Logs the command. Declaration public void LogCommand(IDbCommand command) Parameters Type Name Description System.Data.IDbCommand command The command. Implements ILogger See Also ILogger"
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ViewColumnsSchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ViewColumnsSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.ViewColumnsSchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.ViewColumnsSchemaNames Inheritance System.Object SqlServerSchemaLoader.ViewColumnsSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class ViewColumnsSchemaNames Fields ColumnName Declaration public const string ColumnName = \"COLUMN_NAME\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String ViewCatalog Declaration public const string ViewCatalog = \"VIEW_CATALOG\" Field Value Type Description System.String ViewName Declaration public const string ViewName = \"VIEW_NAME\" Field Value Type Description System.String ViewSchema Declaration public const string ViewSchema = \"VIEW_SCHEMA\" Field Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Data.Schema.ColumnSchema.DefaultValues.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.ColumnSchema.DefaultValues.html",
    "title": "Class ColumnSchema.DefaultValues | Kros.Libs",
    "keywords": "Class ColumnSchema.DefaultValues Predvolené hodnoty stĺpcov pre jednotlivé dátové typy: Inheritance System.Object ColumnSchema.DefaultValues Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public static class DefaultValues Fields Boolean Declaration public const bool Boolean = false Field Value Type Description System.Boolean Byte Declaration public const byte Byte = 0 Field Value Type Description System.Byte Date Declaration public static readonly DateTime Date Field Value Type Description System.DateTime DateTime Declaration public static readonly DateTime DateTime Field Value Type Description System.DateTime Decimal Declaration public const decimal Decimal = 0M Field Value Type Description System.Decimal Double Declaration public const double Double = 0 Field Value Type Description System.Double Guid Declaration public static readonly Guid Guid Field Value Type Description System.Guid Int16 Declaration public const short Int16 = 0 Field Value Type Description System.Int16 Int32 Declaration public const int Int32 = 0 Field Value Type Description System.Int32 Int64 Declaration public const long Int64 = 0L Field Value Type Description System.Int64 Null Declaration public static readonly DBNull Null Field Value Type Description System.DBNull SByte Declaration public const sbyte SByte = 0 Field Value Type Description System.SByte Single Declaration public const float Single = 0F Field Value Type Description System.Single Text Declaration public const string Text = \"\" Field Value Type Description System.String Time Declaration public static readonly DateTime Time Field Value Type Description System.DateTime UInt16 Declaration public const ushort UInt16 = 0 Field Value Type Description System.UInt16 UInt32 Declaration public const uint UInt32 = 0U Field Value Type Description System.UInt32 UInt64 Declaration public const ulong UInt64 = 0UL Field Value Type Description System.UInt64"
  },
  "api/Kros.Utils/Kros.Extensions.html": {
    "href": "api/Kros.Utils/Kros.Extensions.html",
    "title": "Namespace Kros.Extensions | Kros.Libs",
    "keywords": "Namespace Kros.Extensions Classes DateTimeExtensions Rozšírenia pre dátum a čas System.DateTime . StringExtensions Všeobecné rozšírenia pre reťazec ( System.String )."
  },
  "api/Kros.Utils/Kros.Data.Schema.IDatabaseSchemaLoader.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.IDatabaseSchemaLoader.html",
    "title": "Interface IDatabaseSchemaLoader | Kros.Libs",
    "keywords": "Interface IDatabaseSchemaLoader Rozhranie pre triedy, načítavajúce schému databázy. Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public interface IDatabaseSchemaLoader Methods LoadSchema(Object) Načíta celú schému databázy určenej spojením connection . Declaration DatabaseSchema LoadSchema(object connection) Parameters Type Name Description System.Object connection Spojenie na databázu. Returns Type Description DatabaseSchema Vráti schému celej databázy. LoadTableSchema(Object, String) Načíta schému tabuľky tableName z databázy connection . Declaration TableSchema LoadTableSchema(object connection, string tableName) Parameters Type Name Description System.Object connection Spojenie na databázu. System.String tableName Meno tabuľky, ktorej schéma sa načíta. Returns Type Description TableSchema Vráti načítanú schému tabuľky, alebo hodnotu null , ak taká tabuľka neexistuje. SupportsConnectionType(Object) Kontroluje, či trieda dokáže načítať schému zo zadaného spojenia connection . Declaration bool SupportsConnectionType(object connection) Parameters Type Name Description System.Object connection Spojenie na databázu. Returns Type Description System.Boolean true , ak je možné načítať schému databázy, false , ak to možné nie je."
  },
  "api/Kros.Utils.MsAccess/Kros.Utils.MsAccess.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Utils.MsAccess.html",
    "title": "Namespace Kros.Utils.MsAccess | Kros.Libs",
    "keywords": "Namespace Kros.Utils.MsAccess Classes LibraryInitializer Inicialiácia knižnice."
  },
  "api/Kros.KORM/Kros.KORM.Metadata.IModelMapper.html": {
    "href": "api/Kros.KORM/Kros.KORM.Metadata.IModelMapper.html",
    "title": "Interface IModelMapper | Kros.Libs",
    "keywords": "Interface IModelMapper Interface, which describe class for mapping database to model. Namespace : Kros.KORM.Metadata Assembly : Kros.KORM.dll Syntax public interface IModelMapper Properties MapColumnName Gets or sets the column name mapping logic. Declaration Func<ColumnInfo, Type, string> MapColumnName { get; set; } Property Value Type Description System.Func < ColumnInfo , System.Type , System.String > Remarks Params: ColumnInfo - info about column. Type - Type of model. string - return column name. MapPrimaryKey Gets or sets the primary key mapping logic. Declaration Func<TableInfo, IEnumerable<ColumnInfo>> MapPrimaryKey { get; set; } Property Value Type Description System.Func < TableInfo , System.Collections.Generic.IEnumerable < ColumnInfo >> MapTableName Gets or sets the table name mapping logic. Declaration Func<TableInfo, Type, string> MapTableName { get; set; } Property Value Type Description System.Func < TableInfo , System.Type , System.String > Remarks Params: TableInfo - info about table. Type - Type of model. string - return table name. Methods GetInjector<T>() Get property service injector. Declaration IInjector GetInjector<T>() Returns Type Description IInjector Service property injector. Type Parameters Name Description T Model type. GetTableInfo(Type) Gets the table information. Declaration TableInfo GetTableInfo(Type modelType) Parameters Type Name Description System.Type modelType Type of the model. Returns Type Description TableInfo Table info. GetTableInfo<T>() Gets the table information. Declaration TableInfo GetTableInfo<T>() Returns Type Description TableInfo Table info. Type Parameters Name Description T Type of model. InjectionConfigurator<T>() Get property injection configuration for model T. Declaration IInjectionConfigurator<T> InjectionConfigurator<T>() Returns Type Description IInjectionConfigurator <T> Type Parameters Name Description T Examples SetColumnName<TModel, TValue>(Expression<Func<TModel, TValue>>, String) Set column name for specific property. Declaration void SetColumnName<TModel, TValue>(Expression<Func<TModel, TValue>> modelProperty, string columnName) where TModel : class Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TModel, TValue>> modelProperty Expression for defined property to. System.String columnName Database column name. Type Parameters Name Description TModel TValue Examples"
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.IndexesSchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.IndexesSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.IndexesSchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.IndexesSchemaNames Inheritance System.Object SqlServerSchemaLoader.IndexesSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class IndexesSchemaNames Fields ConstraintCatalog Declaration public const string ConstraintCatalog = \"CONSTRAINT_CATALOG\" Field Value Type Description System.String ConstraintName Declaration public const string ConstraintName = \"CONSTRAINT_NAME\" Field Value Type Description System.String ConstraintSchema Declaration public const string ConstraintSchema = \"CONSTRAINT_SCHEMA\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String TypeDesc Declaration public const string TypeDesc = \"TYPE_DESC\" Field Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.IndexColumnsSchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.IndexColumnsSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.IndexColumnsSchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.IndexColumnsSchemaNames Inheritance System.Object SqlServerSchemaLoader.IndexColumnsSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class IndexColumnsSchemaNames Fields ColumnName Declaration public const string ColumnName = \"COLUMN_NAME\" Field Value Type Description System.String ConstraintCatalog Declaration public const string ConstraintCatalog = \"CONSTRAINT_CATALOG\" Field Value Type Description System.String ConstraintName Declaration public const string ConstraintName = \"CONSTRAINT_NAME\" Field Value Type Description System.String ConstraintSchema Declaration public const string ConstraintSchema = \"CONSTRAINT_SCHEMA\" Field Value Type Description System.String KeyType Declaration public const string KeyType = \"KEYTYPE\" Field Value Type Description System.String OrdinalPosition Declaration public const string OrdinalPosition = \"ORDINAL_POSITION\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Net.NetworkChecker.html": {
    "href": "api/Kros.Utils/Kros.Net.NetworkChecker.html",
    "title": "Class NetworkChecker | Kros.Libs",
    "keywords": "Class NetworkChecker Trieda určená na testovanie dostupnosti internetového spojenia. Inheritance System.Object NetworkChecker Namespace : Kros.Net Assembly : Kros.Utils.dll Syntax public class NetworkChecker Remarks Nestačí testovať pomocou System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable , pretože táto metóda zistí či je počítač v sieti. Nezistí či je reálne dostupný internet. Taktiež netestujeme pomocou pingovania, pretože niektorí správcovia zakazujú ping. Takže testujeme pomocou dotazu na konkrétnu službu. Constructors NetworkChecker(String) Initializes a new instance of the NetworkChecker class. Declaration public NetworkChecker(string testingAddress) Parameters Type Name Description System.String testingAddress Webová adresa služby, ktorú testujeme. NetworkChecker(String, Int32, Int32) Initializes a new instance of the NetworkChecker class. Declaration public NetworkChecker(string serviceAddress, int requestTimeout, int responseCacheExpiration) Parameters Type Name Description System.String serviceAddress Webová adresa služby, ktorú testujeme. System.Int32 requestTimeout Maximálna doba čakania na odpoveď zo server. Keď uplynie a odpoveď sme nedostali, tak považujeme, že internet/služba nie je dostupný. V milisekundách. System.Int32 responseCacheExpiration čas v milisekundách, ktorý udáva ako dlho sa bude používať zapamätaná informácia o tom, že ide internet. Properties RequestTimeout Maximálna doba čakania na odpoveď zo server. Keď uplynie a odpoveď sme nedostali, tak považujeme, že internet/služba nie je dostupný. Hodnota je v milisekundách. Declaration public int RequestTimeout { get; } Property Value Type Description System.Int32 ResponseCacheExpiration Hodnota, ktorá udáva ako dlho sa bude používať zapamätaná informácia o tom, že internet je dostupný. V milisekundách. Declaration public int ResponseCacheExpiration { get; } Property Value Type Description System.Int32 ServiceAddress Webová adresa služby, ktorú testujeme. Declaration public string ServiceAddress { get; } Property Value Type Description System.String Methods IsNetworkAvailable() Skontroluje či je internet (konkrétna služba ServiceAddress ) k dispozícií. Kladnú odpoveď kešuje a reálny test prevedie len pokiaľ uplynul čas platnosti keše ResponseCacheExpiration . Declaration public bool IsNetworkAvailable() Returns Type Description System.Boolean true , ak je (respektíve v danom časovom intervale bol dostupný internet). false ak internet nie je dostupný."
  },
  "api/Kros.KORM/Kros.KORM.Metadata.html": {
    "href": "api/Kros.KORM/Kros.KORM.Metadata.html",
    "title": "Namespace Kros.KORM.Metadata | Kros.Libs",
    "keywords": "Namespace Kros.KORM.Metadata Classes ColumnInfo Class, which represent information about column from database. ConventionModelMapper Model mapper, which know define convention for name mapping. DatabaseMapper Mapper for database. Map object types to database informations. TableInfo Class, which represent information about table from database Interfaces IDatabaseMapper Interface, which describe mapper for database. Map object types to database informations. IModelMapper Interface, which describe class for mapping database to model. Enums AutoIncrementMethodType Type of primary key auto increment method."
  },
  "api/Kros.KORM/Kros.KORM.Metadata.IDatabaseMapper.html": {
    "href": "api/Kros.KORM/Kros.KORM.Metadata.IDatabaseMapper.html",
    "title": "Interface IDatabaseMapper | Kros.Libs",
    "keywords": "Interface IDatabaseMapper Interface, which describe mapper for database. Map object types to database informations. Namespace : Kros.KORM.Metadata Assembly : Kros.KORM.dll Syntax public interface IDatabaseMapper Methods GetInjector<T>() Get property service injector. Declaration IInjector GetInjector<T>() Returns Type Description IInjector Service property injector. Type Parameters Name Description T Model type. GetTableInfo(Type) Gets the table information by model type. Declaration TableInfo GetTableInfo(Type modelType) Parameters Type Name Description System.Type modelType Type of the model. Returns Type Description TableInfo Database table info for model. GetTableInfo<T>() Gets the table information by model type. Declaration TableInfo GetTableInfo<T>() Returns Type Description TableInfo Database table info for model. Type Parameters Name Description T Model type."
  },
  "api/Kros.KORM/Kros.KORM.Helper.html": {
    "href": "api/Kros.KORM/Kros.KORM.Helper.html",
    "title": "Namespace Kros.KORM.Helper | Kros.Libs",
    "keywords": "Namespace Kros.KORM.Helper Classes Logger Logger for logging provider activities. MethodName<T> Helper for getting method name. PropertyName<P> Helper for getting property name from class. Interfaces ILogger Interface, which describe logger."
  },
  "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.ViewsSchemaNames.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.ViewsSchemaNames.html",
    "title": "Class MsAccessSchemaLoader.ViewsSchemaNames | Kros.Libs",
    "keywords": "Class MsAccessSchemaLoader.ViewsSchemaNames Inheritance System.Object MsAccessSchemaLoader.ViewsSchemaNames Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class ViewsSchemaNames Fields DateCreated Declaration public const string DateCreated = \"DATE_CREATED\" Field Value Type Description System.String DateModified Declaration public const string DateModified = \"DATE_MODIFIED\" Field Value Type Description System.String Description Declaration public const string Description = \"DESCRIPTION\" Field Value Type Description System.String CheckOption Declaration public const string CheckOption = \"CHECK_OPTION\" Field Value Type Description System.String IsUpdatable Declaration public const string IsUpdatable = \"IS_UPDATABLE\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String ViewDefinition Declaration public const string ViewDefinition = \"VIEW_DEFINITION\" Field Value Type Description System.String"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.TableTypes.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.TableTypes.html",
    "title": "Class MsAccessSchemaLoader.TableTypes | Kros.Libs",
    "keywords": "Class MsAccessSchemaLoader.TableTypes Inheritance System.Object MsAccessSchemaLoader.TableTypes Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class TableTypes Fields AccessTable Declaration public const string AccessTable = \"ACCESS TABLE\" Field Value Type Description System.String SystemTable Declaration public const string SystemTable = \"SYSTEM TABLE\" Field Value Type Description System.String Table Declaration public const string Table = \"TABLE\" Field Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ProceduresSchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ProceduresSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.ProceduresSchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.ProceduresSchemaNames Inheritance System.Object SqlServerSchemaLoader.ProceduresSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class ProceduresSchemaNames Fields Created Declaration public const string Created = \"CREATED\" Field Value Type Description System.String LastAltered Declaration public const string LastAltered = \"LAST_ALTERED\" Field Value Type Description System.String RoutineCatalog Declaration public const string RoutineCatalog = \"ROUTINE_CATALOG\" Field Value Type Description System.String RoutineName Declaration public const string RoutineName = \"ROUTINE_NAME\" Field Value Type Description System.String RoutineSchema Declaration public const string RoutineSchema = \"ROUTINE_SCHEMA\" Field Value Type Description System.String RoutineType Declaration public const string RoutineType = \"ROUTINE_TYPE\" Field Value Type Description System.String SpecificCatalog Declaration public const string SpecificCatalog = \"SPECIFIC_CATALOG\" Field Value Type Description System.String SpecificName Declaration public const string SpecificName = \"SPECIFIC_NAME\" Field Value Type Description System.String SpecificSchema Declaration public const string SpecificSchema = \"SPECIFIC_SCHEMA\" Field Value Type Description System.String"
  },
  "api/Kros.Utils.MsAccess/Kros.Utils.MsAccess.LibraryInitializer.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Utils.MsAccess.LibraryInitializer.html",
    "title": "Class LibraryInitializer | Kros.Libs",
    "keywords": "Class LibraryInitializer Inicialiácia knižnice. Inheritance System.Object LibraryInitializer Namespace : Kros.Utils.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class LibraryInitializer Methods InitLibrary() Inicializuje knižnicu - zavolať raz pri štarte programu. Declaration public static void InitLibrary() Remarks Inicializácia vykoná:"
  },
  "api/Kros.KORM/Kros.KORM.Query.QueryProviderFactories.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.QueryProviderFactories.html",
    "title": "Class QueryProviderFactories | Kros.Libs",
    "keywords": "Class QueryProviderFactories Represent set of registered Query provider factories. Inheritance System.Object QueryProviderFactories Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public static class QueryProviderFactories Methods GetFactory(DbConnection) Gets the factory by connection. Declaration public static IQueryProviderFactory GetFactory(DbConnection connection) Parameters Type Name Description System.Data.Common.DbConnection connection The connection. Returns Type Description IQueryProviderFactory Instance of IQueryProviderFactory . Exceptions Type Condition System.InvalidOperationException When factory for specific connection is not registered. GetFactory(String) Gets the factory by provider name. Declaration public static IQueryProviderFactory GetFactory(string providerName) Parameters Type Name Description System.String providerName Db provider name. Returns Type Description IQueryProviderFactory Instance of IQueryProviderFactory . Exceptions Type Condition System.InvalidOperationException When factory for specific providerName is not registered. Register<TConnection>(String, IQueryProviderFactory) Registers the specified query provider factory. Declaration public static void Register<TConnection>(string providerName, IQueryProviderFactory queryProviderFactory) where TConnection : DbConnection Parameters Type Name Description System.String providerName Name of the provider. IQueryProviderFactory queryProviderFactory The query provider factory. Type Parameters Name Description TConnection The type of the connection. See Also IQueryProviderFactory"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.IndexesSchemaNames.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.IndexesSchemaNames.html",
    "title": "Class MsAccessSchemaLoader.IndexesSchemaNames | Kros.Libs",
    "keywords": "Class MsAccessSchemaLoader.IndexesSchemaNames Inheritance System.Object MsAccessSchemaLoader.IndexesSchemaNames Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class IndexesSchemaNames Fields AutoUpdate Declaration public const string AutoUpdate = \"AUTO_UPDATE\" Field Value Type Description System.String Cardinality Declaration public const string Cardinality = \"CARDINALITY\" Field Value Type Description System.String Clustered Declaration public const string Clustered = \"CLUSTERED\" Field Value Type Description System.String Collation Declaration public const string Collation = \"COLLATION\" Field Value Type Description System.String ColumnGuid Declaration public const string ColumnGuid = \"COLUMN_GUID\" Field Value Type Description System.String ColumnName Declaration public const string ColumnName = \"COLUMN_NAME\" Field Value Type Description System.String ColumnPropid Declaration public const string ColumnPropid = \"COLUMN_PROPID\" Field Value Type Description System.String FillFactor Declaration public const string FillFactor = \"FILL_FACTOR\" Field Value Type Description System.String FilterCondition Declaration public const string FilterCondition = \"FILTER_CONDITION\" Field Value Type Description System.String IndexCatalog Declaration public const string IndexCatalog = \"INDEX_CATALOG\" Field Value Type Description System.String IndexName Declaration public const string IndexName = \"INDEX_NAME\" Field Value Type Description System.String IndexSchema Declaration public const string IndexSchema = \"INDEX_SCHEMA\" Field Value Type Description System.String InitialSize Declaration public const string InitialSize = \"INITIAL_SIZE\" Field Value Type Description System.String Integrated Declaration public const string Integrated = \"INTEGRATED\" Field Value Type Description System.String NullCollation Declaration public const string NullCollation = \"NULL_COLLATION\" Field Value Type Description System.String Nulls Declaration public const string Nulls = \"NULLS\" Field Value Type Description System.String OrdinalPosition Declaration public const string OrdinalPosition = \"ORDINAL_POSITION\" Field Value Type Description System.String Pages Declaration public const string Pages = \"PAGES\" Field Value Type Description System.String PrimaryKey Declaration public const string PrimaryKey = \"PRIMARY_KEY\" Field Value Type Description System.String SortBookmarks Declaration public const string SortBookmarks = \"SORT_BOOKMARKS\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String Type Declaration public const string Type = \"TYPE\" Field Value Type Description System.String Unique Declaration public const string Unique = \"UNIQUE\" Field Value Type Description System.String"
  },
  "api/Kros.KORM/Kros.KORM.Metadata.ColumnInfo.html": {
    "href": "api/Kros.KORM/Kros.KORM.Metadata.ColumnInfo.html",
    "title": "Class ColumnInfo | Kros.Libs",
    "keywords": "Class ColumnInfo Class, which represent information about column from database. Inheritance System.Object ColumnInfo Namespace : Kros.KORM.Metadata Assembly : Kros.KORM.dll Syntax public class ColumnInfo Properties AutoIncrementMethodType Type of primary key auto increment method. Declaration public AutoIncrementMethodType AutoIncrementMethodType { get; set; } Property Value Type Description AutoIncrementMethodType Converter Gets or sets the data converter. Declaration public IConverter Converter { get; set; } Property Value Type Description IConverter IsPrimaryKey Gets or sets a value indicating whether this column is primary key. Declaration public bool IsPrimaryKey { get; set; } Property Value Type Description System.Boolean Name Column name. Declaration public string Name { get; set; } Property Value Type Description System.String PropertyInfo Gets or sets the property information. Declaration public PropertyInfo PropertyInfo { get; set; } Property Value Type Description System.Reflection.PropertyInfo Methods GetValue(Object) Gets the value. Declaration public object GetValue(object targetObject) Parameters Type Name Description System.Object targetObject The target object. Returns Type Description System.Object Return value from targetObject. SetValue(Object, Object) Sets the value. Declaration public void SetValue(object targetObject, object value) Parameters Type Name Description System.Object targetObject The target object. System.Object value The value."
  },
  "api/Kros.KORM/Kros.KORM.Metadata.DatabaseMapper.html": {
    "href": "api/Kros.KORM/Kros.KORM.Metadata.DatabaseMapper.html",
    "title": "Class DatabaseMapper | Kros.Libs",
    "keywords": "Class DatabaseMapper Mapper for database. Map object types to database informations. Inheritance System.Object DatabaseMapper Implements IDatabaseMapper Namespace : Kros.KORM.Metadata Assembly : Kros.KORM.dll Syntax public class DatabaseMapper : IDatabaseMapper Constructors DatabaseMapper(IModelMapper) Initializes a new instance of the DatabaseMapper class. Declaration public DatabaseMapper(IModelMapper modelMapper) Parameters Type Name Description IModelMapper modelMapper The model mapper. Methods GetInjector<T>() Get property service injector. Declaration public IInjector GetInjector<T>() Returns Type Description IInjector Service property injector. Type Parameters Name Description T Model type. GetTableInfo(Type) Gets the table information by model type. Declaration public TableInfo GetTableInfo(Type modelType) Parameters Type Name Description System.Type modelType Type of the model. Returns Type Description TableInfo Database table info for model. GetTableInfo<T>() Gets the table information by model type. Declaration public TableInfo GetTableInfo<T>() Returns Type Description TableInfo Database table info for model. Type Parameters Name Description T Model type. Implements IDatabaseMapper See Also IDatabaseMapper"
  },
  "api/Kros.KORM/Kros.KORM.Materializer.DynamicMethodModelFactory.html": {
    "href": "api/Kros.KORM/Kros.KORM.Materializer.DynamicMethodModelFactory.html",
    "title": "Class DynamicMethodModelFactory | Kros.Libs",
    "keywords": "Class DynamicMethodModelFactory Modelfactory, which materialize model by dynamic method delegates. Inheritance System.Object DynamicMethodModelFactory Implements IModelFactory Namespace : Kros.KORM.Materializer Assembly : Kros.KORM.dll Syntax public class DynamicMethodModelFactory : IModelFactory Constructors DynamicMethodModelFactory(IDatabaseMapper) Initializes a new instance of the DynamicMethodModelFactory class. Declaration public DynamicMethodModelFactory(IDatabaseMapper databaseMapper) Parameters Type Name Description IDatabaseMapper databaseMapper The database mapper. Exceptions Type Condition System.ArgumentNullException databaseMapper;Argument 'databaseMapper' is required. Methods GetFactory<T>(IDataReader) Gets the factory for creating and filling model. Declaration public Func<IDataReader, T> GetFactory<T>(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Reader from fill model. Returns Type Description System.Func < System.Data.IDataReader , T> Factory for creating and filling model. Type Parameters Name Description T Type of model class. Exceptions Type Condition System.ArgumentNullException reader;Argument 'reader' is required. Implements IModelFactory See Also IModelFactory"
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ProcedureParametersSchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ProcedureParametersSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.ProcedureParametersSchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.ProcedureParametersSchemaNames Inheritance System.Object SqlServerSchemaLoader.ProcedureParametersSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class ProcedureParametersSchemaNames Fields AsLocator Declaration public const string AsLocator = \"AS_LOCATOR\" Field Value Type Description System.String CollationCatalog Declaration public const string CollationCatalog = \"COLLATION_CATALOG\" Field Value Type Description System.String CollationName Declaration public const string CollationName = \"COLLATION_NAME\" Field Value Type Description System.String CollationSchema Declaration public const string CollationSchema = \"COLLATION_SCHEMA\" Field Value Type Description System.String DataType Declaration public const string DataType = \"DATA_TYPE\" Field Value Type Description System.String DatetimePrecision Declaration public const string DatetimePrecision = \"DATETIME_PRECISION\" Field Value Type Description System.String CharacterMaximumLength Declaration public const string CharacterMaximumLength = \"CHARACTER_MAXIMUM_LENGTH\" Field Value Type Description System.String CharacterOctetLength Declaration public const string CharacterOctetLength = \"CHARACTER_OCTET_LENGTH\" Field Value Type Description System.String CharacterSetCatalog Declaration public const string CharacterSetCatalog = \"CHARACTER_SET_CATALOG\" Field Value Type Description System.String CharacterSetName Declaration public const string CharacterSetName = \"CHARACTER_SET_NAME\" Field Value Type Description System.String CharacterSetSchema Declaration public const string CharacterSetSchema = \"CHARACTER_SET_SCHEMA\" Field Value Type Description System.String IntervalPrecision Declaration public const string IntervalPrecision = \"INTERVAL_PRECISION\" Field Value Type Description System.String IntervalType Declaration public const string IntervalType = \"INTERVAL_TYPE\" Field Value Type Description System.String IsResult Declaration public const string IsResult = \"IS_RESULT\" Field Value Type Description System.String NumericPrecision Declaration public const string NumericPrecision = \"NUMERIC_PRECISION\" Field Value Type Description System.String NumericPrecisionRadix Declaration public const string NumericPrecisionRadix = \"NUMERIC_PRECISION_RADIX\" Field Value Type Description System.String NumericScale Declaration public const string NumericScale = \"NUMERIC_SCALE\" Field Value Type Description System.String OrdinalPosition Declaration public const string OrdinalPosition = \"ORDINAL_POSITION\" Field Value Type Description System.String ParameterMode Declaration public const string ParameterMode = \"PARAMETER_MODE\" Field Value Type Description System.String ParameterName Declaration public const string ParameterName = \"PARAMETER_NAME\" Field Value Type Description System.String SpecificCatalog Declaration public const string SpecificCatalog = \"SPECIFIC_CATALOG\" Field Value Type Description System.String SpecificName Declaration public const string SpecificName = \"SPECIFIC_NAME\" Field Value Type Description System.String SpecificSchema Declaration public const string SpecificSchema = \"SPECIFIC_SCHEMA\" Field Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.IO.PathHelper.html": {
    "href": "api/Kros.Utils/Kros.IO.PathHelper.html",
    "title": "Class PathHelper | Kros.Libs",
    "keywords": "Class PathHelper Pomocná trieda na prácu s cestami k súborom/zložkám. Inheritance System.Object PathHelper Namespace : Kros.IO Assembly : Kros.Utils.dll Syntax public static class PathHelper Methods BuildPath(String[]) Spojí zadané časti parts do reťazca predstavujúceho cestu k súboru/zložke. Declaration public static string BuildPath(params string[] parts) Parameters Type Name Description System.String [] parts Časti cesty. Returns Type Description System.String Vytvorená cesta. Remarks Metóda pracuje podobne ako štandardná .NET metóda System.IO.Path.Combine(System.String[]) , s pár upravenými detailami. Exceptions Type Condition System.ArgumentNullException Vstupný parameter parts má hodnotu null , alebo niektorá z jeho častí je null . System.ArgumentException Niektorý z reťazcov v zozname parts obsahuje nepovolené znaky, definované v System.IO.Path.GetInvalidPathChars . GetTempPath() Adresárová cesta ku systémovej zložke pre dočasné súbory bez lomítka na konci. Declaration public static string GetTempPath() Returns Type Description System.String IsNetworkPath(String) Zistí, či dané umiestnenie, adresár alebo súbor sídli na zdieľanom adresári na sieti. Declaration public static bool IsNetworkPath(string path) Parameters Type Name Description System.String path Cesta, ktorá sa testuje. Returns Type Description System.Boolean true , ak path je sieťová cesta, inak false . ReplaceInvalidPathChars(String) V reťazci pathName nahradí zakázané znaky pre názov súboru za pomlčku ( - ). Ak je vo vstupnom reťazci viacero zakázaných znakov za sebou, sú všetky ako skupina nahradené jednou pomlčkou. Declaration public static string ReplaceInvalidPathChars(string pathName) Parameters Type Name Description System.String pathName Vstupný reťazec, predstavujúci názov súboru. Returns Type Description System.String ReplaceInvalidPathChars(String, String) V reťazci pathName nahradí zakázané znaky pre názov súboru za reťazec replacement . Ak je vo vstupnom reťazci viacero zakázaných znakov za sebou, sú všetky ako skupina nahradené jedným znakom. Declaration public static string ReplaceInvalidPathChars(string pathName, string replacement) Parameters Type Name Description System.String pathName Vstupný reťazec, predstavujúci názov súboru. System.String replacement Reťazec, ktorým sa nahrádzajú zakázané znaky. Ak je null , použije sa prázdny reťazec, tzn. zakázané znaky sa zo vstupného reťazca odstránia. Returns Type Description System.String Reťazec s nahradenými zakázanými znakmi. Ak vstupná hodnota pathName je null , je vrátený prázdny reťazec ( string.Empty )."
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ViewsSchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ViewsSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.ViewsSchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.ViewsSchemaNames Inheritance System.Object SqlServerSchemaLoader.ViewsSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class ViewsSchemaNames Fields CheckOption Declaration public const string CheckOption = \"CHECK_OPTION\" Field Value Type Description System.String IsUpdatable Declaration public const string IsUpdatable = \"IS_UPDATABLE\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String"
  },
  "api/Kros.KORM/Kros.KORM.Materializer.ModelBuilder.html": {
    "href": "api/Kros.KORM/Kros.KORM.Materializer.ModelBuilder.html",
    "title": "Class ModelBuilder | Kros.Libs",
    "keywords": "Class ModelBuilder ModelBuilder, which know materialize data from Db to objects. Inheritance System.Object ModelBuilder Implements IModelBuilder Namespace : Kros.KORM.Materializer Assembly : Kros.KORM.dll Syntax public class ModelBuilder : IModelBuilder Constructors ModelBuilder(IModelFactory) Initializes a new instance of the ModelBuilder class. Declaration public ModelBuilder(IModelFactory modelFactory) Parameters Type Name Description IModelFactory modelFactory The model factory. Exceptions Type Condition System.ArgumentNullException Argument 'modelFactory' is required. Methods Materialize<T>(DataRow) Materialize data from dataRow to instances of model type T . Declaration public T Materialize<T>(DataRow dataRow) Parameters Type Name Description System.Data.DataRow dataRow Data row of the table. Returns Type Description T Model. Type Parameters Name Description T Type of model. Materialize<T>(DataTable) Materialize data from data table to instances of model type T. Declaration public IEnumerable<T> Materialize<T>(DataTable table) Parameters Type Name Description System.Data.DataTable table Returns Type Description System.Collections.Generic.IEnumerable <T> IEnumerable of models. Type Parameters Name Description T Type of model. Materialize<T>(IDataReader) Materialize data from reader to instances of model type T. Declaration public IEnumerable<T> Materialize<T>(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader The reader from which materialize data. Returns Type Description System.Collections.Generic.IEnumerable <T> IEnumerable of models. Type Parameters Name Description T Type of model. Remarks If disposeReader is true and connection is not null, then connection will be disposed. Examples Implements IModelBuilder See Also IModelBuilder"
  },
  "api/Kros.KORM/Kros.KORM.Helper.PropertyName-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.Helper.PropertyName-1.html",
    "title": "Class PropertyName<P> | Kros.Libs",
    "keywords": "Class PropertyName<P> Helper for getting property name from class. Inheritance System.Object PropertyName<P> Namespace : Kros.KORM.Helper Assembly : Kros.KORM.dll Syntax public static class PropertyName<P> where P : class Type Parameters Name Description P Class type, from want get property name Examples Methods GetPropertyName<T>(Expression<Func<P, T>>) Gets the name of the property. Declaration public static string GetPropertyName<T>(Expression<Func<P, T>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <P, T>> expression The expression with property. Returns Type Description System.String Property name. Type Parameters Name Description T Examples"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.ProceduresSchemaNames.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.ProceduresSchemaNames.html",
    "title": "Class MsAccessSchemaLoader.ProceduresSchemaNames | Kros.Libs",
    "keywords": "Class MsAccessSchemaLoader.ProceduresSchemaNames Inheritance System.Object MsAccessSchemaLoader.ProceduresSchemaNames Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class ProceduresSchemaNames Fields DateCreated Declaration public const string DateCreated = \"DATE_CREATED\" Field Value Type Description System.String DateModified Declaration public const string DateModified = \"DATE_MODIFIED\" Field Value Type Description System.String Description Declaration public const string Description = \"DESCRIPTION\" Field Value Type Description System.String ProcedureCatalog Declaration public const string ProcedureCatalog = \"PROCEDURE_CATALOG\" Field Value Type Description System.String ProcedureDefinition Declaration public const string ProcedureDefinition = \"PROCEDURE_DEFINITION\" Field Value Type Description System.String ProcedureName Declaration public const string ProcedureName = \"PROCEDURE_NAME\" Field Value Type Description System.String ProcedureSchema Declaration public const string ProcedureSchema = \"PROCEDURE_SCHEMA\" Field Value Type Description System.String ProcedureType Declaration public const string ProcedureType = \"PROCEDURE_TYPE\" Field Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerColumnSchema.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerColumnSchema.html",
    "title": "Class SqlServerColumnSchema | Kros.Libs",
    "keywords": "Class SqlServerColumnSchema Schéma stĺpca tabuľky pre SQL Server. Inheritance System.Object ColumnSchema SqlServerColumnSchema Inherited Members ColumnSchema.DefaultDefaultValue ColumnSchema.DefaultAllowNull ColumnSchema.DefaultSize ColumnSchema.Table ColumnSchema.Name ColumnSchema.FullName ColumnSchema.AllowNull ColumnSchema.DefaultValue ColumnSchema.Size ColumnSchema.ToStringDefaultValue() Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public class SqlServerColumnSchema : ColumnSchema Constructors SqlServerColumnSchema(String) Vytvorí inštanciu schémy stĺpca s menom name . Declaration public SqlServerColumnSchema(string name) Parameters Type Name Description System.String name Meno stĺpca. Exceptions Type Condition System.ArgumentNullException Meno stĺpca name má hodnotu null . System.ArgumentException Meno stĺpca name nie je zadané: je prázdny reťazec, alebo reťazec bielych znakov. SqlServerColumnSchema(String, Boolean) Vytvorí inštanciu schémy stĺpca s menom name a s povolením NULL hodnôt podľa allowNull . Declaration public SqlServerColumnSchema(string name, bool allowNull) Parameters Type Name Description System.String name Meno stĺpca. System.Boolean allowNull Určuje, či stĺpec má povolenú NULL hodnotu. Exceptions Type Condition System.ArgumentNullException Meno stĺpca name má hodnotu null . System.ArgumentException Meno stĺpca name nie je zadané: je prázdny reťazec, alebo reťazec bielych znakov. SqlServerColumnSchema(String, Boolean, Object) Vytvorí inštanciu schémy stĺpca s menom name a ostatnými hodnotami. Declaration public SqlServerColumnSchema(string name, bool allowNull, object defaultValue) Parameters Type Name Description System.String name Meno stĺpca. System.Boolean allowNull Určuje, či stĺpec má povolenú NULL hodnotu. System.Object defaultValue Predvolená hodnota stĺpca. Exceptions Type Condition System.ArgumentNullException Meno stĺpca name má hodnotu null alebo je to reťazec bielych znakov. SqlServerColumnSchema(String, Boolean, Object, Int32) Vytvorí inštanciu schémy stĺpca s menom name a ostatnými hodnotami. Declaration public SqlServerColumnSchema(string name, bool allowNull, object defaultValue, int size) Parameters Type Name Description System.String name Meno stĺpca. System.Boolean allowNull Určuje, či stĺpec má povolenú NULL hodnotu. System.Object defaultValue Predvolená hodnota stĺpca. System.Int32 size Maximálna dĺžka textových stĺpcov. Ak je neobmedzená, hodnota je 0 . Exceptions Type Condition System.ArgumentNullException Meno stĺpca name má hodnotu null . System.ArgumentException Meno stĺpca name nie je zadané: je prázdny reťazec, alebo reťazec bielych znakov. Properties DbType Declaration public override DbType DbType { get; } Property Value Type Description System.Data.DbType Overrides ColumnSchema.DbType SqlDbType Dátový typ stĺpca ako hodnota enumerátu SqlDbType . Declaration public SqlDbType SqlDbType { get; set; } Property Value Type Description System.Data.SqlDbType Methods SetParameterDbType(IDataParameter) Declaration public override void SetParameterDbType(IDataParameter param) Parameters Type Name Description System.Data.IDataParameter param Overrides ColumnSchema.SetParameterDbType(IDataParameter) Exceptions Type Condition System.ArgumentException Hodnota param nie je typu System.Data.SqlClient.SqlParameter . ToString() Declaration public override string ToString() Returns Type Description System.String Overrides ColumnSchema.ToString()"
  },
  "api/Kros.Utils/Kros.Data.Schema.ForeignKeySchemaCollection.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.ForeignKeySchemaCollection.html",
    "title": "Class ForeignKeySchemaCollection | Kros.Libs",
    "keywords": "Class ForeignKeySchemaCollection Zoznam cudzích kľúčov tabuľky TableSchema . Inheritance System.Object System.Collections.ObjectModel.Collection < ForeignKeySchema > System.Collections.ObjectModel.KeyedCollection < System.String , ForeignKeySchema > ForeignKeySchemaCollection Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class ForeignKeySchemaCollection : KeyedCollection<string, ForeignKeySchema>, IList<ForeignKeySchema>, ICollection<ForeignKeySchema>, IList, ICollection, IReadOnlyList<ForeignKeySchema>, IReadOnlyCollection<ForeignKeySchema>, IEnumerable<ForeignKeySchema>, IEnumerable Remarks Cudzím kľúčom pridaným do zoznamu je automaticky nastavená tabuľka Table . Do zoznamu nie je možné pridať cudzí kľúč, ktorý už patrí inej tabuľke. V takom prípade je vyvolaná výnimka System.InvalidOperationException . Constructors ForeignKeySchemaCollection(TableSchema) Vytvorí zoznam cudzích kľúčov pre tabuľku table . Declaration public ForeignKeySchemaCollection(TableSchema table) Parameters Type Name Description TableSchema table Tabuľka. Exceptions Type Condition System.ArgumentNullException Hodnota table je null . Methods Add(String, String, IEnumerable<String>, String, IEnumerable<String>) Vytvorí a pridá do zoznamu novú definíciu cudzieho kľúča s menom name . Cudzí kľúč je nad stĺpcami foreignKeyTableColumns tabuľky foreignKeyTableName a odkazuje sa na stĺpce primaryKeyTableColumns tabuľky primaryKeyTableName . Declaration public ForeignKeySchema Add(string name, string primaryKeyTableName, IEnumerable<string> primaryKeyTableColumns, string foreignKeyTableName, IEnumerable<string> foreignKeyTableColumns) Parameters Type Name Description System.String name Meno cudzieho kľúča. System.String primaryKeyTableName Meno tabuľky s primárnym kľúčom. System.Collections.Generic.IEnumerable < System.String > primaryKeyTableColumns Zoznam odkazovaných stĺpcov v tabuľke s primárnym kľúčom. System.String foreignKeyTableName Meno tabuľky s cudzím kľúčom. System.Collections.Generic.IEnumerable < System.String > foreignKeyTableColumns Zoznam stĺpcov v tabuľke cudzieho kľúča. Returns Type Description ForeignKeySchema Vytvorený cudzí kľúč. Exceptions Type Condition System.ArgumentNullException Hodnota ľubovoľného parametra je null . System.ArgumentException Add(String, String, String, String, String) Vytvorí a pridá do zoznamu novú definíciu cudzieho kľúča s menom name . Cudzí kľúč je nad stĺpcom foreignKeyTableColumn tabuľky foreignKeyTableName a odkazuje sa na stĺpec primaryKeyTableColumn tabuľky primaryKeyTableName . Declaration public ForeignKeySchema Add(string name, string primaryKeyTableName, string primaryKeyTableColumn, string foreignKeyTableName, string foreignKeyTableColumn) Parameters Type Name Description System.String name Meno cudzieho kľúča. System.String primaryKeyTableName Meno tabuľky s primárnym kľúčom. System.String primaryKeyTableColumn Meno odkazovaného stĺpca v tabuľke s primárnym kľúčom. System.String foreignKeyTableName Meno tabuľky s cudzím kľúčom. System.String foreignKeyTableColumn Meno stĺpca v tabuľke cudzieho kľúča. Returns Type Description ForeignKeySchema Vytvorený cudzí kľúč. Exceptions Type Condition System.ArgumentNullException Hodnota ľubovoľného parametra je null . System.ArgumentException Hodnota ľubovoľného parametra je prázdny reťazec, alebo reťazec bielych znakov. GetKeyForItem(ForeignKeySchema) Declaration protected override string GetKeyForItem(ForeignKeySchema item) Parameters Type Name Description ForeignKeySchema item Returns Type Description System.String Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.ForeignKeySchema>.GetKeyForItem(Kros.Data.Schema.ForeignKeySchema) InsertItem(Int32, ForeignKeySchema) Declaration protected override void InsertItem(int index, ForeignKeySchema item) Parameters Type Name Description System.Int32 index ForeignKeySchema item Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.ForeignKeySchema>.InsertItem(System.Int32, Kros.Data.Schema.ForeignKeySchema) RemoveItem(Int32) Declaration protected override void RemoveItem(int index) Parameters Type Name Description System.Int32 index Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.ForeignKeySchema>.RemoveItem(System.Int32)"
  },
  "api/Kros.KORM/Kros.KORM.Query.SqlServerQueryProvider.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.SqlServerQueryProvider.html",
    "title": "Class SqlServerQueryProvider | Kros.Libs",
    "keywords": "Class SqlServerQueryProvider Provider, which know execute query for Sql Server. Inheritance System.Object QueryProvider SqlServerQueryProvider Implements IQueryProvider Inherited Members QueryProvider.SetParameterDbType(DbParameter, String, String) QueryProvider.Execute<T>(IQuery<T>) QueryProvider.ExecuteScalar<T>(IQuery<T>) QueryProvider.ExecuteInTransaction(Action) QueryProvider.ExecuteNonQueryCommand(IDbCommand) QueryProvider.ExecuteNonQuery(String) QueryProvider.ExecuteNonQuery(String, CommandParameterCollection) QueryProvider.ExecuteStoredProcedure<TResult>(String) QueryProvider.ExecuteStoredProcedure<TResult>(String, CommandParameterCollection) QueryProvider.GetCommandForCurrentTransaction() QueryProvider.BeginTransaction(IsolationLevel) QueryProvider.CreateIdGenerator(String, Int32) QueryProvider.CreateQuery(Expression) QueryProvider.CreateQuery<TElement>(Expression) QueryProvider.Execute(Expression) QueryProvider.Execute<TResult>(Expression) QueryProvider.GetCurrentTransaction() QueryProvider.ConnectionString QueryProvider.IsExternalConnection QueryProvider.Connection QueryProvider.Dispose(Boolean) QueryProvider.Dispose() Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public class SqlServerQueryProvider : QueryProvider, IQueryProvider, IQueryProvider, IDisposable Constructors SqlServerQueryProvider(ConnectionStringSettings, ISqlExpressionVisitor, IModelBuilder, ILogger) Initializes a new instance of the SqlServerQueryProvider class. Declaration public SqlServerQueryProvider(ConnectionStringSettings connectionString, ISqlExpressionVisitor sqlGenerator, IModelBuilder modelBuilder, ILogger logger) Parameters Type Name Description System.Configuration.ConnectionStringSettings connectionString The connection string settings. ISqlExpressionVisitor sqlGenerator The SQL generator. IModelBuilder modelBuilder The model builder. ILogger logger The logger. SqlServerQueryProvider(DbConnection, ISqlExpressionVisitor, IModelBuilder, ILogger) Initializes a new instance of the QueryProvider class. Declaration public SqlServerQueryProvider(DbConnection connection, ISqlExpressionVisitor sqlGenerator, IModelBuilder modelBuilder, ILogger logger) Parameters Type Name Description System.Data.Common.DbConnection connection The connection. ISqlExpressionVisitor sqlGenerator The SQL generator. IModelBuilder modelBuilder The model builder. ILogger logger The logger. Properties DbProviderFactory Returns DbProviderFactory for current provider. Declaration public override DbProviderFactory DbProviderFactory { get; } Property Value Type Description System.Data.Common.DbProviderFactory Overrides QueryProvider.DbProviderFactory Methods CreateBulkInsert() Creates instance of IBulkInsert . Declaration public override IBulkInsert CreateBulkInsert() Returns Type Description IBulkInsert Instance of IBulkInsert . Overrides QueryProvider.CreateBulkInsert() CreateBulkUpdate() Creates instance of IBulkUpdate . Declaration public override IBulkUpdate CreateBulkUpdate() Returns Type Description IBulkUpdate Instance of IBulkUpdate . Overrides QueryProvider.CreateBulkUpdate() GetSchemaLoader() Returns instance of SqlServerSchemaLoader . Declaration protected override IDatabaseSchemaLoader GetSchemaLoader() Returns Type Description IDatabaseSchemaLoader Overrides QueryProvider.GetSchemaLoader() Implements IQueryProvider See Also QueryProvider"
  },
  "api/Kros.Utils/Kros.Caching.html": {
    "href": "api/Kros.Utils/Kros.Caching.html",
    "title": "Namespace Kros.Caching | Kros.Libs",
    "keywords": "Namespace Kros.Caching Classes Cache<TKey, TValue> Class for caching data. Interfaces ICache<TKey, TValue> Interface, which describe class for caching data."
  },
  "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessCacheKeyGenerator.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessCacheKeyGenerator.html",
    "title": "Class MsAccessCacheKeyGenerator | Kros.Libs",
    "keywords": "Class MsAccessCacheKeyGenerator Generátor kľúča pre MS Access databázu. Inheritance System.Object MsAccessCacheKeyGenerator Implements ISchemaCacheKeyGenerator < System.Data.OleDb.OleDbConnection > ISchemaCacheKeyGenerator Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessCacheKeyGenerator : ISchemaCacheKeyGenerator<OleDbConnection>, ISchemaCacheKeyGenerator Methods GenerateKey(OleDbConnection) Vygeneruje kľúč pre spojenie connection . Vygenerovaný kľúč je cesta k databázovému súboru. Declaration public string GenerateKey(OleDbConnection connection) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Spojenie na databázu. Returns Type Description System.String Reťazec. Exceptions Type Condition System.ArgumentNullException Hodnota connection je null . Explicit Interface Implementations ISchemaCacheKeyGenerator.GenerateKey(Object) Vygeneruje kľúč pre spojenie connection . Vygenerovaný kľúč je cesta k databázovému súboru. Declaration string ISchemaCacheKeyGenerator.GenerateKey(object connection) Parameters Type Name Description System.Object connection Spojenie na databázu. Returns Type Description System.String Reťazec. Exceptions Type Condition System.ArgumentNullException Hodnota connection je null . Implements ISchemaCacheKeyGenerator<T> ISchemaCacheKeyGenerator"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessColumnSchema.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessColumnSchema.html",
    "title": "Class MsAccessColumnSchema | Kros.Libs",
    "keywords": "Class MsAccessColumnSchema Schéma stĺpca MS Access databázy. Inheritance System.Object ColumnSchema MsAccessColumnSchema Inherited Members ColumnSchema.DefaultDefaultValue ColumnSchema.DefaultAllowNull ColumnSchema.DefaultSize ColumnSchema.Table ColumnSchema.Name ColumnSchema.FullName ColumnSchema.AllowNull ColumnSchema.DefaultValue ColumnSchema.Size ColumnSchema.ToStringDefaultValue() Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessColumnSchema : ColumnSchema Constructors MsAccessColumnSchema(String) Vytvorí inštanciu schémy stĺpca s menom name . Declaration public MsAccessColumnSchema(string name) Parameters Type Name Description System.String name Meno stĺpca. Exceptions Type Condition System.ArgumentNullException Meno stĺpca name má hodnotu null . System.ArgumentException Meno stĺpca name nie je zadané: je prázdny reťazec, alebo reťazec bielych znakov. MsAccessColumnSchema(String, Boolean) Vytvorí inštanciu schémy stĺpca s menom name a s povolením NULL hodnôt podľa allowNull . Declaration public MsAccessColumnSchema(string name, bool allowNull) Parameters Type Name Description System.String name Meno stĺpca. System.Boolean allowNull Určuje, či stĺpec má povolenú NULL hodnotu. Exceptions Type Condition System.ArgumentNullException Meno stĺpca name má hodnotu null . System.ArgumentException Meno stĺpca name nie je zadané: je prázdny reťazec, alebo reťazec bielych znakov. MsAccessColumnSchema(String, Boolean, Object) Vytvorí inštanciu schémy stĺpca s menom name a ostatnými hodnotami. Declaration public MsAccessColumnSchema(string name, bool allowNull, object defaultValue) Parameters Type Name Description System.String name Meno stĺpca. System.Boolean allowNull Určuje, či stĺpec má povolenú NULL hodnotu. System.Object defaultValue Predvolená hodnota stĺpca. Exceptions Type Condition System.ArgumentNullException Meno stĺpca name má hodnotu null . System.ArgumentException Meno stĺpca name nie je zadané: je prázdny reťazec, alebo reťazec bielych znakov. MsAccessColumnSchema(String, Boolean, Object, Int32) Vytvorí inštanciu schémy stĺpca s menom name a ostatnými hodnotami. Declaration public MsAccessColumnSchema(string name, bool allowNull, object defaultValue, int size) Parameters Type Name Description System.String name Meno stĺpca. System.Boolean allowNull Určuje, či stĺpec má povolenú NULL hodnotu. System.Object defaultValue Predvolená hodnota stĺpca. System.Int32 size Maximálna dĺžka textových stĺpcov. Ak je neobmedzená, hodnota je 0 . Exceptions Type Condition System.ArgumentNullException Meno stĺpca name má hodnotu null . System.ArgumentException Meno stĺpca name nie je zadané: je prázdny reťazec, alebo reťazec bielych znakov. Properties DbType Declaration public override DbType DbType { get; } Property Value Type Description System.Data.DbType Overrides ColumnSchema.DbType OleDbType Dátový typ stĺpca ako hodnota enumerátu OleDbType . Declaration public OleDbType OleDbType { get; set; } Property Value Type Description System.Data.OleDb.OleDbType Methods SetParameterDbType(IDataParameter) Declaration public override void SetParameterDbType(IDataParameter param) Parameters Type Name Description System.Data.IDataParameter param Overrides ColumnSchema.SetParameterDbType(IDataParameter) Exceptions Type Condition System.ArgumentException Hodnota param nie je typu System.Data.OleDb.OleDbParameter . ToString() Vráti reťazec, popisujúci stĺpec. Declaration public override string ToString() Returns Type Description System.String Reťazec, napríklad: \"Column Invoices.Id: OleDbType = Integer, AllowNull = False, DefaultValue = NULL, Size = 0\" Overrides ColumnSchema.ToString()"
  },
  "api/Kros.Utils/Kros.Utils.html": {
    "href": "api/Kros.Utils/Kros.Utils.html",
    "title": "Namespace Kros.Utils | Kros.Libs",
    "keywords": "Namespace Kros.Utils Classes DateTimeProvider Trieda sprístupňujúca dátum a čas, aby bolo možné \"fixovať\" čas v testoch InjectActualDateTime(DateTime) . Check Pomocná trieda na kontrolu argumentov metód. Každá kontrola, ak zlyhá, vyvolá nejaký druh výnimky ArgumentException ( System.ArgumentException , System.ArgumentNullException , System.ArgumentOutOfRangeException ). Suspender Trieda, umožňujúca jednoduché pozastavenie práce. Pozastaviť prácu ( Suspend() je možné viackrát/vnorene. V takom prípade je nutné obnoviť prácu toľkokrát, koľkokrát bola pozastavená. Ideálne je používať using blok. Interfaces IDiContainer Interface for DI (Dependency Injection) container."
  },
  "api/Kros.Utils/Kros.Data.Schema.ISchemaCacheKeyGenerator.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.ISchemaCacheKeyGenerator.html",
    "title": "Interface ISchemaCacheKeyGenerator | Kros.Libs",
    "keywords": "Interface ISchemaCacheKeyGenerator Generátor kľúča pre spojenie na databázu. Používa ho DatabaseSchemaCache . Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public interface ISchemaCacheKeyGenerator Methods GenerateKey(Object) Vygeneruje kľúč pre spojenie connection . Declaration string GenerateKey(object connection) Parameters Type Name Description System.Object connection Spojenie na databázu. Returns Type Description System.String Reťazec."
  },
  "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.MsAccessIdGenerator.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.MsAccessIdGenerator.html",
    "title": "Class MsAccessIdGenerator | Kros.Libs",
    "keywords": "Class MsAccessIdGenerator Generátor unikátnych identifikátorov pre Ms Access. Inheritance System.Object IdGeneratorBase MsAccessIdGenerator Implements IIdGenerator Inherited Members IdGeneratorBase.TableName IdGeneratorBase.BatchSize IdGeneratorBase.Connection IdGeneratorBase.GetNext() IdGeneratorBase.Dispose(Boolean) IdGeneratorBase.Dispose() Namespace : Kros.Data.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessIdGenerator : IdGeneratorBase, IIdGenerator, IDisposable Remarks Štandardne sa nevytvára priamo, ale cez MsAccessIdGeneratorFactory . Examples Constructors MsAccessIdGenerator(OleDbConnection, String, Int32) Konštruktor. Declaration public MsAccessIdGenerator(OleDbConnection connection, string tableName, int batchSize) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Connection, ktorá sa použije pre získavanie unikátnych identifikátorov. System.String tableName Názov tabuľky, pre ktorú generujem identifikátory. System.Int32 batchSize Veľkosť dávky, ktorú si zarezervuje dopredu. MsAccessIdGenerator(String, String, Int32) Konštruktor. Declaration public MsAccessIdGenerator(string connectionString, string tableName, int batchSize) Parameters Type Name Description System.String connectionString Connection string, ktorý sa použije na vytvorenie conenction pre získavanie unikátnych identifikátorov. System.String tableName Názov tabuľky, pre ktorú generujem identifikátory. System.Int32 batchSize Veľkosť dávky, ktorú si zarezervuje dopredu. Methods CreateConnection(String) Declaration protected override DbConnection CreateConnection(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description System.Data.Common.DbConnection Overrides IdGeneratorBase.CreateConnection(String) GetIdStoreTableCreationScript() Získanie scriptu na vytvorenie IdStore tabuľky. Declaration public static string GetIdStoreTableCreationScript() Returns Type Description System.String GetNewIdFromDbCore() Declaration protected override int GetNewIdFromDbCore() Returns Type Description System.Int32 Overrides IdGeneratorBase.GetNewIdFromDbCore() InitDatabaseForIdGenerator() Declaration public override void InitDatabaseForIdGenerator() Overrides IdGeneratorBase.InitDatabaseForIdGenerator() Implements IIdGenerator See Also IdGeneratorFactories MsAccessIdGeneratorFactory"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.MsAccessIdGeneratorFactory.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.MsAccessIdGeneratorFactory.html",
    "title": "Class MsAccessIdGeneratorFactory | Kros.Libs",
    "keywords": "Class MsAccessIdGeneratorFactory Interface popisujúci factory triedu, ktorá vie vytvoriť inštanciu MsAccessIdGenerator . Inheritance System.Object MsAccessIdGeneratorFactory Implements IIdGeneratorFactory Namespace : Kros.Data.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessIdGeneratorFactory : IIdGeneratorFactory Remarks Štandardne sa nevytvára priamo ale cez IdGeneratorFactories . Examples Constructors MsAccessIdGeneratorFactory(OleDbConnection) Initializes a new instance of the MsAccessIdGeneratorFactory class. Declaration public MsAccessIdGeneratorFactory(OleDbConnection connection) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Connection, ktorá sa použije pre získavanie unikátnych identifikátorov. MsAccessIdGeneratorFactory(String) Initializes a new instance of the MsAccessIdGeneratorFactory class. Declaration public MsAccessIdGeneratorFactory(string connectionString) Parameters Type Name Description System.String connectionString Connection string, ktorý sa použije na vytvorenie conenction pre získavanie unikátnych identifikátorov. Methods GetGenerator(String) Declaration public IIdGenerator GetGenerator(string tableName) Parameters Type Name Description System.String tableName Returns Type Description IIdGenerator GetGenerator(String, Int32) Declaration public IIdGenerator GetGenerator(string tableName, int batchSize) Parameters Type Name Description System.String tableName System.Int32 batchSize Returns Type Description IIdGenerator Register() Registrovanie factory metód na vytvorenie inštancie do IdGeneratorFactories . Declaration public static void Register() Implements IIdGeneratorFactory See Also MsAccessIdGenerator IdGeneratorFactories"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.html",
    "title": "Namespace Kros.Data.MsAccess | Kros.Libs",
    "keywords": "Namespace Kros.Data.MsAccess Classes Extensions Všeobecné rozšírenia pre MS Access. MsAccessDataHelper Všeobecné pomocné metódy pre praácu s MS Access. MsAccessIdGenerator Generátor unikátnych identifikátorov pre Ms Access. MsAccessIdGeneratorFactory Interface popisujúci factory triedu, ktorá vie vytvoriť inštanciu MsAccessIdGenerator . Enums MsAccessErrorCode Chybové kódy Microsoft JET. ProviderType Typ MS Access providera, ktorý sa má použiť."
  },
  "api/Kros.KORM/Kros.KORM.Database.html": {
    "href": "api/Kros.KORM/Kros.KORM.Database.html",
    "title": "Class Database | Kros.Libs",
    "keywords": "Class Database Represent access to ORM features. For executing query and materializing models see: IDatabase IQuery<T> Inheritance System.Object Database Implements IDatabase Namespace : Kros.KORM Assembly : Kros.KORM.dll Syntax public class Database : IDatabase, IDisposable Constructors Database(ConnectionStringSettings) Initializes a new instance of the Database class. Declaration public Database(ConnectionStringSettings connectionString) Parameters Type Name Description System.Configuration.ConnectionStringSettings connectionString The active connection. Database(ConnectionStringSettings, IQueryProviderFactory) Initializes a new instance of the Database class. Declaration public Database(ConnectionStringSettings connectionString, IQueryProviderFactory queryProviderFactory) Parameters Type Name Description System.Configuration.ConnectionStringSettings connectionString The connection string settings. IQueryProviderFactory queryProviderFactory The query provider factory, which know create query provider. Database(DbConnection) Initializes a new instance of the Database class. Declaration public Database(DbConnection activeConnection) Parameters Type Name Description System.Data.Common.DbConnection activeConnection The active connection. Database(DbConnection, IModelMapper) Initializes a new instance of the Database class. Declaration public Database(DbConnection activeConnection, IModelMapper modelMapper) Parameters Type Name Description System.Data.Common.DbConnection activeConnection The active connection. IModelMapper modelMapper Model mapper, which will be used for mapping Object to Relation database. Database(DbConnection, IQueryProviderFactory) Initializes a new instance of the Database class. Declaration public Database(DbConnection activeConnection, IQueryProviderFactory queryProviderFactory) Parameters Type Name Description System.Data.Common.DbConnection activeConnection The active connection. IQueryProviderFactory queryProviderFactory The query provider factory, which know create query provider. Database(String, String) Initializes a new instance of the Database class. Declaration public Database(string connectionString, string adoClientName) Parameters Type Name Description System.String connectionString Connection string. System.String adoClientName Ado client name. (System.Data.SqlClient/System.Data.OleDb) Properties DatabaseMapper Gets the database mapper, which has mapping information for all tables in database Declaration public static IDatabaseMapper DatabaseMapper { get; } Property Value Type Description IDatabaseMapper DbProviderFactory Returns DbProviderFactory for current provider. Declaration public DbProviderFactory DbProviderFactory { get; } Property Value Type Description System.Data.Common.DbProviderFactory DefaultModelFactory Gets or sets the default model factory, which will be used for instanting and filling object from Ado. Declaration public static IModelFactory DefaultModelFactory { get; set; } Property Value Type Description IModelFactory The default model factory. DefaultModelMapper Gets or sets the default model mapper, which will be used for mapping Object to Relation database. Declaration public static IModelMapper DefaultModelMapper { get; set; } Property Value Type Description IModelMapper The default model mapper. Log Gets or sets the logging delegate. Declaration public static Action<string> Log { get; set; } Property Value Type Description System.Action < System.String > ModelBuilder Gets the model builder for materializing data from ado to models. Declaration public IModelBuilder ModelBuilder { get; } Property Value Type Description IModelBuilder Methods BeginTransaction() Begins the transaction. Declaration public ITransaction BeginTransaction() Returns Type Description ITransaction ITransaction wrapping access to the underlying store's transaction object. BeginTransaction(IsolationLevel) Begins the transaction using the specified isolation level. Declaration public ITransaction BeginTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel The database isolation level with which the underlying store transaction will be created. Returns Type Description ITransaction ITransaction wrapping access to the underlying store's transaction object. CreateBulkInsert() Creates instance of IBulkInsert . Declaration public IBulkInsert CreateBulkInsert() Returns Type Description IBulkInsert Instance of IBulkInsert . CreateBulkUpdate() Creates instance of IBulkUpdate . Declaration public IBulkUpdate CreateBulkUpdate() Returns Type Description IBulkUpdate Instance of IBulkUpdate . Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing ExecuteNonQuery(String) Executes arbitrary query. Declaration public int ExecuteNonQuery(string query) Parameters Type Name Description System.String query Arbitrary SQL query. It should not be SELECT query. Returns Type Description System.Int32 Number of affected rows. ExecuteNonQuery(String, CommandParameterCollection) Executes arbitrary query with parameters. Declaration public int ExecuteNonQuery(string query, CommandParameterCollection parameters) Parameters Type Name Description System.String query Arbitrary SQL query. It should not be SELECT query. CommandParameterCollection parameters The query parameters. Returns Type Description System.Int32 Number of affected rows. Exceptions Type Condition System.ArgumentException Value of any of the parameters is NULL and its data type ( DataType ) is not set. ExecuteScalar(String) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration public string ExecuteScalar(string query) Parameters Type Name Description System.String query Arbitrary SQL query. Returns Type Description System.String The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. ExecuteScalar(String, Object[]) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration public string ExecuteScalar(string query, params object[] args) Parameters Type Name Description System.String query Arbitrary SQL query. System.Object [] args The query parameters. Returns Type Description System.String The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. ExecuteScalar<TResult>(String) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration public TResult? ExecuteScalar<TResult>(string query) where TResult : struct Parameters Type Name Description System.String query Arbitrary SQL query. Returns Type Description System.Nullable <TResult> The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. Type Parameters Name Description TResult ExecuteScalar<TResult>(String, Object[]) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration public TResult? ExecuteScalar<TResult>(string query, params object[] args) where TResult : struct Parameters Type Name Description System.String query Arbitrary SQL query. System.Object [] args The query parameters. Returns Type Description System.Nullable <TResult> The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. Type Parameters Name Description TResult ExecuteStoredProcedure<TResult>(String) Declaration public TResult ExecuteStoredProcedure<TResult>(string storedProcedureName) Parameters Type Name Description System.String storedProcedureName Returns Type Description TResult Type Parameters Name Description TResult ExecuteStoredProcedure<TResult>(String, CommandParameterCollection) Declaration public TResult ExecuteStoredProcedure<TResult>(string storedProcedureName, CommandParameterCollection parameters) Parameters Type Name Description System.String storedProcedureName CommandParameterCollection parameters Returns Type Description TResult Type Parameters Name Description TResult Query<T>() Gets the query builder for T creating and executing query for obtains models. Declaration public IQuery<T> Query<T>() Returns Type Description IQuery <T> Type Parameters Name Description T Type of model, for which querying. Implements IDatabase See Also IModelBuilder"
  },
  "api/Kros.Utils/Kros.Data.Schema.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.html",
    "title": "Namespace Kros.Data.Schema | Kros.Libs",
    "keywords": "Namespace Kros.Data.Schema Classes ColumnSchema Schéma stĺpca databázovej tabuľky. ColumnSchema.DefaultValues Predvolené hodnoty stĺpcov pre jednotlivé dátové typy: ColumnSchemaCollection Zoznam stĺpcov tabuľky TableSchema . DatabaseSchema Schéma databázy. DatabaseSchemaCache Implementácia IDatabaseSchemaCache . Po pridaní loader-ov umožňuje načítavať schému databázy. Načítanie schémy je pomalá záležitosť a preto sa načítaná schéma kešuje. Pri ďalšej požiadavke na rovnakú schému sa už nenačíta z databázy, ale je vrátená z keše. DatabaseSchemaLoader Pomocná trieda na jednoduché načítavanie schémy databáz. Obsahuje zoznam loader-ov pre konkrétne databázy a tak je možné použiť ju transparentne pre ľubovoľný typ databázy. Pri požiadavke je vždy načítaná aktuálna schéma, tzn. schémy sa nekešujú. DefaultValueParsers Štandardné parsery pre predvolené hodnoty stĺpcov databáz. Predvolené hodnoty sú v databáze uložené ako reťazec a je potrebné ich konvertovať na typ daného stĺpca. Ak sa hodnotu nepodarilo skonvertovať na určený typ, vždy je vrátená hodnota null . ForeignKeySchema Schéma cudzieho kľúča tabuľky. ForeignKeySchemaCollection Zoznam cudzích kľúčov tabuľky TableSchema . IndexColumnSchema Schéma stĺpca v indexe tabuľky. IndexColumnSchemaCollection Zoznam stĺpcov indexu tabuľky. IndexSchema Schéma indexu tabuľky. IndexSchemaCollection Zoznam indexov tabuľky TableSchema . TableSchema Schéma databázovej tabuľky. TableSchemaCollection Zoznam tabuliek databázy. Interfaces IDatabaseSchemaCache Rozhranie pre triedy načítavajúce a kešujúce schému databázy. IDatabaseSchemaLoader Rozhranie pre triedy, načítavajúce schému databázy. IDatabaseSchemaLoader<T> Rozhranie pre triedy, načítavajúce schému databázy. ISchemaCacheKeyGenerator Generátor kľúča pre spojenie na databázu. Používa ho DatabaseSchemaCache . ISchemaCacheKeyGenerator<T> Generátor kľúča pre spojenie na databázu. Používa ho DatabaseSchemaCache . Enums ForeignKeyRule Pravidlo cudzieho kľúča - ako sa zachovať k detským záznamom po zmenení/zmazaní hlavného nadradeného. IndexType Typ indexu tabuľky. SortOrder Zoradenie indexového stĺpca. Delegates DefaultValueParsers.ParseDefaultValueFunction Hlavička funkcie, ktorá parsuje predvolenú hodnotu stĺpca."
  },
  "api/Kros.Utils/Kros.Data.BulkActions.BulkActionDataReader.html": {
    "href": "api/Kros.Utils/Kros.Data.BulkActions.BulkActionDataReader.html",
    "title": "Class BulkActionDataReader | Kros.Libs",
    "keywords": "Class BulkActionDataReader Obálka, ktorá jednoduché rozhranie IBulkActionDataReader , zverejní ako komplikovanejší System.Data.IDataReader . Inheritance System.Object System.MarshalByRefObject System.Data.Common.DbDataReader BulkActionDataReader Namespace : Kros.Data.BulkActions Assembly : Kros.Utils.dll Syntax public class BulkActionDataReader : DbDataReader, IDataReader, IDisposable, IDataRecord, IEnumerable Constructors BulkActionDataReader(IBulkActionDataReader) Vytvorí System.Data.IDataReader nad zadaným reader-om reader . Declaration public BulkActionDataReader(IBulkActionDataReader reader) Parameters Type Name Description IBulkActionDataReader reader Vstupný reader. Exceptions Type Condition System.ArgumentNullException reader má hodnotu null . Properties Depth Declaration public override int Depth { get; } Property Value Type Description System.Int32 Overrides System.Data.Common.DbDataReader.Depth FieldCount Počet stĺpcov v dátovom riadku. Declaration public override int FieldCount { get; } Property Value Type Description System.Int32 Overrides System.Data.Common.DbDataReader.FieldCount HasRows Declaration public override bool HasRows { get; } Property Value Type Description System.Boolean Overrides System.Data.Common.DbDataReader.HasRows IsClosed Declaration public override bool IsClosed { get; } Property Value Type Description System.Boolean Overrides System.Data.Common.DbDataReader.IsClosed Item[Int32] Declaration public override object this[int i] { get; } Parameters Type Name Description System.Int32 i Property Value Type Description System.Object Overrides System.Data.Common.DbDataReader.Item[System.Int32] Item[String] Declaration public override object this[string name] { get; } Parameters Type Name Description System.String name Property Value Type Description System.Object Overrides System.Data.Common.DbDataReader.Item[System.String] RecordsAffected Declaration public override int RecordsAffected { get; } Property Value Type Description System.Int32 Overrides System.Data.Common.DbDataReader.RecordsAffected Methods Close() Declaration public override void Close() Overrides System.Data.Common.DbDataReader.Close() GetBoolean(Int32) Declaration public override bool GetBoolean(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Boolean Overrides System.Data.Common.DbDataReader.GetBoolean(System.Int32) GetByte(Int32) Declaration public override byte GetByte(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Byte Overrides System.Data.Common.DbDataReader.GetByte(System.Int32) GetBytes(Int32, Int64, Byte[], Int32, Int32) Declaration public override long GetBytes(int i, long fieldOffset, byte[] buffer, int bufferoffset, int length) Parameters Type Name Description System.Int32 i System.Int64 fieldOffset System.Byte [] buffer System.Int32 bufferoffset System.Int32 length Returns Type Description System.Int64 Overrides System.Data.Common.DbDataReader.GetBytes(System.Int32, System.Int64, System.Byte[], System.Int32, System.Int32) GetDataTypeName(Int32) Declaration public override string GetDataTypeName(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.String Overrides System.Data.Common.DbDataReader.GetDataTypeName(System.Int32) GetDateTime(Int32) Declaration public override DateTime GetDateTime(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.DateTime Overrides System.Data.Common.DbDataReader.GetDateTime(System.Int32) GetDecimal(Int32) Declaration public override decimal GetDecimal(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Decimal Overrides System.Data.Common.DbDataReader.GetDecimal(System.Int32) GetDouble(Int32) Declaration public override double GetDouble(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Double Overrides System.Data.Common.DbDataReader.GetDouble(System.Int32) GetEnumerator() Declaration public override IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator Overrides System.Data.Common.DbDataReader.GetEnumerator() GetFieldType(Int32) Declaration public override Type GetFieldType(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Type Overrides System.Data.Common.DbDataReader.GetFieldType(System.Int32) GetFloat(Int32) Declaration public override float GetFloat(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Single Overrides System.Data.Common.DbDataReader.GetFloat(System.Int32) GetGuid(Int32) Declaration public override Guid GetGuid(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Guid Overrides System.Data.Common.DbDataReader.GetGuid(System.Int32) GetChar(Int32) Declaration public override char GetChar(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Char Overrides System.Data.Common.DbDataReader.GetChar(System.Int32) GetChars(Int32, Int64, Char[], Int32, Int32) Declaration public override long GetChars(int i, long fieldoffset, char[] buffer, int bufferoffset, int length) Parameters Type Name Description System.Int32 i System.Int64 fieldoffset System.Char [] buffer System.Int32 bufferoffset System.Int32 length Returns Type Description System.Int64 Overrides System.Data.Common.DbDataReader.GetChars(System.Int32, System.Int64, System.Char[], System.Int32, System.Int32) GetInt16(Int32) Declaration public override short GetInt16(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Int16 Overrides System.Data.Common.DbDataReader.GetInt16(System.Int32) GetInt32(Int32) Declaration public override int GetInt32(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Int32 Overrides System.Data.Common.DbDataReader.GetInt32(System.Int32) GetInt64(Int32) Declaration public override long GetInt64(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Int64 Overrides System.Data.Common.DbDataReader.GetInt64(System.Int32) GetName(Int32) Vráti názov stĺpca. Declaration public override string GetName(int i) Parameters Type Name Description System.Int32 i Index hľadaného stĺpca. Returns Type Description System.String Meno stĺpca. Overrides System.Data.Common.DbDataReader.GetName(System.Int32) Exceptions Type Condition System.IndexOutOfRangeException Zadaný index bol mimo rozsah stĺpcov 0 až FieldCount . GetOrdinal(String) Vráti index stĺpca s menom name . Declaration public override int GetOrdinal(string name) Parameters Type Name Description System.String name Meno hľadaného stĺpca. Returns Type Description System.Int32 Index hľadaného stĺpca. Overrides System.Data.Common.DbDataReader.GetOrdinal(System.String) GetSchemaTable() Declaration public override DataTable GetSchemaTable() Returns Type Description System.Data.DataTable Overrides System.Data.Common.DbDataReader.GetSchemaTable() GetString(Int32) Declaration public override string GetString(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.String Overrides System.Data.Common.DbDataReader.GetString(System.Int32) GetValue(Int32) Vráti hodnotu zadaného stĺpca. Declaration public override object GetValue(int i) Parameters Type Name Description System.Int32 i Index stĺpca, ktorého hodnota sa vracia. Returns Type Description System.Object Objekt - hodnota daného stĺpca. Overrides System.Data.Common.DbDataReader.GetValue(System.Int32) Exceptions Type Condition System.IndexOutOfRangeException Zadaný index bol mimo rozsah stĺpcov 0 až FieldCount . GetValues(Object[]) Declaration public override int GetValues(object[] values) Parameters Type Name Description System.Object [] values Returns Type Description System.Int32 Overrides System.Data.Common.DbDataReader.GetValues(System.Object[]) IsDBNull(Int32) Declaration public override bool IsDBNull(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Boolean Overrides System.Data.Common.DbDataReader.IsDBNull(System.Int32) NextResult() Declaration public override bool NextResult() Returns Type Description System.Boolean Overrides System.Data.Common.DbDataReader.NextResult() Read() Posunie reader na ďalší záznam. Declaration public override bool Read() Returns Type Description System.Boolean true , ak existuje ďalší záznam a reader bol posunutý, false ak už ďalší záznam neexistuje. Overrides System.Data.Common.DbDataReader.Read()"
  },
  "api/Kros.Utils/Kros.Data.IIdGeneratorFactory.html": {
    "href": "api/Kros.Utils/Kros.Data.IIdGeneratorFactory.html",
    "title": "Interface IIdGeneratorFactory | Kros.Libs",
    "keywords": "Interface IIdGeneratorFactory Interface popisujúci factory triedu, ktorá vie vytvoriť inštanciu IIdGenerator . Namespace : Kros.Data Assembly : Kros.Utils.dll Syntax public interface IIdGeneratorFactory Examples Methods GetGenerator(String) Vytvorí inštanciu IIdGenerator pre generovanie unikátnych identifikátorov pre tabuľku tableName . Declaration IIdGenerator GetGenerator(string tableName) Parameters Type Name Description System.String tableName Názov tabuľky pre ktorú sa budú generovať identifikátory. Returns Type Description IIdGenerator Inštancia IIdGenerator . GetGenerator(String, Int32) Vytvorí inštanciu IIdGenerator pre generovanie unikátnych identifikátorov pre tabuľku tableName . Nastaví mu aj dávku, ktorú ma rezervovať. (aby v prípade väčšieho počtu nemusel ísť zakaždým do databázy) Declaration IIdGenerator GetGenerator(string tableName, int batchSize) Parameters Type Name Description System.String tableName Názov tabuľky pre ktorú sa budú generovať identifikátory. System.Int32 batchSize Veľkosť dávky, ktorú si zarezervuje dopredu. Returns Type Description IIdGenerator Inštancia IIdGenerator . See Also SqlServerIdGeneratorFactory IdGeneratorFactories"
  },
  "api/Kros.Utils/Kros.Data.Schema.IndexSchema.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.IndexSchema.html",
    "title": "Class IndexSchema | Kros.Libs",
    "keywords": "Class IndexSchema Schéma indexu tabuľky. Inheritance System.Object IndexSchema Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class IndexSchema Constructors IndexSchema(String) Vytvorí schmému indexu typu Index s menom indexName . Declaration public IndexSchema(string indexName) Parameters Type Name Description System.String indexName Meno indexu. Musí byť zadané. Exceptions Type Condition System.ArgumentNullException Hodnota indexName je null . System.ArgumentException Hodnota indexName je prázdny reťazec, alebo reťazec bielych znakov. IndexSchema(String, IndexType) Vytvorí schmému indexu typu indexType s menom indexName . Declaration public IndexSchema(string indexName, IndexType indexType) Parameters Type Name Description System.String indexName Meno indexu. Musí byť zadané. IndexType indexType Typ indexu. Exceptions Type Condition System.ArgumentNullException Hodnota indexName je null . System.ArgumentException Hodnota indexName je prázdny reťazec, alebo reťazec bielych znakov. IndexSchema(String, IndexType, Boolean) Vytvorí schmému indexu typu indexType s menom indexName a nastavením či je clustered . Declaration public IndexSchema(string indexName, IndexType indexType, bool clustered) Parameters Type Name Description System.String indexName Meno indexu. Musí byť zadané. IndexType indexType Typ indexu. System.Boolean clustered Určuje, či je index CLUSTERED . Exceptions Type Condition System.ArgumentNullException Hodnota indexName je null . System.ArgumentException Hodnota indexName je prázdny reťazec, alebo reťazec bielych znakov. Properties Columns Zoznam stĺpcov indexu. Declaration public IndexColumnSchemaCollection Columns { get; } Property Value Type Description IndexColumnSchemaCollection IndexType Typ indexu. Declaration public IndexType IndexType { get; } Property Value Type Description IndexType Name Meno indexu. Ak index už patrí nejakej tabuľke (hodnota Table je nastavená), meno indexu nie je možné zmeniť. V takom prípade je vyvolaná výnimka System.InvalidOperationException . Declaration public string Name { get; set; } Property Value Type Description System.String Table Tabuľka, ktorej index patrí. Declaration public TableSchema Table { get; } Property Value Type Description TableSchema Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Kros.Utils/Kros.Data.SqlServer.html": {
    "href": "api/Kros.Utils/Kros.Data.SqlServer.html",
    "title": "Namespace Kros.Data.SqlServer | Kros.Libs",
    "keywords": "Namespace Kros.Data.SqlServer Classes SqlServerIdGenerator Generátor unikátnych identifikátorov pre sql server. SqlServerIdGeneratorFactory Interface popisujúci factory triedu, ktorá vie vytvoriť inštanciu SqlServerIdGenerator . Enums SqlServerErrorCode Chybové kódy Microsoft Sql Server-a."
  },
  "api/Kros.Utils/Kros.Data.html": {
    "href": "api/Kros.Utils/Kros.Data.html",
    "title": "Namespace Kros.Data | Kros.Libs",
    "keywords": "Namespace Kros.Data Classes ConnectionHelper Pomocná trieda pre otváranie spojenia na databázu. Trieda pri použití spojenie otvorí, ak je to potrebné a zase zatvorí, ak ho otvorila. V prípade, že spojenie už otvorené bolo, nerobí nič. DataExtensions Rozne rozšírenia dátových tried. IdGeneratorBase Základná trieda, ktorú stači zdediť aby sme mohli jednoduchšie vytvárať implementácie IIdGenerator . Stará sa o dispose connection. IdGeneratorFactories Reprezentuje množinu registrovaných IIdGeneratorFactory . Umožňuje ich registráciu a získavanie. Interfaces IIdGenerator Interfejs popisujúci tiedu, ktorá generuje unikátne identifikátory pre záznamy v tabuľke. IIdGeneratorFactory Interface popisujúci factory triedu, ktorá vie vytvoriť inštanciu IIdGenerator ."
  },
  "api/Kros.Utils/Kros.Utils.Suspender.html": {
    "href": "api/Kros.Utils/Kros.Utils.Suspender.html",
    "title": "Class Suspender | Kros.Libs",
    "keywords": "Class Suspender Trieda, umožňujúca jednoduché pozastavenie práce. Pozastaviť prácu ( Suspend() je možné viackrát/vnorene. V takom prípade je nutné obnoviť prácu toľkokrát, koľkokrát bola pozastavená. Ideálne je používať using blok. Inheritance System.Object Suspender ConnectionHelper Namespace : Kros.Utils Assembly : Kros.Utils.dll Syntax public class Suspender Remarks Vhodné použitie je napríklad pri inicialziáciách objektov. Počas inicializácie je častokrát potrebné nevykonávať určité funkcie. Rieši sa to príznakom, či beží inicializácia. Trieda Suspender zapúzdruje udržiavanie tohto príznaku, pričom je možné ho nastavovať viackrát za sebou - vnorene. Examples Properties IsSuspended Vráti príznak, či je práca pozastavená ( true ), alebo nie ( false ). Declaration public bool IsSuspended { get; } Property Value Type Description System.Boolean Methods ResumeCore() Metóda sa zavolá pri poslednom volaní Resume , tzn. pri zmene stavu IsSuspended z true na false . Declaration protected virtual void ResumeCore() Remarks Metóda je určená pre vlastné suspender-y, ktoré dedia z tejto triedy. V jej implementácii si vlastný suspender spraví potrebné veci pri obnovení stavu. Metóda sa volá iba raz, pri poslednom obnovení, tzn. až posledné volanie Resume zavolá ResumeCore() . Metóda sa volá po zmene stavu suspendera, čiže hodnota IsSuspended počas jej vykonávania je false . Suspend() Pozastaví prácu. Príznak IsSuspended je nastavený na true . Ak je práca pozastavená viackrát, je potrebné ju aj rovnaký počet krát obnoviť. Declaration public IDisposable Suspend() Returns Type Description System.IDisposable Vráti objekt, ktorého uvoľnením ( Dispose() ) sa práca obnoví. Vhodné je používať using blok. Examples SuspendCore() Metóda sa zavolá pri prvom volaní Suspend() , tzn. pri zmene stavu IsSuspended z false na true . Declaration protected virtual void SuspendCore() Remarks Metóda je určená pre vlastné suspender-y, ktoré dedia z tejto triedy. V jej implementácii si vlastný suspender spraví potrebné veci pri suspendovaní. Metóda sa volá iba pri prvom suspendovaní, tzn. každé ďalšie volanie Suspend() už nevolá SuspendCore() . Metóda sa volá pred zmenou stavu suspendera, čiže hodnota IsSuspended počas jej vykonávania je false ."
  },
  "api/Kros.KORM.MsAccess/Kros.KORM.Query.MsAccess.html": {
    "href": "api/Kros.KORM.MsAccess/Kros.KORM.Query.MsAccess.html",
    "title": "Namespace Kros.KORM.Query.MsAccess | Kros.Libs",
    "keywords": "Namespace Kros.KORM.Query.MsAccess Classes MsAccessQueryProvider Provider, which know execute query for MsAccess. MsAccessQueryProviderFactory Factory, which know create MsAccess query provider."
  },
  "api/Kros.Utils/Kros.Data.BulkActions.html": {
    "href": "api/Kros.Utils/Kros.Data.BulkActions.html",
    "title": "Namespace Kros.Data.BulkActions | Kros.Libs",
    "keywords": "Namespace Kros.Data.BulkActions Classes BulkActionDataReader Obálka, ktorá jednoduché rozhranie IBulkActionDataReader , zverejní ako komplikovanejší System.Data.IDataReader . BulkUpdateBase Spoločný predok pre bulk update. EnumerableDataReader<T> Implementácia rozhrania IBulkActionDataReader nad ľubovoľným zoznamom objektov. Interfaces IBulkActionDataReader Rozhranie pre zdroj dát pre IBulkInsert . IBulkInsert Rozhranie pre rýchle hromadné vkladanie dát do databázy. IBulkUpdate Rozhranie pre rýchlu hromadnú editáciu dát v databáze."
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.html",
    "title": "Namespace Kros.Data.Schema.SqlServer | Kros.Libs",
    "keywords": "Namespace Kros.Data.Schema.SqlServer Classes SqlServerCacheKeyGenerator Generátor kľúča pre SQL Server databázu. SqlServerColumnSchema Schéma stĺpca tabuľky pre SQL Server. SqlServerParseDefaultValueEventArgs Argumenty pre udalosť ParseDefaultValue . SqlServerSchemaLoader Implementácia IDatabaseSchemaLoader<T> , ktorá načítava schému SQL Server databáz. SqlServerSchemaLoader.ColumnSetColumnsSchemaNames SqlServerSchemaLoader.ColumnsSchemaNames SqlServerSchemaLoader.DatabasesSchemaNames SqlServerSchemaLoader.ForeignKeysSchemaNames SqlServerSchemaLoader.IndexColumnsSchemaNames SqlServerSchemaLoader.IndexesSchemaNames SqlServerSchemaLoader.ProcedureParametersSchemaNames SqlServerSchemaLoader.ProceduresSchemaNames SqlServerSchemaLoader.SchemaNames SqlServerSchemaLoader.TablesSchemaNames SqlServerSchemaLoader.UserDefinedTypesSchemaNames SqlServerSchemaLoader.UsersSchemaNames SqlServerSchemaLoader.ViewColumnsSchemaNames SqlServerSchemaLoader.ViewsSchemaNames"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.BulkActions.MsAccess.MsAccessBulkInsert.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.BulkActions.MsAccess.MsAccessBulkInsert.html",
    "title": "Class MsAccessBulkInsert | Kros.Libs",
    "keywords": "Class MsAccessBulkInsert Trieda na hromadné vkladanie dát do MS Access tabuľky. Inheritance System.Object MsAccessBulkInsert Implements IBulkInsert Namespace : Kros.Data.BulkActions.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessBulkInsert : IBulkInsert, IDisposable Remarks Na pozadí sa využíva vkladanie dát z textového CSV súboru. Constructors MsAccessBulkInsert(OleDbConnection) Inicializuje novú inštanciu MsAccessBulkInsert použitím spojenia na databázu connection Declaration public MsAccessBulkInsert(OleDbConnection connection) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Spojenie na databázu, kam sa vložia dáta. Spojenie musí byť otvorené. MsAccessBulkInsert(OleDbConnection, OleDbTransaction) Inicializuje novú inštanciu MsAccessBulkInsert použitím spojenia na databázu connection a externej transakcie externalTransaction . Declaration public MsAccessBulkInsert(OleDbConnection connection, OleDbTransaction externalTransaction) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Spojenie na databázu, kam sa vložia dáta. Spojenie musí byť otvorené. Ak je na spojení spustená transakcia, musí byť zadaná v parametri externalTransaction . System.Data.OleDb.OleDbTransaction externalTransaction Externá transakcia, v ktorej hromadné vloženie prebehne. MsAccessBulkInsert(OleDbConnection, OleDbTransaction, Int32) Inicializuje novú inštanciu MsAccessBulkInsert použitím spojenia na databázu connection , externej transakcie externalTransaction , kódovaním CSV súboru csvFileCodePage . Declaration public MsAccessBulkInsert(OleDbConnection connection, OleDbTransaction externalTransaction, int csvFileCodePage) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Spojenie na databázu, kam sa vložia dáta. Spojenie musí byť otvorené. Ak je na spojení spustená transakcia, musí byť zadaná v parametri externalTransaction . System.Data.OleDb.OleDbTransaction externalTransaction Externá transakcia, v ktorej hromadné vloženie prebehne. System.Int32 csvFileCodePage Kódová stránka vstupného súboru. MsAccessBulkInsert(OleDbConnection, OleDbTransaction, Int32, Char) Inicializuje novú inštanciu MsAccessBulkInsert použitím spojenia na databázu connection , externej transakcie externalTransaction , kódovaním CSV súboru csvFileCodePage a oddeľovačom hodnôt v CSV súbore valueDelimiter . Declaration public MsAccessBulkInsert(OleDbConnection connection, OleDbTransaction externalTransaction, int csvFileCodePage, char valueDelimiter) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Spojenie na databázu, kam sa vložia dáta. Spojenie musí byť otvorené. Ak je na spojení spustená transakcia, musí byť zadaná v parametri externalTransaction . System.Data.OleDb.OleDbTransaction externalTransaction Externá transakcia, v ktorej hromadné vloženie prebehne. System.Int32 csvFileCodePage Kódová stránka vstupného súboru. System.Char valueDelimiter Oddeľovač dát vo vstupnom súbore. MsAccessBulkInsert(String) Inicializuje novú inštanciu MsAccessBulkInsert použitím spojenia na databázu connectionString . Declaration public MsAccessBulkInsert(string connectionString) Parameters Type Name Description System.String connectionString Spojenie na databázu, kam sa vložia dáta. Fields AnsiCodePage Kódová stránka ANSI. Declaration public const int AnsiCodePage = 2147483647 Field Value Type Description System.Int32 DefaultCodePage Predvolená kódová stránka vstupného súboru - UTF-8 . Declaration public const int DefaultCodePage = 65001 Field Value Type Description System.Int32 DefaultValueDelimiter Predvolený oddeľovať dát vo vstupnom súbore - čiarka ( , ). Declaration public const char DefaultValueDelimiter = ',' Field Value Type Description System.Char OemCodePage Kódová stránka OEM. Declaration public const int OemCodePage = 2147483646 Field Value Type Description System.Int32 Utf8CodePage Kódová stránka UTF-8. Declaration public const int Utf8CodePage = 65001 Field Value Type Description System.Int32 WindowsCentralEuropeCodePage Kódová stránka vstupného súboru - 1250 . Declaration public const int WindowsCentralEuropeCodePage = 1250 Field Value Type Description System.Int32 Properties BatchSize Počet riadkov v dávke, ktorá sa posiela do databázy. Ak je hodnota 0, veľkosť dávky nie je obmedzená. Declaration public int BatchSize { get; set; } Property Value Type Description System.Int32 Exceptions Type Condition System.ArgumentException Zadaná hodnota je záporná. BulkInsertTimeout MsAccessBulkInsert toto nastavenie nepoužíva. Declaration public int BulkInsertTimeout { get; set; } Property Value Type Description System.Int32 CodePage Kódová stránka vstupného súboru. Declaration public int CodePage { get; } Property Value Type Description System.Int32 Číslo. Columns Zoznam vkladaných stĺpcov. Declaration public MsAccessBulkInsertColumnCollection Columns { get; } Property Value Type Description MsAccessBulkInsertColumnCollection Zoznam stĺpcov MsAccessBulkInsertColumnCollection . Remarks Stĺpce musia byť v zozname v rovnakom poradí, ako sú uložené vo vstupnom súbore. DestinationTableName Meno cieľovej tabuľky v databáze. Declaration public string DestinationTableName { get; set; } Property Value Type Description System.String ExternalTransaction Externá transakcia, v ktorej sa vykoná vloženie dát. Declaration public OleDbTransaction ExternalTransaction { get; } Property Value Type Description System.Data.OleDb.OleDbTransaction ValueDelimiter Oddeľovač hodnôt v CSV súbore. Declaration public char ValueDelimiter { get; } Property Value Type Description System.Char Methods Dispose() Uvoľní všetky zdroje triedy MsAccessBulkInsert . Declaration public void Dispose() Dispose(Boolean) Uvoľní všetky zdroje používané MsAccessBulkInsert . Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Insert(IBulkActionDataReader) Vloží všetky dáta zo zdroja reader . Declaration public void Insert(IBulkActionDataReader reader) Parameters Type Name Description IBulkActionDataReader reader Zdroj dát. Insert(DataTable) Vloží všetky riadky z tabuľky table . Declaration public void Insert(DataTable table) Parameters Type Name Description System.Data.DataTable table Zdrojové dáta. Insert(IDataReader) Vloží všetky dáta zo zdroja reader . Declaration public void Insert(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Zdroj dát. Implements IBulkInsert"
  },
  "api/Kros.KORM/Kros.KORM.IDatabase.html": {
    "href": "api/Kros.KORM/Kros.KORM.IDatabase.html",
    "title": "Interface IDatabase | Kros.Libs",
    "keywords": "Interface IDatabase Interface, which describe class for access to ORM features. For executing query and materializing models see: IDatabase IQuery<T> Namespace : Kros.KORM Assembly : Kros.KORM.dll Syntax public interface IDatabase : IDisposable Examples Properties DbProviderFactory Returns DbProviderFactory for current provider. Declaration DbProviderFactory DbProviderFactory { get; } Property Value Type Description System.Data.Common.DbProviderFactory ModelBuilder Gets the model builder for materializing data from ado to models. Declaration IModelBuilder ModelBuilder { get; } Property Value Type Description IModelBuilder Examples Methods BeginTransaction() Begins the transaction. Declaration ITransaction BeginTransaction() Returns Type Description ITransaction ITransaction wrapping access to the underlying store's transaction object. Examples BeginTransaction(IsolationLevel) Begins the transaction using the specified isolation level. Declaration ITransaction BeginTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel The database isolation level with which the underlying store transaction will be created. Returns Type Description ITransaction ITransaction wrapping access to the underlying store's transaction object. Examples CreateBulkInsert() Creates instance of IBulkInsert . Declaration IBulkInsert CreateBulkInsert() Returns Type Description IBulkInsert Instance of IBulkInsert . CreateBulkUpdate() Creates instance of IBulkUpdate . Declaration IBulkUpdate CreateBulkUpdate() Returns Type Description IBulkUpdate Instance of IBulkUpdate . ExecuteNonQuery(String) Executes arbitrary query. Declaration int ExecuteNonQuery(string query) Parameters Type Name Description System.String query Arbitrary SQL query. It should not be SELECT query. Returns Type Description System.Int32 Number of affected rows. ExecuteNonQuery(String, CommandParameterCollection) Executes arbitrary query with parameters. Declaration int ExecuteNonQuery(string query, CommandParameterCollection parameters) Parameters Type Name Description System.String query Arbitrary SQL query. It should not be SELECT query. CommandParameterCollection parameters The query parameters. Returns Type Description System.Int32 Number of affected rows. ExecuteScalar(String) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration string ExecuteScalar(string query) Parameters Type Name Description System.String query Arbitrary SQL query. Returns Type Description System.String The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. ExecuteScalar(String, Object[]) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration string ExecuteScalar(string query, params object[] args) Parameters Type Name Description System.String query Arbitrary SQL query. System.Object [] args The query parameters. Returns Type Description System.String The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. ExecuteScalar<TResult>(String) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration TResult? ExecuteScalar<TResult>(string query) where TResult : struct Parameters Type Name Description System.String query Arbitrary SQL query. Returns Type Description System.Nullable <TResult> The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. Type Parameters Name Description TResult ExecuteScalar<TResult>(String, Object[]) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration TResult? ExecuteScalar<TResult>(string query, params object[] args) where TResult : struct Parameters Type Name Description System.String query Arbitrary SQL query. System.Object [] args The query parameters. Returns Type Description System.Nullable <TResult> The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. Type Parameters Name Description TResult ExecuteStoredProcedure<TResult>(String) Executes the stored procedure. Declaration TResult ExecuteStoredProcedure<TResult>(string storedProcedureName) Parameters Type Name Description System.String storedProcedureName Name of the stored procedure. Returns Type Description TResult Result of the stored procedure. Type Parameters Name Description TResult The type of the result. ExecuteStoredProcedure<TResult>(String, CommandParameterCollection) Executes the stored procedure with parameters. Declaration TResult ExecuteStoredProcedure<TResult>(string storedProcedureName, CommandParameterCollection parameters) Parameters Type Name Description System.String storedProcedureName Name of the stored procedure. CommandParameterCollection parameters The stored procedure parameters. Returns Type Description TResult Result of the stored procedure. Type Parameters Name Description TResult The type of the result. Query<T>() Gets the query builder for T creating and executing query for obtains models. Declaration IQuery<T> Query<T>() Returns Type Description IQuery <T> Query builder. Type Parameters Name Description T Type of model, for which querying."
  },
  "api/Kros.KORM/Kros.KORM.Query.QueryProvider.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.QueryProvider.html",
    "title": "Class QueryProvider | Kros.Libs",
    "keywords": "Class QueryProvider Provider, which know execute query. Inheritance System.Object QueryProvider SqlServerQueryProvider Implements IQueryProvider Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public abstract class QueryProvider : IQueryProvider, IQueryProvider, IDisposable Constructors QueryProvider(ConnectionStringSettings, ISqlExpressionVisitor, IModelBuilder, ILogger) Initializes a new instance of the QueryProvider class. Declaration public QueryProvider(ConnectionStringSettings connectionSettings, ISqlExpressionVisitor sqlGenerator, IModelBuilder modelBuilder, ILogger logger) Parameters Type Name Description System.Configuration.ConnectionStringSettings connectionSettings The connection string settings. ISqlExpressionVisitor sqlGenerator The SQL generator. IModelBuilder modelBuilder The model builder. ILogger logger The logger. QueryProvider(DbConnection, ISqlExpressionVisitor, IModelBuilder, ILogger) Initializes a new instance of the QueryProvider class. Declaration public QueryProvider(DbConnection externalConnection, ISqlExpressionVisitor sqlGenerator, IModelBuilder modelBuilder, ILogger logger) Parameters Type Name Description System.Data.Common.DbConnection externalConnection The connection. ISqlExpressionVisitor sqlGenerator The SQL generator. IModelBuilder modelBuilder The model builder. ILogger logger The logger. Properties Connection Vráti spojenie na databázu s ktorou trieda pracuje. Ak trieda bola vytvorená iba so zadaným connection string-om, je vytvorené nové spojenie. Declaration protected DbConnection Connection { get; } Property Value Type Description System.Data.Common.DbConnection ConnectionString Connection string na databázu, ktorý bol zadaný pri vytvorení inštancie triedy ( QueryProvider(ConnectionStringSettings, ISqlExpressionVisitor, IModelBuilder, ILogger) ). Ak bola trieda vytvorená konkrétnou inštanciou spojenia, vráti null . Declaration protected string ConnectionString { get; } Property Value Type Description System.String DbProviderFactory Returns DbProviderFactory for current provider. Declaration public abstract DbProviderFactory DbProviderFactory { get; } Property Value Type Description System.Data.Common.DbProviderFactory IsExternalConnection Vráti, či spojenie na databázu je externé, tzn. či bolo explicitne zadané zvonka v konštruktore. Ak bolo spojenie zadané explicitne, vráti true , ak bol v konštruktore zadaný iba connection string a spojenie je vytvorené interne, vráti false . Declaration protected bool IsExternalConnection { get; } Property Value Type Description System.Boolean Methods BeginTransaction(IsolationLevel) Begins the transaction using the specified isolation level. Declaration public ITransaction BeginTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel The database isolation level with which the underlying store transaction will be created. Returns Type Description ITransaction ITransaction wrapping access to the underlying store's transaction object. CreateBulkInsert() Creates instance of IBulkInsert . Declaration public abstract IBulkInsert CreateBulkInsert() Returns Type Description IBulkInsert Instance of IBulkInsert . CreateBulkUpdate() Creates instance of IBulkUpdate . Declaration public abstract IBulkUpdate CreateBulkUpdate() Returns Type Description IBulkUpdate Instance of IBulkUpdate . CreateIdGenerator(String, Int32) Creates the identifier generator. Declaration public IIdGenerator CreateIdGenerator(string tableName, int batchSize) Parameters Type Name Description System.String tableName Name of the database table. System.Int32 batchSize Size of inserting the batch. Returns Type Description IIdGenerator The identifier generator. CreateQuery(Expression) Not implemented. Declaration public IQueryable CreateQuery(Expression expression) Parameters Type Name Description System.Linq.Expressions.Expression expression An expression tree that represents a LINQ query. Returns Type Description System.Linq.IQueryable Exceptions Type Condition System.NotImplementedException CreateQuery<TElement>(Expression) Constructs an System.Linq.IQueryable<T> object that can evaluate the query represented by a specified expression tree. Declaration public IQueryable<TElement> CreateQuery<TElement>(Expression expression) Parameters Type Name Description System.Linq.Expressions.Expression expression An expression tree that represents a LINQ query. Returns Type Description System.Linq.IQueryable <TElement> An System.Linq.IQueryable<T> that can evaluate the query represented by the specified expression tree. Type Parameters Name Description TElement The type of the elements of the System.Linq.IQueryable<T> that is returned. Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Execute(Expression) Executing non generic result is not actualy supported. Declaration public object Execute(Expression expression) Parameters Type Name Description System.Linq.Expressions.Expression expression An expression tree that represents a LINQ query. Returns Type Description System.Object Exceptions Type Condition System.NotImplementedException Execute<T>(IQuery<T>) Executes the specified query. Declaration public IEnumerable<T> Execute<T>(IQuery<T> query) Parameters Type Name Description IQuery <T> query The query. Returns Type Description System.Collections.Generic.IEnumerable <T> IEnumerable of models, which was materialized by query Type Parameters Name Description T Type of model result. Exceptions Type Condition System.ArgumentNullException If query is null. Execute<TResult>(Expression) Executes the strongly-typed query represented by a specified expression tree. Declaration public TResult Execute<TResult>(Expression expression) Parameters Type Name Description System.Linq.Expressions.Expression expression An expression tree that represents a LINQ query. Returns Type Description TResult The value that results from executing the specified query. Type Parameters Name Description TResult The type of the value that results from executing the query. ExecuteInTransaction(Action) Executes action in transaction. Declaration public void ExecuteInTransaction(Action action) Parameters Type Name Description System.Action action Action which will be executed. ExecuteNonQuery(String) Executes arbitrary query. Declaration public int ExecuteNonQuery(string query) Parameters Type Name Description System.String query Arbitrary SQL query. It should not be SELECT query. Returns Type Description System.Int32 Number of affected rows. ExecuteNonQuery(String, CommandParameterCollection) Executes arbitrary query with parameters. Declaration public int ExecuteNonQuery(string query, CommandParameterCollection parameters) Parameters Type Name Description System.String query Arbitrary SQL query. It should not be SELECT query. CommandParameterCollection parameters The query parameters. Returns Type Description System.Int32 Number of affected rows. Exceptions Type Condition System.ArgumentException Value of any of the parameters is NULL and its data type ( DataType ) is not set. ExecuteNonQueryCommand(IDbCommand) Executes the command. Declaration public int ExecuteNonQueryCommand(IDbCommand command) Parameters Type Name Description System.Data.IDbCommand command The command. Returns Type Description System.Int32 Exceptions Type Condition System.NotImplementedException ExecuteScalar<T>(IQuery<T>) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration public object ExecuteScalar<T>(IQuery<T> query) Parameters Type Name Description IQuery <T> query The query. Returns Type Description System.Object The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. Type Parameters Name Description T Type of model. Exceptions Type Condition System.ArgumentNullException If query is null. ExecuteStoredProcedure<TResult>(String) Declaration public TResult ExecuteStoredProcedure<TResult>(string storedProcedureName) Parameters Type Name Description System.String storedProcedureName Returns Type Description TResult Type Parameters Name Description TResult ExecuteStoredProcedure<TResult>(String, CommandParameterCollection) Declaration public TResult ExecuteStoredProcedure<TResult>(string storedProcedureName, CommandParameterCollection parameters) Parameters Type Name Description System.String storedProcedureName CommandParameterCollection parameters Returns Type Description TResult Type Parameters Name Description TResult GetCommandForCurrentTransaction() Vytvorí inicializovaný príkaz System.Data.Common.DbCommand , pre aktuálnu transakciu. Používa sa iba v rámci volania ExecuteInTransaction(Action) . Declaration public DbCommand GetCommandForCurrentTransaction() Returns Type Description System.Data.Common.DbCommand Inicializovaný príkaz. GetCurrentTransaction() Gets current the transaction. Declaration protected DbTransaction GetCurrentTransaction() Returns Type Description System.Data.Common.DbTransaction Current transaction if is opened; otherwise null; GetSchemaLoader() Creates IDatabaseSchemaLoader for specific database. Declaration protected abstract IDatabaseSchemaLoader GetSchemaLoader() Returns Type Description IDatabaseSchemaLoader SetParameterDbType(DbParameter, String, String) Declaration public void SetParameterDbType(DbParameter parameter, string tableName, string columnName) Parameters Type Name Description System.Data.Common.DbParameter parameter System.String tableName System.String columnName Implements IQueryProvider See Also IQueryProvider"
  },
  "api/Kros.KORM.MsAccess/Kros.KORM.Query.MsAccess.MsAccessQueryProvider.html": {
    "href": "api/Kros.KORM.MsAccess/Kros.KORM.Query.MsAccess.MsAccessQueryProvider.html",
    "title": "Class MsAccessQueryProvider | Kros.Libs",
    "keywords": "Class MsAccessQueryProvider Provider, which know execute query for MsAccess. Inheritance System.Object QueryProvider MsAccessQueryProvider Implements IQueryProvider Inherited Members QueryProvider.SetParameterDbType(DbParameter, String, String) QueryProvider.Execute<T>(IQuery<T>) QueryProvider.ExecuteScalar<T>(IQuery<T>) QueryProvider.ExecuteInTransaction(Action) QueryProvider.ExecuteNonQueryCommand(IDbCommand) QueryProvider.ExecuteNonQuery(String) QueryProvider.ExecuteNonQuery(String, CommandParameterCollection) QueryProvider.ExecuteStoredProcedure<TResult>(String) QueryProvider.ExecuteStoredProcedure<TResult>(String, CommandParameterCollection) QueryProvider.GetCommandForCurrentTransaction() QueryProvider.BeginTransaction(IsolationLevel) QueryProvider.CreateIdGenerator(String, Int32) QueryProvider.CreateQuery(Expression) QueryProvider.CreateQuery<TElement>(Expression) QueryProvider.Execute(Expression) QueryProvider.Execute<TResult>(Expression) QueryProvider.GetCurrentTransaction() QueryProvider.ConnectionString QueryProvider.IsExternalConnection QueryProvider.Connection QueryProvider.Dispose(Boolean) QueryProvider.Dispose() Namespace : Kros.KORM.Query.MsAccess Assembly : Kros.KORM.MsAccess.dll Syntax public class MsAccessQueryProvider : QueryProvider, IQueryProvider, IQueryProvider, IDisposable Constructors MsAccessQueryProvider(ConnectionStringSettings, ISqlExpressionVisitor, IModelBuilder, ILogger) Initializes a new instance of the MsAccessQueryProvider class. Declaration public MsAccessQueryProvider(ConnectionStringSettings connectionString, ISqlExpressionVisitor sqlGenerator, IModelBuilder modelBuilder, ILogger logger) Parameters Type Name Description System.Configuration.ConnectionStringSettings connectionString The connection string settings. ISqlExpressionVisitor sqlGenerator The SQL generator. IModelBuilder modelBuilder The model builder. ILogger logger The logger. MsAccessQueryProvider(DbConnection, ISqlExpressionVisitor, IModelBuilder, ILogger) Initializes a new instance of the MsAccessQueryProvider class. Declaration public MsAccessQueryProvider(DbConnection connection, ISqlExpressionVisitor sqlGenerator, IModelBuilder modelBuilder, ILogger logger) Parameters Type Name Description System.Data.Common.DbConnection connection The connection. ISqlExpressionVisitor sqlGenerator The SQL generator. IModelBuilder modelBuilder The model builder. ILogger logger The logger. Properties DbProviderFactory Vráti System.Data.OleDb.OleDbFactory.Instance . Declaration public override DbProviderFactory DbProviderFactory { get; } Property Value Type Description System.Data.Common.DbProviderFactory Overrides QueryProvider.DbProviderFactory Methods CreateBulkInsert() Creates instance of MsAccessBulkInsert . Declaration public override IBulkInsert CreateBulkInsert() Returns Type Description IBulkInsert Instance of MsAccessBulkInsert . Overrides QueryProvider.CreateBulkInsert() CreateBulkUpdate() Creates instance of MsAccessBulkUpdate . Declaration public override IBulkUpdate CreateBulkUpdate() Returns Type Description IBulkUpdate Instance of MsAccessBulkUpdate . Overrides QueryProvider.CreateBulkUpdate() GetSchemaLoader() Returns instance of MsAccessSchemaLoader . Declaration protected override IDatabaseSchemaLoader GetSchemaLoader() Returns Type Description IDatabaseSchemaLoader Overrides QueryProvider.GetSchemaLoader() Implements IQueryProvider See Also QueryProvider"
  },
  "api/Kros.Utils/Kros.Data.Schema.DatabaseSchema.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.DatabaseSchema.html",
    "title": "Class DatabaseSchema | Kros.Libs",
    "keywords": "Class DatabaseSchema Schéma databázy. Inheritance System.Object DatabaseSchema Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class DatabaseSchema Constructors DatabaseSchema(String) Vytvorí inštanciu schémy databázy s menom name . Declaration public DatabaseSchema(string name) Parameters Type Name Description System.String name Meno databázy. Properties Name Názov databázy. Declaration public string Name { get; } Property Value Type Description System.String Tables Schéma tabuliek databázy. Declaration public TableSchemaCollection Tables { get; } Property Value Type Description TableSchemaCollection Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Kros.Utils/Kros.UnitTests.SqlServerDatabaseTestBase.html": {
    "href": "api/Kros.Utils/Kros.UnitTests.SqlServerDatabaseTestBase.html",
    "title": "Class SqlServerDatabaseTestBase | Kros.Libs",
    "keywords": "Class SqlServerDatabaseTestBase Základná trieda pre databázové integračné testy nad SQL Server-om. Trieda sa stará o vytvorenie a inicializáciu databázy, v ktorej bežia testy. V potomkoch sa už len používa spojenie na vytvorenú databázu. Inheritance System.Object SqlServerDatabaseTestBase Namespace : Kros.UnitTests Assembly : Kros.Utils.dll Syntax public abstract class SqlServerDatabaseTestBase : IDisposable Remarks Trieda vytvorí databázu pre testy vo svojom konštruktore a pri volaní Dispose() je táto databáza zmazaná. Databázu je možné aj inicializovať nastavením DatabaseInitScripts , aby bolo pre testy pripravené všetko potrebné. V potomkoch je potrebné prepísať metódy BaseConnectionString a nastaviť tak spojenie na server, kde sa databáza vytvorí. V jednej testovacej triede je možné mať ľubovoľné množstvo testov. xUnit pre každý test vytvára novú inštanciu triedy, takže každý test bude mať svoju vlastnú inicializovanú databázu. Constructors SqlServerDatabaseTestBase() Vytvorí inštanciu triedy a inicializuje ServerHelper . Declaration public SqlServerDatabaseTestBase() Properties BaseConnectionString Základný connection string na server, kde sa vytvorí databáza. Connection string neobsahuje meno konkrétnej databázy, pretože to je generované, aby každý test išiel izolovane vo vlastnej databáze. Declaration protected abstract string BaseConnectionString { get; } Property Value Type Description System.String Remarks Pozri tiež BaseConnectionString , resp. celú triedu SqlServerTestHelper . BaseDatabaseName Základný názov databázy, ktorá sa vytvorí. K tomuto názvu je ešte pridaný náhodný GUID, aby bolo meno databázy unikátne. Štandardne vráti plný názov aktuálnej triedy ( GetType().FullName ) s pridaným podčiarovníkom na konci (napr. Kros.Utils.UnitTests.SomeTestClass_ ). Declaration protected virtual string BaseDatabaseName { get; } Property Value Type Description System.String Remarks Pozri tiež BaseDatabaseName , resp. celú triedu SqlServerTestHelper . DatabaseInitScripts Skripty pre inicializáciu databázy do počiatočného stavu pre testy. Declaration protected virtual IEnumerable<string> DatabaseInitScripts { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Remarks Trieda automaticky vytvorí prázdnu databázu. Ak je potrebné mať databázu nejako konkrétne inicializovanú (vytvorné tabuľky, pripravené dáta...), v tejto vlatnosti je zoznam skriptov, ktoré sa po vytvorení databázy spustia. ServerHelper Helper pre testy na sql serveri. Obsahuje hlavne spojenie na databázu, v ktorej testy bežia ( ServerHelper.Connection ). Declaration protected SqlServerTestHelper ServerHelper { get; } Property Value Type Description SqlServerTestHelper Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing CheckDisposed() Kontroluje, či inštancia nebola uvoľnená. Ak už bola (bola zavolaná jej metóda Dispose() ), vyvolá výnimku System.ObjectDisposedException . Declaration protected void CheckDisposed() Exceptions Type Condition System.ObjectDisposedException Vyvolaná pri použití triedy, ak už bola na nej zavolaná metóda Dispose() ."
  },
  "api/Kros.Utils/Kros.Data.IdGeneratorBase.html": {
    "href": "api/Kros.Utils/Kros.Data.IdGeneratorBase.html",
    "title": "Class IdGeneratorBase | Kros.Libs",
    "keywords": "Class IdGeneratorBase Základná trieda, ktorú stači zdediť aby sme mohli jednoduchšie vytvárať implementácie IIdGenerator . Stará sa o dispose connection. Inheritance System.Object IdGeneratorBase SqlServerIdGenerator Implements IIdGenerator Namespace : Kros.Data Assembly : Kros.Utils.dll Syntax public abstract class IdGeneratorBase : IIdGenerator, IDisposable Constructors IdGeneratorBase(DbConnection, String, Int32) Konštruktor. Declaration public IdGeneratorBase(DbConnection connection, string tableName, int bathSize) Parameters Type Name Description System.Data.Common.DbConnection connection Connection, ktorá sa použije pre získavanie unikátnych identifikátorov. System.String tableName Názov tabuľky, pre ktorú generujem identifikátory. System.Int32 bathSize Veľkosť dávky, ktorú si zarezervuje dopredu. IdGeneratorBase(String, String, Int32) Konštruktor. Declaration public IdGeneratorBase(string connectionString, string tableName, int batchSize) Parameters Type Name Description System.String connectionString Connection string, ktorý sa použije na vytvorenie conenction pre získavanie unikátnych identifikátorov. System.String tableName Názov tabuľky, pre ktorú generujem identifikátory. System.Int32 batchSize Veľkosť dávky, ktorú si zarezervuje dopredu. Properties BatchSize Veľkosť dávky, ktorú si zarezevuje dopredu. Declaration public int BatchSize { get; } Property Value Type Description System.Int32 Connection Connection, ktorá sa použije pre získavanie unikátnych identifikátorov. Declaration protected DbConnection Connection { get; } Property Value Type Description System.Data.Common.DbConnection TableName Názov tabuľky, pre ktorú generujem identifikátory. Declaration public string TableName { get; } Property Value Type Description System.String Methods CreateConnection(String) Vytvorenie connection. Declaration protected abstract DbConnection CreateConnection(string connectionString) Parameters Type Name Description System.String connectionString Connection string. Returns Type Description System.Data.Common.DbConnection Špecifická inštancia System.Data.Common.DbConnection . Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing GetNewIdFromDbCore() Získa nový identifikátor z databázy. V tejto metóde je zabezpečné, že spojenie na databázu Connection je otvorené. Declaration protected abstract int GetNewIdFromDbCore() Returns Type Description System.Int32 Ďalší identifikátor, ktorý sa môže použiť. GetNext() Declaration public virtual int GetNext() Returns Type Description System.Int32 InitDatabaseForIdGenerator() Inicializuje databázu tak, aby sa dal v nej používať generátor ID. Znamená to napríklad vytvorenie príslušnej tabuľky a stored procedúry. Declaration public abstract void InitDatabaseForIdGenerator() Implements IIdGenerator See Also IIdGenerator"
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerCacheKeyGenerator.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerCacheKeyGenerator.html",
    "title": "Class SqlServerCacheKeyGenerator | Kros.Libs",
    "keywords": "Class SqlServerCacheKeyGenerator Generátor kľúča pre SQL Server databázu. Inheritance System.Object SqlServerCacheKeyGenerator Implements ISchemaCacheKeyGenerator < System.Data.SqlClient.SqlConnection > ISchemaCacheKeyGenerator Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public class SqlServerCacheKeyGenerator : ISchemaCacheKeyGenerator<SqlConnection>, ISchemaCacheKeyGenerator Methods GenerateKey(SqlConnection) Vygeneruje kľúč pre spojenie connection . Kľúč je vygenerovaný v tvare SERVER\\databáza . Declaration public string GenerateKey(SqlConnection connection) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Spojenie na databázu. Returns Type Description System.String Reťazec. Exceptions Type Condition System.ArgumentNullException Hodnota connection je null . Explicit Interface Implementations ISchemaCacheKeyGenerator.GenerateKey(Object) Vygeneruje kľúč pre spojenie connection . Kľúč je vygenerovaný v tvare SERVER\\databáza . Declaration string ISchemaCacheKeyGenerator.GenerateKey(object connection) Parameters Type Name Description System.Object connection Spojenie na databázu. Returns Type Description System.String Reťazec. Exceptions Type Condition System.ArgumentNullException Hodnota connection je null . Implements ISchemaCacheKeyGenerator<T> ISchemaCacheKeyGenerator"
  },
  "api/Kros.Utils/Kros.Utils.DateTimeProvider.html": {
    "href": "api/Kros.Utils/Kros.Utils.DateTimeProvider.html",
    "title": "Class DateTimeProvider | Kros.Libs",
    "keywords": "Class DateTimeProvider Trieda sprístupňujúca dátum a čas, aby bolo možné \"fixovať\" čas v testoch InjectActualDateTime(DateTime) . Inheritance System.Object DateTimeProvider Namespace : Kros.Utils Assembly : Kros.Utils.dll Syntax public class DateTimeProvider : IDisposable Remarks Aktuálny čas je dostupný vlastnosťou Now , vlastný čas je možné podhodiť volaním InjectActualDateTime(DateTime) : Natavená hodnota je platná pre aktuálne vlákno, tzn. v dvoch rôznych vláknach je možné mať rôzne nastavené hodnoty ( System.ThreadStaticAttribute ). Properties Now Ak bol čas fixne nastavený metódou InjectActualDateTime(DateTime) , je vrátený ten. Inak je vrátený reálny čas System.DateTime.Now . Declaration public static DateTime Now { get; } Property Value Type Description System.DateTime Methods Dispose() Declaration public void Dispose() InjectActualDateTime(DateTime) Nastaví fixný čas, ktorý provider potom vracia vo vlastnosti Now . Používa sa v using bloku. Declaration public static IDisposable InjectActualDateTime(DateTime actualDateTime) Parameters Type Name Description System.DateTime actualDateTime Hodnota, ktorú bude provider vracať. Returns Type Description System.IDisposable See Also System.IDisposable"
  },
  "api/Kros.Utils/Kros.Data.SqlServer.SqlServerIdGeneratorFactory.html": {
    "href": "api/Kros.Utils/Kros.Data.SqlServer.SqlServerIdGeneratorFactory.html",
    "title": "Class SqlServerIdGeneratorFactory | Kros.Libs",
    "keywords": "Class SqlServerIdGeneratorFactory Interface popisujúci factory triedu, ktorá vie vytvoriť inštanciu SqlServerIdGenerator . Inheritance System.Object SqlServerIdGeneratorFactory Implements IIdGeneratorFactory Namespace : Kros.Data.SqlServer Assembly : Kros.Utils.dll Syntax public class SqlServerIdGeneratorFactory : IIdGeneratorFactory Remarks Štandardne sa nevytvára priamo ale cez IdGeneratorFactories . Examples Constructors SqlServerIdGeneratorFactory(SqlConnection) Initializes a new instance of the SqlServerIdGeneratorFactory class. Declaration public SqlServerIdGeneratorFactory(SqlConnection connection) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Connection, ktorá sa použije pre získavanie unikátnych identifikátorov. SqlServerIdGeneratorFactory(String) Initializes a new instance of the SqlServerIdGeneratorFactory class. Declaration public SqlServerIdGeneratorFactory(string connectionString) Parameters Type Name Description System.String connectionString Connection string, ktorý sa použije na vytvorenie conenction pre získavanie unikátnych identifikátorov. Fields DefaultIdStoreTableName Defaultný názov tabuľky, kde si uchovávame identifikátory pre jednotlivé tabuľky. Declaration public const string DefaultIdStoreTableName = \"IdStore\" Field Value Type Description System.String Methods GetGenerator(String) Declaration public IIdGenerator GetGenerator(string tableName) Parameters Type Name Description System.String tableName Returns Type Description IIdGenerator GetGenerator(String, Int32) Declaration public IIdGenerator GetGenerator(string tableName, int batchSize) Parameters Type Name Description System.String tableName System.Int32 batchSize Returns Type Description IIdGenerator Register() Registrovanie factory metód na vytvorenie inštancie do IdGeneratorFactories . Declaration public static void Register() Implements IIdGeneratorFactory See Also SqlServerIdGenerator IdGeneratorFactories"
  },
  "api/Kros.Utils/Kros.Data.BulkActions.EnumerableDataReader-1.html": {
    "href": "api/Kros.Utils/Kros.Data.BulkActions.EnumerableDataReader-1.html",
    "title": "Class EnumerableDataReader<T> | Kros.Libs",
    "keywords": "Class EnumerableDataReader<T> Implementácia rozhrania IBulkActionDataReader nad ľubovoľným zoznamom objektov. Inheritance System.Object EnumerableDataReader<T> Implements IBulkActionDataReader Namespace : Kros.Data.BulkActions Assembly : Kros.Utils.dll Syntax public class EnumerableDataReader<T> : IBulkActionDataReader, IDisposable Type Parameters Name Description T Typ dátového objektu. Remarks Trieda implementuje rozhranie IBulkActionDataReader nad ľubovoľným zoznamom objektov, aby bolo jednoduché takýto zoznam hromadne vložiť do databázy pomocou BulkInsert -u. Constructors EnumerableDataReader(IEnumerable<T>, IEnumerable<String>) Vytvorí inštanciu reader-a nad dátami data so zoznamom sĺpcov columnNames . Declaration public EnumerableDataReader(IEnumerable<T> data, IEnumerable<string> columnNames) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> data Dáta, nad ktorými je vytvorený reader. System.Collections.Generic.IEnumerable < System.String > columnNames Zoznam stĺpcov s ktorými reader pracuje. Pre všetky stĺpce v zozname musí existovať property s rovnakým menom v objekte T . Exceptions Type Condition System.ArgumentNullException Hodnota data , alebo columnNames je null . System.ArgumentException Zoznam columnNames je prázdny, tzn. neobsahuje ani jednu hodnotu. System.InvalidOperationException Trieda T nemá všetky vlastnosti určené zoznamom sĺpcov columnNames . Properties FieldCount Počet stĺpcov. Declaration public int FieldCount { get; } Property Value Type Description System.Int32 Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing GetName(Int32) Meno stĺpca na indexe i . Declaration public string GetName(int i) Parameters Type Name Description System.Int32 i Index stĺpca. Returns Type Description System.String Reťazec. GetOrdinal(String) Index stĺpca určeného menom name . Declaration public int GetOrdinal(string name) Parameters Type Name Description System.String name Meno stĺpca. Returns Type Description System.Int32 Číslo. GetValue(Int32) Vráti hodnotu stĺpca na indexe i . Declaration public object GetValue(int i) Parameters Type Name Description System.Int32 i Index stĺpca. Returns Type Description System.Object Hodnota stĺpca. Read() Posunie sa na ďalšiu položku v zozname. Declaration public bool Read() Returns Type Description System.Boolean Vráti true , ak sa podarilo posunúť na ďalšiu položku, false , ak už žiadna položka nie je. Implements IBulkActionDataReader"
  },
  "api/Kros.Utils/Kros.Data.BulkActions.BulkUpdateBase.html": {
    "href": "api/Kros.Utils/Kros.Data.BulkActions.BulkUpdateBase.html",
    "title": "Class BulkUpdateBase | Kros.Libs",
    "keywords": "Class BulkUpdateBase Spoločný predok pre bulk update. Inheritance System.Object BulkUpdateBase SqlServerBulkUpdate Implements IBulkUpdate Namespace : Kros.Data.BulkActions Assembly : Kros.Utils.dll Syntax public abstract class BulkUpdateBase : IBulkUpdate, IDisposable Fields _connection Connection. Declaration protected IDbConnection _connection Field Value Type Description System.Data.IDbConnection _disposeOfConnection Či je potrebné disposnúť connection. Declaration protected bool _disposeOfConnection Field Value Type Description System.Boolean PrefixTempTable Prefix pre tempovú tabuľku. Declaration protected const char PrefixTempTable = '#' Field Value Type Description System.Char Properties DestinationTableName Meno cieľovej tabuľky v databáze. Declaration public string DestinationTableName { get; set; } Property Value Type Description System.String ExternalTransaction Externá transakcia, v ktorej sa vykoná editácia dát. Declaration public IDbTransaction ExternalTransaction { get; protected set; } Property Value Type Description System.Data.IDbTransaction PrimaryKeyColumn Primárny kľúč. Declaration public string PrimaryKeyColumn { get; set; } Property Value Type Description System.String TempTableAction Declaration public Action<IDbConnection, IDbTransaction, string> TempTableAction { get; set; } Property Value Type Description System.Action < System.Data.IDbConnection , System.Data.IDbTransaction , System.String > Methods CreateBulkInsert() Vytvorí bulk insert. Declaration protected abstract IBulkInsert CreateBulkInsert() Returns Type Description IBulkInsert Bulk insert. CreateCommandForPrimaryKey() Vráti command pre vytvorenie primárneho kľúča. Declaration protected abstract IDbCommand CreateCommandForPrimaryKey() Returns Type Description System.Data.IDbCommand CreateTempTable(IDataReader, String) Vytvorí tempovú tabuľku podľa reader . Declaration protected abstract void CreateTempTable(IDataReader reader, string tempTableName) Parameters Type Name Description System.Data.IDataReader reader Reader pre sprístupnenie dát. System.String tempTableName Názov tempovej tabuľky. Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing DoneTempTable(String) Ukončí prácu s tempovou tabuľkou. Declaration protected virtual void DoneTempTable(string tempTableName) Parameters Type Name Description System.String tempTableName Názov tempovej tabuľky. GetColumnNamesForTempTable(IDataReader) Zoznam stĺpcov tempovej tabuľky. Declaration protected string GetColumnNamesForTempTable(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Reader pre prístup k dátam. Returns Type Description System.String GetTempTableName() Vráti názov tempovej tabuľky. Declaration protected abstract string GetTempTableName() Returns Type Description System.String GetTempTableNameForBulkInsert(String) Vráti názov tempovej tabuľky pre bulk insert. Declaration protected virtual string GetTempTableNameForBulkInsert(string name) Parameters Type Name Description System.String name Názov tempovej tabuľky. Returns Type Description System.String GetUpdateColumnNames(IDataReader, String) Zoznam stĺpcov tempovej tabuľky. Declaration protected string GetUpdateColumnNames(IDataReader reader, string tempTableName) Parameters Type Name Description System.Data.IDataReader reader Reader pre prístup k dátam. System.String tempTableName Názov tempovej tabuľky. Returns Type Description System.String InvokeAction(String) Zavolá akciu nad tempovou databázou. Declaration protected abstract void InvokeAction(string tempTableName) Parameters Type Name Description System.String tempTableName Update(IBulkActionDataReader) Zedituje všetky dáta zo zdroja reader . Declaration public void Update(IBulkActionDataReader reader) Parameters Type Name Description IBulkActionDataReader reader Zdroj dát. Update(DataTable) Zedituje všetky riadky z tabuľky table . Declaration public void Update(DataTable table) Parameters Type Name Description System.Data.DataTable table Zdrojové dáta. Update(IDataReader) Zedituje všetky dáta zo zdroja reader . Declaration public void Update(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Zdroj dát. UpdateDestinationTable(IDataReader, String) Vykoná update nad cieľovou tabuľkou. Declaration protected abstract void UpdateDestinationTable(IDataReader reader, string tempTableName) Parameters Type Name Description System.Data.IDataReader reader Reader pre sprístupnenie dát. System.String tempTableName Názov tempovej tabuľky. Implements IBulkUpdate"
  },
  "api/Kros.Utils/Kros.Data.ConnectionHelper.html": {
    "href": "api/Kros.Utils/Kros.Data.ConnectionHelper.html",
    "title": "Class ConnectionHelper | Kros.Libs",
    "keywords": "Class ConnectionHelper Pomocná trieda pre otváranie spojenia na databázu. Trieda pri použití spojenie otvorí, ak je to potrebné a zase zatvorí, ak ho otvorila. V prípade, že spojenie už otvorené bolo, nerobí nič. Inheritance System.Object Suspender ConnectionHelper Inherited Members Suspender.Suspend() Suspender.IsSuspended Namespace : Kros.Data Assembly : Kros.Utils.dll Syntax public class ConnectionHelper : Suspender Methods OpenConnection(IDbConnection) Otvorí spojenie na databázu connection , ak nie je otvorené. Po uvoľnení vráteného objektu je spojenie opäť uzatvorené v prípade, že bolo na začiatku otvorené. Ak spojenie už bolo otvorené, nerobí sa nič. Declaration public static IDisposable OpenConnection(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection Spojenie na databázu, ktoré sa otvorí. Returns Type Description System.IDisposable Objekt, ktorého uvoľnením sa spojenie na databázu zatvorí v prípade, že bolo na začitku otvorené. ResumeCore() Zatvorí spojenie na databázu, ak bolo otvorené v SuspendCore() . Declaration protected override void ResumeCore() Overrides Suspender.ResumeCore() SuspendCore() Otvorí spojenie na databázu, ak je zatvorené. Declaration protected override void SuspendCore() Overrides Suspender.SuspendCore()"
  },
  "api/Kros.Utils/Kros.Data.Schema.DatabaseSchemaLoader.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.DatabaseSchemaLoader.html",
    "title": "Class DatabaseSchemaLoader | Kros.Libs",
    "keywords": "Class DatabaseSchemaLoader Pomocná trieda na jednoduché načítavanie schémy databáz. Obsahuje zoznam loader-ov pre konkrétne databázy a tak je možné použiť ju transparentne pre ľubovoľný typ databázy. Pri požiadavke je vždy načítaná aktuálna schéma, tzn. schémy sa nekešujú. Inheritance System.Object DatabaseSchemaLoader Implements IDatabaseSchemaLoader Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class DatabaseSchemaLoader : IDatabaseSchemaLoader Remarks Trieda obaľuje zoznam loader-ov rôznych typov databáz a umožňuje tak jednoduché načítanie schémy ľubovoľného známeho typu. Loadery je možné pridávať metódou AddSchemaLoader(IDatabaseSchemaLoader) . Trieda je určená na statické použitie pomocou vlatnosti Default . Štandardne dokáže načítať schémy SQL Server-a a MS Access. Examples Properties Default Inštancia DatabaseSchemaLoader určená na bežné použitie. Štandardne obsahuje loader pre SQL Server ( SqlServerSchemaLoader ). Declaration public static DatabaseSchemaLoader Default { get; } Property Value Type Description DatabaseSchemaLoader Methods AddSchemaLoader(IDatabaseSchemaLoader) Pridá loader do zoznamu loader-ov. Declaration public void AddSchemaLoader(IDatabaseSchemaLoader loader) Parameters Type Name Description IDatabaseSchemaLoader loader Trieda na načítanie schémy konkrétneho typu databázy. ClearSchemaLoaders() Vymaže všetky loader-y v zozname. Declaration public void ClearSchemaLoaders() LoadSchema(Object) Načíta celú schému databázy určenej spojením connection . Declaration public DatabaseSchema LoadSchema(object connection) Parameters Type Name Description System.Object connection Spojenie na databázu. Returns Type Description DatabaseSchema Vráti schému celej databázy. Exceptions Type Condition System.ArgumentNullException Hodnota connection je null . System.ArgumentException Nie je možné načítať schému databázy, pretože pre spojenie connection neexistuje loader. LoadTableSchema(Object, String) Načíta schému tabuľky tableName z databázy connection . Declaration public TableSchema LoadTableSchema(object connection, string tableName) Parameters Type Name Description System.Object connection Spojenie na databázu. System.String tableName Meno tabuľky, ktorej schéma sa načíta. Returns Type Description TableSchema Vráti načítanú schému tabuľky, alebo hodnotu null , ak taká tabuľka neexistuje. Exceptions Type Condition System.ArgumentNullException Hodnota connection je null . System.ArgumentException Nie je možné načítať schému databázy, pretože pre spojenie connection neexistuje loader. RemoveSchemaLoader(IDatabaseSchemaLoader) Odstráni zo zoznamu loader-ov zadaný loader . Declaration public void RemoveSchemaLoader(IDatabaseSchemaLoader loader) Parameters Type Name Description IDatabaseSchemaLoader loader Trieda na načítanie schémy databázy, ktorá sa z interného zoznamu odstráni. SupportsConnectionType(Object) Kontroluje, či trieda dokáže načítať schému zo zadaného spojenia connection . Declaration public bool SupportsConnectionType(object connection) Parameters Type Name Description System.Object connection Spojenie na databázu. Returns Type Description System.Boolean true , ak je možné načítať schému databázy, false , ak to možné nie je. Kontroluje sa zoznam loader-ov a true sa vráti, ak ľubovoľný z nich vie načítať schému so zadaného spojenia. Implements IDatabaseSchemaLoader"
  },
  "api/Kros.Utils/Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert.html": {
    "href": "api/Kros.Utils/Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert.html",
    "title": "Class SqlServerBulkInsert | Kros.Libs",
    "keywords": "Class SqlServerBulkInsert Trieda umožňujúca rýchle hromadné vkladanie dát pre SQL Server. Inheritance System.Object SqlServerBulkInsert Implements IBulkInsert Namespace : Kros.Data.BulkActions.SqlServer Assembly : Kros.Utils.dll Syntax public class SqlServerBulkInsert : IBulkInsert, IDisposable Constructors SqlServerBulkInsert(SqlConnection) Inicializuje novú inštanciu SqlServerBulkInsert použitím spojenia na databázu connection . Declaration public SqlServerBulkInsert(SqlConnection connection) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Spojenie na databázu, kam sa vložia dáta. Spojenie musí byť otvorené. Ak je na spojení spustená transakcia, mysí sa použiť konštruktor s externou transakciou a tá musí byť zadaná. SqlServerBulkInsert(SqlConnection, SqlBulkCopyOptions) Inicializuje novú inštanciu SqlServerBulkInsert použitím spojenia na databázu connection a zadaných nastavení options . Declaration public SqlServerBulkInsert(SqlConnection connection, SqlBulkCopyOptions options) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Spojenie na databázu, kam sa vložia dáta. Spojenie musí byť otvorené. System.Data.SqlClient.SqlBulkCopyOptions options Nastavenia System.Data.SqlClient.SqlBulkCopyOptions . SqlServerBulkInsert(SqlConnection, SqlTransaction) Inicializuje novú inštanciu SqlServerBulkInsert použitím spojenia na databázu connection a externej transakcie externalTransaction . Declaration public SqlServerBulkInsert(SqlConnection connection, SqlTransaction externalTransaction) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Spojenie na databázu, kam sa vložia dáta. Spojenie musí byť otvorené. Ak je na spojení spustená transakcia, musí byť zadaná v parametri externalTransaction . System.Data.SqlClient.SqlTransaction externalTransaction Externá transakcia, v ktorej hromadné vloženie prebehne. SqlServerBulkInsert(SqlConnection, SqlTransaction, SqlBulkCopyOptions) Inicializuje novú inštanciu SqlServerBulkInsert použitím spojenia na databázu connection , externej transakcie externalTransaction a zadaných nastavení options . Declaration public SqlServerBulkInsert(SqlConnection connection, SqlTransaction externalTransaction, SqlBulkCopyOptions options) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Spojenie na databázu, kam sa vložia dáta. Spojenie musí byť otvorené. Ak je na spojení spustená transakcia, musí byť zadaná v parametri externalTransaction . System.Data.SqlClient.SqlTransaction externalTransaction Externá transakcia, v ktorej hromadné vloženie prebehne. System.Data.SqlClient.SqlBulkCopyOptions options Nastavenia System.Data.SqlClient.SqlBulkCopyOptions . SqlServerBulkInsert(String) Inicializuje novú inštanciu SqlServerBulkInsert použitím spojenia na databázu connectionString . Declaration public SqlServerBulkInsert(string connectionString) Parameters Type Name Description System.String connectionString Spojenie na databázu, kam sa vložia dáta. SqlServerBulkInsert(String, SqlBulkCopyOptions) Inicializuje novú inštanciu SqlServerBulkInsert použitím spojenia na databázu connectionString a zadaných nastavení options . Declaration public SqlServerBulkInsert(string connectionString, SqlBulkCopyOptions options) Parameters Type Name Description System.String connectionString Spojenie na databázu, kam sa vložia dáta. System.Data.SqlClient.SqlBulkCopyOptions options Nastavenia System.Data.SqlClient.SqlBulkCopyOptions . Properties BatchSize Počet riadkov v dávke, ktorá sa posiela do databázy. Ak je hodnota 0, veľkosť dávky nie je obmedzená. Declaration public int BatchSize { get; set; } Property Value Type Description System.Int32 Exceptions Type Condition System.ArgumentException Zadaná hodnota je záporná. BulkCopyOptions Nastavenia BulkCopyOptions pre internú inštanciu System.Data.SqlClient.SqlBulkCopy . Declaration public SqlBulkCopyOptions BulkCopyOptions { get; } Property Value Type Description System.Data.SqlClient.SqlBulkCopyOptions BulkInsertTimeout Počet sekúnd na dokončenie operácie. ak je hodnota 0, trvanie operácie nie je obmedzené. Declaration public int BulkInsertTimeout { get; set; } Property Value Type Description System.Int32 Exceptions Type Condition System.ArgumentException Zadaná hodnota je záporná. DefaultBulkCopyOptions Predvolená hodnota System.Data.SqlClient.SqlBulkCopyOptions pre internú inštanciu System.Data.SqlClient.SqlBulkCopy , ak sa nepoužíva externá transakcia. hodnota je SqlBulkCopyOptions.TableLock | SqlBulkCopyOptions.UseInternalTransaction . Declaration public static SqlBulkCopyOptions DefaultBulkCopyOptions { get; } Property Value Type Description System.Data.SqlClient.SqlBulkCopyOptions DefaultBulkCopyOptionsExternalTransaction Predvolená hodnota System.Data.SqlClient.SqlBulkCopyOptions pre internú inštanciu System.Data.SqlClient.SqlBulkCopy , ak sa používa externá transakcia. Hodnota je ako SqlBulkCopyOptions.TableLock . Declaration public static SqlBulkCopyOptions DefaultBulkCopyOptionsExternalTransaction { get; } Property Value Type Description System.Data.SqlClient.SqlBulkCopyOptions DestinationTableName Meno cieľovej tabuľky v databáze. Declaration public string DestinationTableName { get; set; } Property Value Type Description System.String ExternalTransaction Externá transakcia, v ktorej sa vykoná vloženie dát. Declaration public SqlTransaction ExternalTransaction { get; } Property Value Type Description System.Data.SqlClient.SqlTransaction Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Insert(IBulkActionDataReader) Vloží všetky dáta zo zdroja reader . Declaration public void Insert(IBulkActionDataReader reader) Parameters Type Name Description IBulkActionDataReader reader Zdroj dát. Insert(DataTable) Vloží všetky riadky z tabuľky table . Declaration public void Insert(DataTable table) Parameters Type Name Description System.Data.DataTable table Zdrojové dáta. Insert(IDataReader) Vloží všetky dáta zo zdroja reader . Declaration public void Insert(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Zdroj dát. Implements IBulkInsert"
  },
  "api/Kros.Utils/Kros.Data.BulkActions.IBulkUpdate.html": {
    "href": "api/Kros.Utils/Kros.Data.BulkActions.IBulkUpdate.html",
    "title": "Interface IBulkUpdate | Kros.Libs",
    "keywords": "Interface IBulkUpdate Rozhranie pre rýchlu hromadnú editáciu dát v databáze. Namespace : Kros.Data.BulkActions Assembly : Kros.Utils.dll Syntax public interface IBulkUpdate : IDisposable Properties DestinationTableName Meno cieľovej tabuľky v databáze. Declaration string DestinationTableName { get; set; } Property Value Type Description System.String PrimaryKeyColumn Primárny kľúč. Declaration string PrimaryKeyColumn { get; set; } Property Value Type Description System.String TempTableAction Akcia, ktorá sa má vykonať nad tempovou tabuľkou. Declaration Action<IDbConnection, IDbTransaction, string> TempTableAction { get; set; } Property Value Type Description System.Action < System.Data.IDbConnection , System.Data.IDbTransaction , System.String > Remarks Akcia, ktorá sa zavolá nad tempovou tabuľkou (chcem ešte dodatočne upraviť dáta). Methods Update(IBulkActionDataReader) Zedituje všetky dáta zo zdroja reader . Declaration void Update(IBulkActionDataReader reader) Parameters Type Name Description IBulkActionDataReader reader Zdroj dát. Update(DataTable) Zedituje všetky riadky z tabuľky table . Declaration void Update(DataTable table) Parameters Type Name Description System.Data.DataTable table Zdrojové dáta. Update(IDataReader) Zedituje všetky dáta zo zdroja reader . Declaration void Update(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Zdroj dát."
  },
  "api/Kros.Utils/Kros.Data.SqlServer.SqlServerIdGenerator.html": {
    "href": "api/Kros.Utils/Kros.Data.SqlServer.SqlServerIdGenerator.html",
    "title": "Class SqlServerIdGenerator | Kros.Libs",
    "keywords": "Class SqlServerIdGenerator Generátor unikátnych identifikátorov pre sql server. Inheritance System.Object IdGeneratorBase SqlServerIdGenerator Implements IIdGenerator Inherited Members IdGeneratorBase.TableName IdGeneratorBase.BatchSize IdGeneratorBase.Connection IdGeneratorBase.GetNext() IdGeneratorBase.Dispose(Boolean) IdGeneratorBase.Dispose() Namespace : Kros.Data.SqlServer Assembly : Kros.Utils.dll Syntax public class SqlServerIdGenerator : IdGeneratorBase, IIdGenerator, IDisposable Remarks Štandardne sa nevytvára priamo ale cez SqlServerIdGeneratorFactory . Examples Constructors SqlServerIdGenerator(SqlConnection, String, Int32) Konštruktor. Declaration public SqlServerIdGenerator(SqlConnection connection, string tableName, int batchSize) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Connection, ktorá sa použije pre získavanie unikátnych identifikátorov. System.String tableName Názov tabuľky, pre ktorú generujem identifikátory. System.Int32 batchSize Veľkosť dávky, ktorú si zarezervuje dopredu. SqlServerIdGenerator(String, String, Int32) Konštruktor. Declaration public SqlServerIdGenerator(string connectionString, string tableName, int batchSize) Parameters Type Name Description System.String connectionString Connection string, ktorý sa použije na vytvorenie conenction pre získavanie unikátnych identifikátorov. System.String tableName Názov tabuľky, pre ktorú generujem identifikátory. System.Int32 batchSize Veľkosť dávky, ktorú si zarezervuje dopredu. Methods CreateConnection(String) Declaration protected override DbConnection CreateConnection(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description System.Data.Common.DbConnection Overrides IdGeneratorBase.CreateConnection(String) GetIdStoreTableCreationScript() Získanie scriptu na vytvorenie IdStore tabuľky. Declaration public static string GetIdStoreTableCreationScript() Returns Type Description System.String GetNewIdFromDbCore() Declaration protected override int GetNewIdFromDbCore() Returns Type Description System.Int32 Overrides IdGeneratorBase.GetNewIdFromDbCore() GetStoredProcedureCreationScript() Získanie scriptu na vytvorenie store procedure. Declaration public static string GetStoredProcedureCreationScript() Returns Type Description System.String InitDatabaseForIdGenerator() Declaration public override void InitDatabaseForIdGenerator() Overrides IdGeneratorBase.InitDatabaseForIdGenerator() Implements IIdGenerator See Also IdGeneratorFactories SqlServerIdGeneratorFactory"
  },
  "api/Kros.Utils/Kros.Data.Schema.IndexSchemaCollection.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.IndexSchemaCollection.html",
    "title": "Class IndexSchemaCollection | Kros.Libs",
    "keywords": "Class IndexSchemaCollection Zoznam indexov tabuľky TableSchema . Inheritance System.Object System.Collections.ObjectModel.Collection < IndexSchema > System.Collections.ObjectModel.KeyedCollection < System.String , IndexSchema > IndexSchemaCollection Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class IndexSchemaCollection : KeyedCollection<string, IndexSchema>, IList<IndexSchema>, ICollection<IndexSchema>, IList, ICollection, IReadOnlyList<IndexSchema>, IReadOnlyCollection<IndexSchema>, IEnumerable<IndexSchema>, IEnumerable Remarks Indexom pridaným do zoznamu je automaticky nastavená tabuľka Table . Do zoznamu nie je možné pridať index, ktorý už patrí inej tabuľke. V takom prípade je vyvolaná výnimka System.InvalidOperationException . Constructors IndexSchemaCollection(TableSchema) Vytvorí zoznam stĺpcov pre tabuľku table . Declaration public IndexSchemaCollection(TableSchema table) Parameters Type Name Description TableSchema table Tabuľka. Exceptions Type Condition System.ArgumentNullException Hodnota table je null . Properties Table Tabuľka, ktorej zoznam stĺpcov patrí. Declaration public TableSchema Table { get; } Property Value Type Description TableSchema Methods Add(String) Vytvorí a pridá do zoznamu novú schému indexu s menom indexName . Declaration public IndexSchema Add(string indexName) Parameters Type Name Description System.String indexName Meno indexu. Returns Type Description IndexSchema Vytvorenú schému indexu. Exceptions Type Condition System.ArgumentNullException Hodnota indexName je null . System.ArgumentException Hodnota indexName je prázdny reťazec, alebo reťazec bielych znakov. Add(String, IndexType) Vytvorí a pridá do zoznamu novú schému indexu s menom indexName a typom indexType . Declaration public IndexSchema Add(string indexName, IndexType indexType) Parameters Type Name Description System.String indexName Meno indexu. IndexType indexType Typ indexu. Returns Type Description IndexSchema Vytvorenú schému indexu. Exceptions Type Condition System.ArgumentNullException Hodnota indexName je null . System.ArgumentException Hodnota indexName je prázdny reťazec, alebo reťazec bielych znakov. Add(String, IndexType, Boolean) Vytvorí a pridá do zoznamu novú schému indexu s menom indexName , typom indexType a príznakom clustered . Declaration public IndexSchema Add(string indexName, IndexType indexType, bool clustered) Parameters Type Name Description System.String indexName Meno indexu. IndexType indexType Typ indexu. System.Boolean clustered Príznak, či index je CLUSTERED . Returns Type Description IndexSchema Vytvorenú schému indexu. Exceptions Type Condition System.ArgumentNullException Hodnota indexName je null . System.ArgumentException Hodnota indexName je prázdny reťazec, alebo reťazec bielych znakov. GetKeyForItem(IndexSchema) Declaration protected override string GetKeyForItem(IndexSchema item) Parameters Type Name Description IndexSchema item Returns Type Description System.String Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.IndexSchema>.GetKeyForItem(Kros.Data.Schema.IndexSchema) InsertItem(Int32, IndexSchema) Declaration protected override void InsertItem(int index, IndexSchema item) Parameters Type Name Description System.Int32 index IndexSchema item Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.IndexSchema>.InsertItem(System.Int32, Kros.Data.Schema.IndexSchema) RemoveItem(Int32) Declaration protected override void RemoveItem(int index) Parameters Type Name Description System.Int32 index Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.IndexSchema>.RemoveItem(System.Int32)"
  },
  "api/Kros.Utils/Kros.Data.Schema.ColumnSchemaCollection.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.ColumnSchemaCollection.html",
    "title": "Class ColumnSchemaCollection | Kros.Libs",
    "keywords": "Class ColumnSchemaCollection Zoznam stĺpcov tabuľky TableSchema . Inheritance System.Object System.Collections.ObjectModel.Collection < ColumnSchema > System.Collections.ObjectModel.KeyedCollection < System.String , ColumnSchema > ColumnSchemaCollection Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class ColumnSchemaCollection : KeyedCollection<string, ColumnSchema>, IList<ColumnSchema>, ICollection<ColumnSchema>, IList, ICollection, IReadOnlyList<ColumnSchema>, IReadOnlyCollection<ColumnSchema>, IEnumerable<ColumnSchema>, IEnumerable Remarks Stĺpcom pridaným do zoznamu je automaticky nastavená tabuľka Table . Do zoznamu nie je možné pridať stĺpec, ktorý už patrí inej tabuľke. V takom prípade je vyvolaná výnimka System.InvalidOperationException . Constructors ColumnSchemaCollection(TableSchema) Vytvorí zoznam stĺpcov pre tabuľku table . Declaration public ColumnSchemaCollection(TableSchema table) Parameters Type Name Description TableSchema table Tabuľka. Exceptions Type Condition System.ArgumentNullException Hodnota table je null . Properties Table Tabuľka, ktorej zoznam stĺpcov patrí. Declaration public TableSchema Table { get; } Property Value Type Description TableSchema Methods GetKeyForItem(ColumnSchema) Declaration protected override string GetKeyForItem(ColumnSchema item) Parameters Type Name Description ColumnSchema item Returns Type Description System.String Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.ColumnSchema>.GetKeyForItem(Kros.Data.Schema.ColumnSchema) InsertItem(Int32, ColumnSchema) Declaration protected override void InsertItem(int index, ColumnSchema item) Parameters Type Name Description System.Int32 index ColumnSchema item Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.ColumnSchema>.InsertItem(System.Int32, Kros.Data.Schema.ColumnSchema) RemoveItem(Int32) Declaration protected override void RemoveItem(int index) Parameters Type Name Description System.Int32 index Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.ColumnSchema>.RemoveItem(System.Int32)"
  },
  "api/Kros.Utils/Kros.UnitTests.html": {
    "href": "api/Kros.Utils/Kros.UnitTests.html",
    "title": "Namespace Kros.UnitTests | Kros.Libs",
    "keywords": "Namespace Kros.UnitTests Classes SqlServerDatabaseTestBase Základná trieda pre databázové integračné testy nad SQL Server-om. Trieda sa stará o vytvorenie a inicializáciu databázy, v ktorej bežia testy. V potomkoch sa už len používa spojenie na vytvorenú databázu. SqlServerTestHelper Pomocná trieda na testovanie databázových vecí v reálnej SQL Server databáze."
  },
  "api/Kros.Utils.MsAccess/Kros.Data.BulkActions.MsAccess.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.BulkActions.MsAccess.html",
    "title": "Namespace Kros.Data.BulkActions.MsAccess | Kros.Libs",
    "keywords": "Namespace Kros.Data.BulkActions.MsAccess Classes MsAccessBulkInsert Trieda na hromadné vkladanie dát do MS Access tabuľky. MsAccessBulkInsertColumn Definícia stĺpca pre hromadné vkladanie do MS Access tabuľky z CSV súboru ( MsAccessBulkInsert ). MsAccessBulkInsertColumnCollection Zoznam stĺpcov pre hromadné vkladanie do MS Access tabuľky z CSV súboru ( MsAccessBulkInsert ). MsAccessBulkUpdate Trieda umožňujúca rýchlu hromadnú editáciu dát pre Ms Access. Enums BulkInsertColumnType Typ stĺpca pre hromadné vkladanie dát do databázy zo súboru."
  },
  "api/Kros.KORM/Kros.KORM.Query.IQueryProvider.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.IQueryProvider.html",
    "title": "Interface IQueryProvider | Kros.Libs",
    "keywords": "Interface IQueryProvider Interface for provider, which know execute query. Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public interface IQueryProvider : IQueryProvider, IDisposable Properties DbProviderFactory Returns DbProviderFactory for current provider. Declaration DbProviderFactory DbProviderFactory { get; } Property Value Type Description System.Data.Common.DbProviderFactory Methods BeginTransaction(IsolationLevel) Begins the transaction using the specified isolation level. Declaration ITransaction BeginTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel The database isolation level with which the underlying store transaction will be created. Returns Type Description ITransaction ITransaction wrapping access to the underlying store's transaction object. CreateBulkInsert() Creates instance of IBulkInsert . Declaration IBulkInsert CreateBulkInsert() Returns Type Description IBulkInsert Instance of IBulkInsert . CreateBulkUpdate() Creates instance of IBulkUpdate . Declaration IBulkUpdate CreateBulkUpdate() Returns Type Description IBulkUpdate Instance of IBulkUpdate . CreateIdGenerator(String, Int32) Creates the identifier generator. Declaration IIdGenerator CreateIdGenerator(string tableName, int batchSize) Parameters Type Name Description System.String tableName Name of the database table. System.Int32 batchSize Size of inserting the batch. Returns Type Description IIdGenerator The identifier generator. Execute<T>(IQuery<T>) Executes the specified query. Declaration IEnumerable<T> Execute<T>(IQuery<T> query) Parameters Type Name Description IQuery <T> query The query. Returns Type Description System.Collections.Generic.IEnumerable <T> IEnumerable of models, which was materialized by query. Type Parameters Name Description T Type of model result. Exceptions Type Condition System.ArgumentNullException If query is null. ExecuteInTransaction(Action) Executes action in transaction. Declaration void ExecuteInTransaction(Action action) Parameters Type Name Description System.Action action Action which will be executed. ExecuteNonQuery(String) Executes arbitrary query. Declaration int ExecuteNonQuery(string query) Parameters Type Name Description System.String query Arbitrary SQL query. It should not be SELECT query. Returns Type Description System.Int32 Number of affected rows. ExecuteNonQuery(String, CommandParameterCollection) Executes arbitrary query with parameters. Declaration int ExecuteNonQuery(string query, CommandParameterCollection parameters) Parameters Type Name Description System.String query Arbitrary SQL query. It should not be SELECT query. CommandParameterCollection parameters The query parameters. Returns Type Description System.Int32 Number of affected rows. ExecuteNonQueryCommand(IDbCommand) Executes the command. Declaration int ExecuteNonQueryCommand(IDbCommand command) Parameters Type Name Description System.Data.IDbCommand command The command. Returns Type Description System.Int32 Number of affected rows. ExecuteScalar<T>(IQuery<T>) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration object ExecuteScalar<T>(IQuery<T> query) Parameters Type Name Description IQuery <T> query The query. Returns Type Description System.Object The first column of the first row in the result set, or a null if the result set is empty. Returns a maximum of 2033 characters. Type Parameters Name Description T Type of model. ExecuteStoredProcedure<TResult>(String) Executes the stored procedure with parameters and returns its result. The result can be scalar value (primitive or complex – class type), or a list of values ( System.Collections.Generic.IEnumerable<T> ). Declaration TResult ExecuteStoredProcedure<TResult>(string storedProcedureName) Parameters Type Name Description System.String storedProcedureName Name of the stored procedure. Returns Type Description TResult Result of the stored procedure. Type Parameters Name Description TResult The type of the result. It can be scalar primitive or complex (class) value, or System.Collections.Generic.IEnumerable<T> of some value. If the TResult is primitive scalar value, the result is converted to that. If TResult is a classs, the result of stored procedure is converted (materialized) to that class type. If TResult is System.Collections.Generic.IEnumerable<T> , the result of procedure is converted (materialized) to that. Examples For the examples, we expect to have a Database initialized and a Person class defined. Exceptions Type Condition System.InvalidOperationException ExecuteStoredProcedure<TResult>(String, CommandParameterCollection) Declaration TResult ExecuteStoredProcedure<TResult>(string storedProcedureName, CommandParameterCollection parameters) Parameters Type Name Description System.String storedProcedureName Name of the stored procedure. CommandParameterCollection parameters The stored procedure parameters. Values of output parameters ( System.Data.ParameterDirection.Output System.Data.ParameterDirection.InputOutput ) are set back to corresponding parameter in collection Returns Type Description TResult Type Parameters Name Description TResult Exceptions Type Condition System.ArgumentException Value of any of the parameters in parameters is null or System.DBNull and its data type ( DataType ) is not set. GetCommandForCurrentTransaction() Vytvorí inicializovaný príkaz System.Data.Common.DbCommand , pre aktuálnu transakciu. Používa sa iba v rámci volania ExecuteInTransaction(Action) . Declaration DbCommand GetCommandForCurrentTransaction() Returns Type Description System.Data.Common.DbCommand Inicializovaný príkaz. SetParameterDbType(DbParameter, String, String) Sets correct data type to parameter , according to column columnName in table tableName . The method does not set general System.Data.Common.DbParameter.DbType , but specific for given database ( SqlParameter.SqlDbType , OleDbParameter.OleDbType ). Declaration void SetParameterDbType(DbParameter parameter, string tableName, string columnName) Parameters Type Name Description System.Data.Common.DbParameter parameter The parameter to which the data type is set. System.String tableName Table name. System.String columnName Column name which data type is obtained."
  },
  "api/Kros.KORM/Kros.KORM.html": {
    "href": "api/Kros.KORM/Kros.KORM.html",
    "title": "Namespace Kros.KORM | Kros.Libs",
    "keywords": "Namespace Kros.KORM Classes Database Represent access to ORM features. For executing query and materializing models see: IDatabase IQuery<T> Interfaces IDatabase Interface, which describe class for access to ORM features. For executing query and materializing models see: IDatabase IQuery<T>"
  },
  "api/Kros.Utils/Kros.Data.BulkActions.SqlServer.html": {
    "href": "api/Kros.Utils/Kros.Data.BulkActions.SqlServer.html",
    "title": "Namespace Kros.Data.BulkActions.SqlServer | Kros.Libs",
    "keywords": "Namespace Kros.Data.BulkActions.SqlServer Classes SqlServerBulkInsert Trieda umožňujúca rýchle hromadné vkladanie dát pre SQL Server. SqlServerBulkUpdate Trieda umožňujúca rýchlu hromadnú editáciu dát pre SQL Server."
  },
  "api/Kros.Utils/Kros.Data.Schema.TableSchema.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.TableSchema.html",
    "title": "Class TableSchema | Kros.Libs",
    "keywords": "Class TableSchema Schéma databázovej tabuľky. Inheritance System.Object TableSchema Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class TableSchema Constructors TableSchema(DatabaseSchema, String) Vytvorí schému tabuľky name pre databázu database . Declaration public TableSchema(DatabaseSchema database, string name) Parameters Type Name Description DatabaseSchema database Databáza, v ktorej je tabuľka. Hodnota nie je povinná, môže byť null . System.String name Meno tabuľky. Je povinné. Exceptions Type Condition System.ArgumentNullException Hodnota name je null . System.ArgumentException Hodnota name je prázdny reťazec, alebo reťazec bielych znakov. TableSchema(String) Vytvorí schému tabuľky name . Declaration public TableSchema(string name) Parameters Type Name Description System.String name Meno tabuľky. Je povinné. Exceptions Type Condition System.ArgumentNullException Hodnota name je null . System.ArgumentException Hodnota name je prázdny reťazec, alebo reťazec bielych znakov. Properties Columns Zoznam stĺpcov tabuľky. Declaration public ColumnSchemaCollection Columns { get; } Property Value Type Description ColumnSchemaCollection Database Databáza, ktorej tabuľka patrí. Declaration public DatabaseSchema Database { get; } Property Value Type Description DatabaseSchema ForeignKeys Zoznam cudzích kľúčov tabuľky. Declaration public ForeignKeySchemaCollection ForeignKeys { get; } Property Value Type Description ForeignKeySchemaCollection Indexes Zoznam indexov tabuľky. Declaration public IndexSchemaCollection Indexes { get; } Property Value Type Description IndexSchemaCollection Name Meno tabuľky. Declaration public string Name { get; } Property Value Type Description System.String PrimaryKey Primárny kľúč tabuľky. Declaration public IndexSchema PrimaryKey { get; } Property Value Type Description IndexSchema Remarks Inštancia je vždy vytvorená, aj ak tabuľka nemá primárny kľúč. V tomto prípade len nemá žiadny stĺpec. Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Kros.Utils/Kros.Net.html": {
    "href": "api/Kros.Utils/Kros.Net.html",
    "title": "Namespace Kros.Net | Kros.Libs",
    "keywords": "Namespace Kros.Net Classes NetworkChecker Trieda určená na testovanie dostupnosti internetového spojenia. Interfaces IWebClient Interface popisujúci WebClient-a. Aby sme v testoch mohli podvrhovať vlastné implementácie."
  },
  "api/Kros.KORM/Kros.KORM.Query.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.html",
    "title": "Namespace Kros.KORM.Query | Kros.Libs",
    "keywords": "Namespace Kros.KORM.Query Classes CommandParameter Parameter pre SQL príkaz ( ExecuteNonQuery(String) ), alebo stored procedúru ( ExecuteStoredProcedure<TResult>(String) ). CommandParameterCollection Zoznam parametrov pre pre SQL príkaz ( ExecuteNonQuery(String) ), alebo stored procedúru ( ExecuteStoredProcedure<TResult>(String) ). DbSet<T> Represents the collection of all items that can be saved to the database, of a given type. QueryProvider Provider, which know execute query. QueryProviderFactories Represent set of registered Query provider factories. SqlServerQueryProvider Provider, which know execute query for Sql Server. SqlServerQueryProviderFactory Factory which create sql server provider. Interfaces IDbSet<T> An IDbSet represents the collection of all entities in the context, or that can be queried from the database, of a given type. DbSet is a concrete implementation of IDbSet. IFilteredQuery<T> Represent result of filter (where) operation. IGroupedQuery<T> Represents result of grouping operation. IOrderedQuery<T> Represents result of a sorting operation. IProjectionQuery<T> Represent result of projection operation. IQuery<T> Interface, which describe class for executing query. Instance which implement this interface can be used for creating and executing query for T model. IQueryBase<T> Interface, which describe class for executing query. Instance which implement this interface can be used for creating and executing query for T model. IQueryProvider Interface for provider, which know execute query. IQueryProviderFactory Interface, which describe factory for creating provider."
  },
  "api/Kros.Utils/Kros.Data.Schema.ColumnSchema.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.ColumnSchema.html",
    "title": "Class ColumnSchema | Kros.Libs",
    "keywords": "Class ColumnSchema Schéma stĺpca databázovej tabuľky. Inheritance System.Object ColumnSchema SqlServerColumnSchema Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public abstract class ColumnSchema Constructors ColumnSchema(String, Boolean, Object, Int32) Vytvorí inštanciu schémy stĺpca s menom name a ostatnými hodnotami. Declaration public ColumnSchema(string name, bool allowNull, object defaultValue, int size) Parameters Type Name Description System.String name Meno stĺpca. System.Boolean allowNull Určuje, či stĺpec má povolenú NULL hodnotu. System.Object defaultValue Predvolená hodnota stĺpca. System.Int32 size Maximálna dĺžka textových stĺpcov. Ak je neobmedzená, hodnota je 0 . Exceptions Type Condition System.ArgumentNullException Meno stĺpca name má hodnotu null . System.ArgumentException Meno stĺpca name nie je zadané: je prázdny reťazec, alebo reťazec bielych znakov. Fields DefaultAllowNull Predvolené nastavenie pre AllowNull . Hodnota je false . Declaration public const bool DefaultAllowNull = true Field Value Type Description System.Boolean DefaultDefaultValue Predvolená hodnota stĺpca, ktorá sa použije, ak nie je žiadna definovaná. Hodnota je System.DBNull . Declaration public static readonly object DefaultDefaultValue Field Value Type Description System.Object DefaultSize Predvolená hodnota pre Size . Hodnota je 0 . Declaration public const int DefaultSize = 0 Field Value Type Description System.Int32 Properties AllowNull Určuje, či stĺpec má povolenú NULL hodnotu. Declaration public bool AllowNull { get; set; } Property Value Type Description System.Boolean DbType Dátový typ stĺpca ako hodnota enumerátu DbType . Declaration public abstract DbType DbType { get; } Property Value Type Description System.Data.DbType DefaultValue Predvolená hodnota stĺpca. Declaration public object DefaultValue { get; set; } Property Value Type Description System.Object FullName Plné meno stĺpca aj s názvom tabuľky, ak stĺpec nejakej tabuľke patrí. Declaration public string FullName { get; } Property Value Type Description System.String Name Meno stĺpca. Declaration public string Name { get; } Property Value Type Description System.String Size Maximálna dĺžka textových stĺpcov. Ak je neobmedzená, hodnota je 0 . Declaration public int Size { get; set; } Property Value Type Description System.Int32 Table Tabuľka, ktorej stĺpec patrí. Tabuľka je nastavená automaticky pri pridaní stĺpca do zoznamu ColumnSchemaCollection . Declaration public TableSchema Table { get; } Property Value Type Description TableSchema Methods SetParameterDbType(IDataParameter) Parametru param nastaví dátový typ. Declaration public abstract void SetParameterDbType(IDataParameter param) Parameters Type Name Description System.Data.IDataParameter param Parameter pre databázové príkazy System.Data.IDbCommand . ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() ToStringDefaultValue() Vráti predvolenú hodnotu stĺpca. Tá sapoužije v metóde ToString() . Declaration protected virtual object ToStringDefaultValue() Returns Type Description System.Object Ak predvolená hodnota je System.DBNull , je vrátený reťazec NULL . Inak je vrátená samotná predvolená hodnota DefaultValue ."
  },
  "api/Kros.Utils.MsAccess/Kros.Data.BulkActions.MsAccess.MsAccessBulkUpdate.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.BulkActions.MsAccess.MsAccessBulkUpdate.html",
    "title": "Class MsAccessBulkUpdate | Kros.Libs",
    "keywords": "Class MsAccessBulkUpdate Trieda umožňujúca rýchlu hromadnú editáciu dát pre Ms Access. Inheritance System.Object BulkUpdateBase MsAccessBulkUpdate Implements IBulkUpdate Inherited Members BulkUpdateBase.PrefixTempTable BulkUpdateBase._connection BulkUpdateBase._disposeOfConnection BulkUpdateBase.ExternalTransaction BulkUpdateBase.DestinationTableName BulkUpdateBase.TempTableAction BulkUpdateBase.PrimaryKeyColumn BulkUpdateBase.Update(IBulkActionDataReader) BulkUpdateBase.Update(IDataReader) BulkUpdateBase.Update(DataTable) BulkUpdateBase.DoneTempTable(String) BulkUpdateBase.GetColumnNamesForTempTable(IDataReader) BulkUpdateBase.GetUpdateColumnNames(IDataReader, String) BulkUpdateBase.Dispose() Namespace : Kros.Data.BulkActions.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessBulkUpdate : BulkUpdateBase, IBulkUpdate, IDisposable Remarks Používa tempovú databazázu. Examples Constructors MsAccessBulkUpdate(OleDbConnection) Inicializuje novú inštanciu MsAccessBulkUpdate použitím spojenia na databázu connection . Declaration public MsAccessBulkUpdate(OleDbConnection connection) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Spojenie na databázu, kam sa vložia dáta. Spojenie musí byť otvorené. MsAccessBulkUpdate(OleDbConnection, OleDbTransaction) Inicializuje novú inštanciu MsAccessBulkUpdate použitím spojenia na databázu connection a externej transakcie externalTransaction . Declaration public MsAccessBulkUpdate(OleDbConnection connection, OleDbTransaction externalTransaction) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Spojenie na databázu, kam sa vložia dáta. Spojenie musí byť otvorené. Ak je na spojení spustená transakcia, musí byť zadaná v parametri externalTransaction . System.Data.OleDb.OleDbTransaction externalTransaction Externá transakcia, v ktorej hromadné vloženie prebehne. MsAccessBulkUpdate(String) Inicializuje novú inštanciu MsAccessBulkUpdate použitím spojenia na databázu connectionString . Declaration public MsAccessBulkUpdate(string connectionString) Parameters Type Name Description System.String connectionString Spojenie na databázu, kam sa vložia dáta. Methods CreateBulkInsert() Declaration protected override IBulkInsert CreateBulkInsert() Returns Type Description IBulkInsert Overrides BulkUpdateBase.CreateBulkInsert() CreateCommandForPrimaryKey() Declaration protected override IDbCommand CreateCommandForPrimaryKey() Returns Type Description System.Data.IDbCommand Overrides BulkUpdateBase.CreateCommandForPrimaryKey() CreateTempTable(IDataReader, String) Declaration protected override void CreateTempTable(IDataReader reader, string tempTableName) Parameters Type Name Description System.Data.IDataReader reader System.String tempTableName Overrides BulkUpdateBase.CreateTempTable(IDataReader, String) Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides BulkUpdateBase.Dispose(Boolean) GetTempTableName() Declaration protected override string GetTempTableName() Returns Type Description System.String Overrides BulkUpdateBase.GetTempTableName() GetTempTableNameForBulkInsert(String) Declaration protected override string GetTempTableNameForBulkInsert(string name) Parameters Type Name Description System.String name Returns Type Description System.String Overrides BulkUpdateBase.GetTempTableNameForBulkInsert(String) InvokeAction(String) Declaration protected override void InvokeAction(string tempTableName) Parameters Type Name Description System.String tempTableName Overrides BulkUpdateBase.InvokeAction(String) UpdateDestinationTable(IDataReader, String) Declaration protected override void UpdateDestinationTable(IDataReader reader, string tempTableName) Parameters Type Name Description System.Data.IDataReader reader System.String tempTableName Overrides BulkUpdateBase.UpdateDestinationTable(IDataReader, String) Implements IBulkUpdate"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.html",
    "title": "Class MsAccessSchemaLoader | Kros.Libs",
    "keywords": "Class MsAccessSchemaLoader Implementácia IDatabaseSchemaLoader<T> , ktorá načítava schému MS Access databáz. Inheritance System.Object MsAccessSchemaLoader Implements IDatabaseSchemaLoader < System.Data.OleDb.OleDbConnection > IDatabaseSchemaLoader Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessSchemaLoader : IDatabaseSchemaLoader<OleDbConnection>, IDatabaseSchemaLoader Methods GetDefaultValueString(String) Upraví reťazec predvolenej hodnoty, ktorý je uložený priamo v databáze, aby bol vhodný na parsovanie. Declaration protected virtual string GetDefaultValueString(string rawDefaultValueString) Parameters Type Name Description System.String rawDefaultValueString Reťazec predvolenej hodnoty stĺpca uložený priamo v databáze. Returns Type Description System.String Upravený reťazec. Z oboch koncov vstupného reťazca odstráni apostrofy a úvodzovky. LoadSchema(OleDbConnection) Načíta celú schému databázy určenej spojením connection . Declaration public DatabaseSchema LoadSchema(OleDbConnection connection) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Spojenie na databázu. Returns Type Description DatabaseSchema Vráti schému celej databázy. Remarks Štandardne sa na získanie schémy vytvorí nové spojenie na databázu podľa vstupného spojenia connection . Ak je však vstupné spojenie exkluzívne, použije sa priamo. Exceptions Type Condition System.ArgumentNullException Hodnota connection je null . System.ArgumentException Spojenie connection nie je spojenie na MS Access databázu. LoadTableSchema(OleDbConnection, String) Načíta schému tabuľky tableName z databázy connection . Declaration public TableSchema LoadTableSchema(OleDbConnection connection, string tableName) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Spojenie na databázu. System.String tableName Meno tabuľky, ktorej schéma sa načíta. Returns Type Description TableSchema Vráti načítanú schému tabuľky, alebo hodnotu null , ak taká tabuľka neexistuje. Remarks Štandardne sa na získanie schémy vytvorí nové spojenie na databázu podľa vstupného spojenia connection . Ak je však vstupné spojenie exkluzívne, použije sa priamo. Exceptions Type Condition System.ArgumentNullException Hodnota connection je null . System.ArgumentException Spojenie connection nie je spojenie na MS Access databázu. System.ArgumentException Názov tabuľky tableName má hodnotu null , alebo je to prázdny reťazec, alebo je zložený len z bielych znakov. OnParseDefaultValue(MsAccessParseDefaultValueEventArgs) Vyvolá udalosť ParseDefaultValue . Declaration protected virtual void OnParseDefaultValue(MsAccessParseDefaultValueEventArgs e) Parameters Type Name Description MsAccessParseDefaultValueEventArgs e Argumenty udalosti. SupportsConnectionType(OleDbConnection) Kontroluje, či dokáže načítať schému zo spojenia connection , tzn. či zadané spojenie je spojenie na MS Access databázu. Declaration public bool SupportsConnectionType(OleDbConnection connection) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Spojenie na databázu. Returns Type Description System.Boolean true , ak je možné načítať schému databázy, false , ak to možné nie je. Events ParseDefaultValue Udalosť vyvolaná pri parsovaní predvolenej hodnoty stĺpca. V obsluhe je možné predvolenú hodnotu parsovať vlastným spôsobom, ak interné parsovanie zlyhalo. Declaration public event EventHandler<MsAccessParseDefaultValueEventArgs> ParseDefaultValue Event Type Type Description System.EventHandler < MsAccessParseDefaultValueEventArgs > Remarks V obsluhe udalosti je možné spraviť vlatné parsovanie predvolenej hodnoty stĺpca. Ak je v obsluhe predvolená hodnota rozparsovaná, je potrebné ju nastaviť v argumente DefaultValue a zároveň je potrebné nastaviť Handled na true . Explicit Interface Implementations IDatabaseSchemaLoader.LoadSchema(Object) Načíta celú schému databázy určenej spojením connection . Declaration DatabaseSchema IDatabaseSchemaLoader.LoadSchema(object connection) Parameters Type Name Description System.Object connection Spojenie na databázu. Returns Type Description DatabaseSchema Vráti schému celej databázy. Remarks Štandardne sa na získanie schémy vytvorí nové spojenie na databázu podľa vstupného spojenia connection . Ak je však vstupné spojenie exkluzívne, použije sa priamo. Exceptions Type Condition System.ArgumentNullException Hodnota connection je null . System.ArgumentException Spojenie connection nie je spojenie na MS Access databázu. IDatabaseSchemaLoader.LoadTableSchema(Object, String) Načíta schému tabuľky tableName z databázy connection . Declaration TableSchema IDatabaseSchemaLoader.LoadTableSchema(object connection, string tableName) Parameters Type Name Description System.Object connection Spojenie na databázu. System.String tableName Meno tabuľky, ktorej schéma sa načíta. Returns Type Description TableSchema Vráti načítanú schému tabuľky, alebo hodnotu null , ak taká tabuľka neexistuje. Remarks Štandardne sa na získanie schémy vytvorí nové spojenie na databázu podľa vstupného spojenia connection . Ak je však vstupné spojenie exkluzívne, použije sa priamo. Exceptions Type Condition System.ArgumentNullException Hodnota connection je null . System.ArgumentException Spojenie connection nie je spojenie na MS Access databázu. System.ArgumentException Názov tabuľky tableName má hodnotu null , alebo je to prázdny reťazec, alebo je zložený len z bielych znakov. IDatabaseSchemaLoader.SupportsConnectionType(Object) Kontroluje, či dokáže načítať schému zo spojenia connection , tzn. či zadané spojenie je spojenie na MS Access databázu. Declaration bool IDatabaseSchemaLoader.SupportsConnectionType(object connection) Parameters Type Name Description System.Object connection Spojenie na databázu. Returns Type Description System.Boolean true , ak je možné načítať schému databázy, false , ak to možné nie je. Implements IDatabaseSchemaLoader<T> IDatabaseSchemaLoader"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.html",
    "title": "Namespace Kros.Data.Schema.MsAccess | Kros.Libs",
    "keywords": "Namespace Kros.Data.Schema.MsAccess Classes MsAccessCacheKeyGenerator Generátor kľúča pre MS Access databázu. MsAccessColumnSchema Schéma stĺpca MS Access databázy. MsAccessParseDefaultValueEventArgs Argumenty pre udalosť ParseDefaultValue . MsAccessSchemaLoader Implementácia IDatabaseSchemaLoader<T> , ktorá načítava schému MS Access databáz. MsAccessSchemaLoader.ColumnsSchemaNames MsAccessSchemaLoader.IndexesSchemaNames MsAccessSchemaLoader.ProceduresSchemaNames MsAccessSchemaLoader.SchemaNames MsAccessSchemaLoader.TablesSchemaNames MsAccessSchemaLoader.TableTypes MsAccessSchemaLoader.ViewsSchemaNames"
  },
  "api/Kros.Utils/Kros.Data.BulkActions.IBulkInsert.html": {
    "href": "api/Kros.Utils/Kros.Data.BulkActions.IBulkInsert.html",
    "title": "Interface IBulkInsert | Kros.Libs",
    "keywords": "Interface IBulkInsert Rozhranie pre rýchle hromadné vkladanie dát do databázy. Namespace : Kros.Data.BulkActions Assembly : Kros.Utils.dll Syntax public interface IBulkInsert : IDisposable Properties BatchSize Počet riadkov v dávke, ktorá sa posiela do databázy. Ak je hodnota 0, veľkosť dávky nie je obmedzená. Declaration int BatchSize { get; set; } Property Value Type Description System.Int32 BulkInsertTimeout Počet sekúnd na dokončenie operácie. ak je hodnota 0, trvanie operácie nie je obmedzené. Declaration int BulkInsertTimeout { get; set; } Property Value Type Description System.Int32 DestinationTableName Meno cieľovej tabuľky v databáze. Declaration string DestinationTableName { get; set; } Property Value Type Description System.String Methods Insert(IBulkActionDataReader) Vloží všetky dáta zo zdroja reader . Declaration void Insert(IBulkActionDataReader reader) Parameters Type Name Description IBulkActionDataReader reader Zdroj dát. Insert(DataTable) Vloží všetky riadky z tabuľky table . Declaration void Insert(DataTable table) Parameters Type Name Description System.Data.DataTable table Zdrojové dáta. Insert(IDataReader) Vloží všetky dáta zo zdroja reader . Declaration void Insert(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Zdroj dát."
  },
  "api/Kros.Utils/Kros.Data.BulkActions.IBulkActionDataReader.html": {
    "href": "api/Kros.Utils/Kros.Data.BulkActions.IBulkActionDataReader.html",
    "title": "Interface IBulkActionDataReader | Kros.Libs",
    "keywords": "Interface IBulkActionDataReader Rozhranie pre zdroj dát pre IBulkInsert . Namespace : Kros.Data.BulkActions Assembly : Kros.Utils.dll Syntax public interface IBulkActionDataReader : IDisposable Properties FieldCount Počet stĺpcov v dátovom riadku. Declaration int FieldCount { get; } Property Value Type Description System.Int32 Methods GetName(Int32) Vráti názov stĺpca. Declaration string GetName(int i) Parameters Type Name Description System.Int32 i Index hľadaného stĺpca. Returns Type Description System.String Meno stĺpca. Exceptions Type Condition System.IndexOutOfRangeException Zadaný index bol mimo rozsah stĺpcov 0 až FieldCount . GetOrdinal(String) Vráti index stĺpca s menom name . Declaration int GetOrdinal(string name) Parameters Type Name Description System.String name Meno hľadaného stĺpca. Returns Type Description System.Int32 Index hľadaného stĺpca. GetValue(Int32) Vráti hodnotu zadaného stĺpca. Declaration object GetValue(int i) Parameters Type Name Description System.Int32 i Index stĺpca, ktorého hodnota sa vracia. Returns Type Description System.Object Objekt - hodnota daného stĺpca. Exceptions Type Condition System.IndexOutOfRangeException Zadaný index bol mimo rozsah stĺpcov 0 až FieldCount . Read() Posunie reader na ďalší záznam. Declaration bool Read() Returns Type Description System.Boolean true , ak existuje ďalší záznam a reader bol posunutý, false ak už ďalší záznam neexistuje."
  },
  "api/Kros.Utils/Kros.Data.Schema.IndexColumnSchemaCollection.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.IndexColumnSchemaCollection.html",
    "title": "Class IndexColumnSchemaCollection | Kros.Libs",
    "keywords": "Class IndexColumnSchemaCollection Zoznam stĺpcov indexu tabuľky. Inheritance System.Object System.Collections.ObjectModel.Collection < IndexColumnSchema > System.Collections.ObjectModel.KeyedCollection < System.String , IndexColumnSchema > IndexColumnSchemaCollection Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class IndexColumnSchemaCollection : KeyedCollection<string, IndexColumnSchema>, IList<IndexColumnSchema>, ICollection<IndexColumnSchema>, IList, ICollection, IReadOnlyList<IndexColumnSchema>, IReadOnlyCollection<IndexColumnSchema>, IEnumerable<IndexColumnSchema>, IEnumerable Remarks Stĺpcom pridaným do zoznamu je automaticky nastavený index Index . Do zoznamu nie je možné pridať stĺpec, ktorý už patrí inému indexu. V takom prípade je vyvolaná výnimka System.InvalidOperationException . Constructors IndexColumnSchemaCollection(IndexSchema) Vytvorí zoznam stĺpcov pre index index . Declaration public IndexColumnSchemaCollection(IndexSchema index) Parameters Type Name Description IndexSchema index Index. Exceptions Type Condition System.ArgumentNullException Hodnota index je null . Properties Index Index, ktorému zoznam patrí. Declaration public IndexSchema Index { get; } Property Value Type Description IndexSchema Methods Add(String) Vytvorí nový stĺpec v zozname s menom columnName a zoradením Ascending . Declaration public IndexColumnSchema Add(string columnName) Parameters Type Name Description System.String columnName Meno stĺpca. Returns Type Description IndexColumnSchema Vytvorený stĺpec. Exceptions Type Condition System.ArgumentNullException Hodnota columnName je null . System.ArgumentException Hodnota columnName je prázdny reťazec, alebo reťazec bielych znakov. Add(String, SortOrder) Vytvorí nový stĺpec v zozname s menom columnName a zoradením order . Declaration public IndexColumnSchema Add(string columnName, SortOrder order) Parameters Type Name Description System.String columnName Meno stĺpca. SortOrder order Zoradenie stĺpca. Returns Type Description IndexColumnSchema Vytvorený stĺpec. Exceptions Type Condition System.ArgumentNullException Hodnota columnName je null . System.ArgumentException Hodnota columnName je prázdny reťazec, alebo reťazec bielych znakov. GetKeyForItem(IndexColumnSchema) Declaration protected override string GetKeyForItem(IndexColumnSchema item) Parameters Type Name Description IndexColumnSchema item Returns Type Description System.String Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.IndexColumnSchema>.GetKeyForItem(Kros.Data.Schema.IndexColumnSchema) InsertItem(Int32, IndexColumnSchema) Declaration protected override void InsertItem(int index, IndexColumnSchema item) Parameters Type Name Description System.Int32 index IndexColumnSchema item Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.IndexColumnSchema>.InsertItem(System.Int32, Kros.Data.Schema.IndexColumnSchema) RemoveItem(Int32) Declaration protected override void RemoveItem(int index) Parameters Type Name Description System.Int32 index Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.IndexColumnSchema>.RemoveItem(System.Int32)"
  },
  "api/Kros.Utils/Kros.UnitTests.SqlServerTestHelper.html": {
    "href": "api/Kros.Utils/Kros.UnitTests.SqlServerTestHelper.html",
    "title": "Class SqlServerTestHelper | Kros.Libs",
    "keywords": "Class SqlServerTestHelper Pomocná trieda na testovanie databázových vecí v reálnej SQL Server databáze. Inheritance System.Object SqlServerTestHelper Namespace : Kros.UnitTests Assembly : Kros.Utils.dll Syntax public class SqlServerTestHelper : IDisposable Remarks Štandardne sú testy robené tak, aby nebežali nad reálnou databázou, ale iba nad nejakým rozhraním, ktoré sa ako databáza tvári. Pre niektoré testy je však potrebné reálne otestovať funkčnosť voči skutočnej databáze. Trieda sa stará o to, že vytvorí novú databázu s náhodným menom a vráti spojenie na ňu, ktoré je možné používať ( Connection ). Examples Constructors SqlServerTestHelper(String, String) Vytvorí inštanciu so zadanými parametrami. Vytvorená databáza bude prázdna. Declaration public SqlServerTestHelper(string baseConnectionString, string baseDatabaseName) Parameters Type Name Description System.String baseConnectionString Základný connection string na SQL Server, kde sa vytvorí databáza. System.String baseDatabaseName Základné meno databázy, ku ktorému sa pridá náhodný GUID. Nemusí byť zadané. SqlServerTestHelper(String, String, IEnumerable<String>) Vytvorí inštanciu so zadanými parametrami a vytvorenú databázu inicializuje skriptami initDatabaseScripts . Declaration public SqlServerTestHelper(string baseConnectionString, string baseDatabaseName, IEnumerable<string> initDatabaseScripts) Parameters Type Name Description System.String baseConnectionString Základný connection string na SQL Server, kde sa vytvorí databáza. System.String baseDatabaseName Základné meno databázy, ku ktorému sa pridá náhodný GUID. Nemusí byť zadané. System.Collections.Generic.IEnumerable < System.String > initDatabaseScripts Zoznam skriptov, ktoré sa spustia a inicializujú tak novovytvorenú databázu. Môžu to byť napríklad skripty na vytvorenie a naplnenie potrebných tabuliek. SqlServerTestHelper(String, String, String) Vytvorí inštanciu so zadanými parametrami a vytvorenú databázu inicializuje skriptom initDatabaseScript . Declaration public SqlServerTestHelper(string baseConnectionString, string baseDatabaseName, string initDatabaseScript) Parameters Type Name Description System.String baseConnectionString Základný connection string na SQL Server, kde sa vytvorí databáza. System.String baseDatabaseName Základné meno databázy, ku ktorému sa pridá náhodný GUID. Nemusí byť zadané. System.String initDatabaseScript Skript, ktorý sa spustí a inicializuje tak novovytvorenú databázu. Môže to byť napríklad skript na vytvorenie a naplnenie potrebných tabuliek. Properties BaseConnectionString Základný connection string na SQL Server, kde bude vytvorená dočasná databáza. Connection string nemusí mať zdané meno databázy, pretože to bude aj tak vygenerované vlastné. Declaration public string BaseConnectionString { get; } Property Value Type Description System.String BaseDatabaseName Základný názov databázy. K tomuto názvu sa pridá náhdoný GUID, aby bola databáza jednoznačná. Ak tento názov nebol zadaný, meno databázy bude iba náhodný GUID. Declaration public string BaseDatabaseName { get; } Property Value Type Description System.String Connection Spojenie na vytvorenú databázu. Declaration public SqlConnection Connection { get; } Property Value Type Description System.Data.SqlClient.SqlConnection Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing GenerateDatabaseName() Vygeneruje názov databázy, ktorá sa na serveri vytvorí. Názov je zložený z BaseDatabaseName a pridaný je k nemu GUID. Declaration protected virtual string GenerateDatabaseName() Returns Type Description System.String Názov databázy. InitDatabase() Inicializuje databázu. Metóda je volaná po vytvorení databázy a štandardne spustí skript(y), ktoré boli zadané v konštruktore. Metóda sa volá iba raz, po vytvorení databázy. Declaration protected virtual void InitDatabase()"
  },
  "api/Kros.Utils/Kros.Data.Schema.IDatabaseSchemaLoader-1.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.IDatabaseSchemaLoader-1.html",
    "title": "Interface IDatabaseSchemaLoader<T> | Kros.Libs",
    "keywords": "Interface IDatabaseSchemaLoader<T> Rozhranie pre triedy, načítavajúce schému databázy. Inherited Members IDatabaseSchemaLoader.SupportsConnectionType(Object) IDatabaseSchemaLoader.LoadSchema(Object) IDatabaseSchemaLoader.LoadTableSchema(Object, String) Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public interface IDatabaseSchemaLoader<T> : IDatabaseSchemaLoader Type Parameters Name Description T Typ spojenia na databázu, s ktorým pracuje daná trieda. Methods LoadSchema(T) Načíta celú schému databázy určenej spojením connection . Declaration DatabaseSchema LoadSchema(T connection) Parameters Type Name Description T connection Spojenie na databázu. Returns Type Description DatabaseSchema Vráti schému celej databázy. LoadTableSchema(T, String) Načíta schému tabuľky tableName z databázy connection . Declaration TableSchema LoadTableSchema(T connection, string tableName) Parameters Type Name Description T connection Spojenie na databázu. System.String tableName Meno tabuľky, ktorej schéma sa načíta. Returns Type Description TableSchema Vráti načítanú schému tabuľky, alebo hodnotu null , ak taká tabuľka neexistuje. SupportsConnectionType(T) Kontroluje, či trieda dokáže načítať schému zo zadaného spojenia connection . Declaration bool SupportsConnectionType(T connection) Parameters Type Name Description T connection Spojenie na databázu. Returns Type Description System.Boolean true , ak je možné načítať schému databázy, false , ak to možné nie je."
  },
  "api/Kros.Utils/Kros.Caching.Cache-2.html": {
    "href": "api/Kros.Utils/Kros.Caching.Cache-2.html",
    "title": "Class Cache<TKey, TValue> | Kros.Libs",
    "keywords": "Class Cache<TKey, TValue> Class for caching data. Inheritance System.Object Cache<TKey, TValue> Implements ICache <TKey, TValue> Namespace : Kros.Caching Assembly : Kros.Utils.dll Syntax public class Cache<TKey, TValue> : ICache<TKey, TValue> Type Parameters Name Description TKey The type of the key. TValue The type of the value. Constructors Cache() Initializes a new instance of the Cache<TKey, TValue> class. Declaration public Cache() Cache(IEqualityComparer<TKey>) Initializes a new instance of the Cache<TKey, TValue> class. Declaration public Cache(IEqualityComparer<TKey> comparer) Parameters Type Name Description System.Collections.Generic.IEqualityComparer <TKey> comparer The System.Collections.Generic.IEqualityComparer<T> implementation to use when comparing keys. Properties Count Gets the count of cached data. Declaration public int Count { get; } Property Value Type Description System.Int32 Methods Clear() Clears the cache. Declaration public void Clear() Get(TKey, Func<TValue>) Gets the cached value by key. Declaration public TValue Get(TKey key, Func<TValue> factory) Parameters Type Name Description TKey key The key. System.Func <TValue> factory The factory for creating value, if doesn't exist in cahce. Returns Type Description TValue Value from Cache. Remarks If value key doesn't exist in cache, then factory is use for creating value and value is set to cache. Implements ICache<TKey, TValue> See Also ICache <TKey, TValue>"
  },
  "api/Kros.Utils/Kros.Utils.IDiContainer.html": {
    "href": "api/Kros.Utils/Kros.Utils.IDiContainer.html",
    "title": "Interface IDiContainer | Kros.Libs",
    "keywords": "Interface IDiContainer Interface for DI (Dependency Injection) container. Namespace : Kros.Utils Assembly : Kros.Utils.dll Syntax public interface IDiContainer : IDisposable Methods CreateChildContainer() Create a child container. Declaration IDiContainer CreateChildContainer() Returns Type Description IDiContainer The new child container. Remarks A child container shares the parent's configuration, but can be configured with different settings or lifetime. GetInstance(Type) Resolves the instance of type instanceType . Declaration object GetInstance(Type instanceType) Parameters Type Name Description System.Type instanceType Type to resolve from container. Returns Type Description System.Object Object of type instanceType . GetInstance(Type, String) Resolves the named instance of type instanceType . Declaration object GetInstance(Type instanceType, string name) Parameters Type Name Description System.Type instanceType Type to resolve from container. System.String name Name of the desired instance. Returns Type Description System.Object Object of type instanceType . GetInstance<T>() Resolves the instance of type T . Declaration T GetInstance<T>() Returns Type Description T Object of type T . Type Parameters Name Description T Type to resolve from container. GetInstance<T>(String) Resolves the named instance of type T . Declaration T GetInstance<T>(string name) Parameters Type Name Description System.String name Name of the desired instance. Returns Type Description T Object of type T . Type Parameters Name Description T Type to resolve from container. Register<T>() Registers a class type. Declaration IDiContainer Register<T>() Returns Type Description IDiContainer Container instance for fluent registration. Type Parameters Name Description T Class type. Register<T>(Func<IDiContainer, T>) Register interface or class type using lambda function. Declaration IDiContainer Register<T>(Func<IDiContainer, T> lambda) Parameters Type Name Description System.Func < IDiContainer , T> lambda Function which takes current DI container as parameter and creates a new instance of T . Returns Type Description IDiContainer Type Parameters Name Description T Interface or class type. Register<T>(String) Registers a class type with name name . Declaration IDiContainer Register<T>(string name) Parameters Type Name Description System.String name Name of the registered class type. Returns Type Description IDiContainer Type Parameters Name Description T Class type. Register<T>(String, Func<IDiContainer, T>) Register named interface or class type using lambda function. Declaration IDiContainer Register<T>(string name, Func<IDiContainer, T> lambda) Parameters Type Name Description System.String name Name of the registered interface or class type. System.Func < IDiContainer , T> lambda Returns Type Description IDiContainer Type Parameters Name Description T Interface or class type. Register<TFrom, TTo>() Registers a interface-class pair. Declaration IDiContainer Register<TFrom, TTo>() where TTo : TFrom Returns Type Description IDiContainer Type Parameters Name Description TFrom Registered interface. TTo Registered class type that implements TFrom . Register<TFrom, TTo>(String) Registers a named interface-class pair. Declaration IDiContainer Register<TFrom, TTo>(string name) where TTo : TFrom Parameters Type Name Description System.String name Name of the registered interface. Returns Type Description IDiContainer Type Parameters Name Description TFrom TTo RegisterInstance<T>() Registers class type as singleton. Declaration IDiContainer RegisterInstance<T>() Returns Type Description IDiContainer Type Parameters Name Description T Registered class type. RegisterInstance<T>(T) Registers class instance. Declaration IDiContainer RegisterInstance<T>(T instance) Parameters Type Name Description T instance Registered instance. Returns Type Description IDiContainer Type Parameters Name Description T Registered class type. RegisterInstance<T>(Func<IDiContainer, T>) Registers class instance as sigleton using function. Declaration IDiContainer RegisterInstance<T>(Func<IDiContainer, T> lambda) Parameters Type Name Description System.Func < IDiContainer , T> lambda Returns Type Description IDiContainer Type Parameters Name Description T Registered class type. RegisterInstance<T>(String) Registers class type with name name as singleton. Declaration IDiContainer RegisterInstance<T>(string name) Parameters Type Name Description System.String name Name of the registered class type. Returns Type Description IDiContainer Type Parameters Name Description T Registered class type. RegisterInstance<T>(String, T) Registers class instance. Declaration IDiContainer RegisterInstance<T>(string name, T instance) Parameters Type Name Description System.String name Name of the registered class type. T instance Registered instance. Returns Type Description IDiContainer Type Parameters Name Description T Registered class type. RegisterInstance<T>(String, Func<IDiContainer, T>) Registers named class instance as sigleton using function. Declaration IDiContainer RegisterInstance<T>(string name, Func<IDiContainer, T> lambda) Parameters Type Name Description System.String name Name, under which is type registered. System.Func < IDiContainer , T> lambda Returns Type Description IDiContainer Type Parameters Name Description T Registered class type. RegisterInstance<TFrom, TTo>() Registers a interface-class pair as singleton. Declaration IDiContainer RegisterInstance<TFrom, TTo>() where TTo : TFrom Returns Type Description IDiContainer Type Parameters Name Description TFrom TTo RegisterInstance<TFrom, TTo>(String) Registers a named interface to class type pair. class type TTo as a singleton. Declaration IDiContainer RegisterInstance<TFrom, TTo>(string name) where TTo : TFrom Parameters Type Name Description System.String name Name of the registered class type. Returns Type Description IDiContainer Type Parameters Name Description TFrom TTo"
  },
  "api/Kros.Utils/Kros.Data.IIdGenerator.html": {
    "href": "api/Kros.Utils/Kros.Data.IIdGenerator.html",
    "title": "Interface IIdGenerator | Kros.Libs",
    "keywords": "Interface IIdGenerator Interfejs popisujúci tiedu, ktorá generuje unikátne identifikátory pre záznamy v tabuľke. Namespace : Kros.Data Assembly : Kros.Utils.dll Syntax public interface IIdGenerator : IDisposable Remarks Jedna inštancia generuje vždy pre jednu tabuľku. Examples Methods GetNext() Vráti identifikátor pre ďalší záznam. Declaration int GetNext() Returns Type Description System.Int32 Unikátny identifikátor pre záznam v tabuľke. See Also System.IDisposable SqlServerIdGenerator"
  },
  "api/Kros.Utils/Kros.Data.IdGeneratorFactories.html": {
    "href": "api/Kros.Utils/Kros.Data.IdGeneratorFactories.html",
    "title": "Class IdGeneratorFactories | Kros.Libs",
    "keywords": "Class IdGeneratorFactories Reprezentuje množinu registrovaných IIdGeneratorFactory . Umožňuje ich registráciu a získavanie. Inheritance System.Object IdGeneratorFactories Namespace : Kros.Data Assembly : Kros.Utils.dll Syntax public static class IdGeneratorFactories Methods GetFactory(DbConnection) Získanie IIdGeneratorFactory so špecifickou connection. Declaration public static IIdGeneratorFactory GetFactory(DbConnection connection) Parameters Type Name Description System.Data.Common.DbConnection connection Connection, ktorá sa použije pre vykonanie dotazu na získanie identifikátorov. Returns Type Description IIdGeneratorFactory Inštancia IIdGeneratorFactory . GetFactory(String, String) Získanie IIdGeneratorFactory so špecifickým connection stringom. Declaration public static IIdGeneratorFactory GetFactory(string connectionString, string adoClientName) Parameters Type Name Description System.String connectionString Connection string, na základe ktorého sa vytvorí connection pre vykonanie dotazu na získanie identifikátorov. System.String adoClientName Názov ado clienta. (napr. pre System.Data.SqlClient.SqlConnection to je: System.Data.SqlClient) Returns Type Description IIdGeneratorFactory Inštancia IIdGeneratorFactory . Register<TConnection>(String, Func<DbConnection, IIdGeneratorFactory>, Func<String, IIdGeneratorFactory>) Registruje factory metódu pre vytvorenie IIdGeneratorFactory na základe connection a connection stringu. Declaration public static void Register<TConnection>(string adoClientName, Func<DbConnection, IIdGeneratorFactory> factoryByConnection, Func<string, IIdGeneratorFactory> factoryByConnectionString) where TConnection : DbConnection Parameters Type Name Description System.String adoClientName Názov ado clienta. (napr. pre System.Data.SqlClient.SqlConnection to je: System.Data.SqlClient) System.Func < System.Data.Common.DbConnection , IIdGeneratorFactory > factoryByConnection Factory metóda na vytvorenie IIdGeneratorFactory so špecifickým connection stringom. System.Func < System.String , IIdGeneratorFactory > factoryByConnectionString Factory metóda na vytvorenie IIdGeneratorFactory so špecifickým connection stringom. Type Parameters Name Description TConnection Typ connection. See Also IIdGeneratorFactory IIdGenerator IdGeneratorFactories"
  },
  "api/Kros.Utils/Kros.Utils.Check.html": {
    "href": "api/Kros.Utils/Kros.Utils.Check.html",
    "title": "Class Check | Kros.Libs",
    "keywords": "Class Check Pomocná trieda na kontrolu argumentov metód. Každá kontrola, ak zlyhá, vyvolá nejaký druh výnimky ArgumentException ( System.ArgumentException , System.ArgumentNullException , System.ArgumentOutOfRangeException ). Inheritance System.Object Check Namespace : Kros.Utils Assembly : Kros.Utils.dll Syntax public static class Check Remarks Štandardný spôsob kontroly argumentov je: S triedou Check je to jednoduché. Ak je to možné, jednotlivé kontroly vracajú vstupnú hodnotu, takže je možné na jednom riadku argument skontrolovať, aj priradiť: Methods Equal<T>(T, T, String) Hodnota parametra param musí byť value . Vyvolaná výnimka má nastavené meno parametra. Declaration public static T Equal<T>(T param, T value, string paramName) Parameters Type Name Description T param Parameter. T value Požadovaná hodnota parametera. System.String paramName Meno parametra. Returns Type Description T Vstupný parameter param . Type Parameters Name Description T Typ parametra. Exceptions Type Condition System.ArgumentException Parameter nemá požadovanú hodnotu. Equal<T>(T, T, String, String) Hodnota parametra param musí byť value . Vyvolaná výnimka má nastavený text a meno parametra. Declaration public static T Equal<T>(T param, T value, string paramName, string message) Parameters Type Name Description T param Parameter. T value Požadovaná hodnota parametera. System.String paramName Meno parametra. System.String message Text výnimky. Returns Type Description T Vstupný parameter param . Type Parameters Name Description T Typ parametra. Exceptions Type Condition System.ArgumentException Parameter nemá požadovanú hodnotu. GreaterOrEqualThan<T>(T, T, String) Hodnota parametra param musí byť väčšia, alebo rovná value . Vyvolaná výnimka má nastavené meno parametra. Declaration public static T GreaterOrEqualThan<T>(T param, T value, string paramName) where T : IComparable<T> Parameters Type Name Description T param Parameter. T value Hodnota, s ktorou sa parameter porovnáva. System.String paramName Meno parametra. Returns Type Description T Vstupný parameter param . Type Parameters Name Description T Typ parametra. Exceptions Type Condition System.ArgumentException Hodnota parametra je menšia zadanej hodnote. GreaterOrEqualThan<T>(T, T, String, String) Hodnota parametra param musí byť väčšia, alebo rovná value . Vyvolaná výnimka má nastavený text a meno parametra. Declaration public static T GreaterOrEqualThan<T>(T param, T value, string paramName, string message) where T : IComparable<T> Parameters Type Name Description T param Parameter. T value Hodnota, s ktorou sa parameter porovnáva. System.String paramName Meno parametra. System.String message Text výnimky. Returns Type Description T Vstupný parameter param . Type Parameters Name Description T Typ parametra. Exceptions Type Condition System.ArgumentException Hodnota parametra je menšia zadanej hodnote. GreaterThan<T>(T, T, String) Hodnota parametra param musí byť väčšia ako value . Vyvolaná výnimka má nastavené meno parametra. Declaration public static T GreaterThan<T>(T param, T value, string paramName) where T : IComparable<T> Parameters Type Name Description T param Parameter. T value Hodnota, s ktorou sa parameter porovnáva. System.String paramName Meno parametra. Returns Type Description T Vstupný parameter param . Type Parameters Name Description T Typ parametra. Exceptions Type Condition System.ArgumentException Hodnota parametra je menšia, alebo rovná zadanej hodnote. GreaterThan<T>(T, T, String, String) Hodnota parametra param musí byť väčšia ako value . Vyvolaná výnimka má nastavený text a meno parametra. Declaration public static T GreaterThan<T>(T param, T value, string paramName, string message) where T : IComparable<T> Parameters Type Name Description T param Parameter. T value Hodnota, s ktorou sa parameter porovnáva. System.String paramName Meno parametra. System.String message Text výnimky. Returns Type Description T Vstupný parameter param . Type Parameters Name Description T Typ parametra. Exceptions Type Condition System.ArgumentException Hodnota parametra je menšia, alebo rovná zadanej hodnote. IsInList<T>(T, IEnumerable<T>, String) Hodnota parametra param musí byť v zozname list . Vyvolaná výnimka má nastavené meno parametra. Declaration public static T IsInList<T>(T param, IEnumerable<T> list, string paramName) Parameters Type Name Description T param Hodnota, ktorá musí byť v zozname list . System.Collections.Generic.IEnumerable <T> list Zoznam hodnôt, medzi ktorými sa musí nachádzať hodnota param . System.String paramName Meno parametra. Returns Type Description T Vstupný parameter param . Type Parameters Name Description T Typ parametra. Exceptions Type Condition System.ArgumentException Hodnota parametra nie je v zadanom zozname. IsInList<T>(T, IEnumerable<T>, String, String) Hodnota parametra param musí byť v zozname list . Vyvolaná výnimka má nastavený text a meno parametra. Declaration public static T IsInList<T>(T param, IEnumerable<T> list, string paramName, string message) Parameters Type Name Description T param Hodnota, ktorá musí byť v zozname list . System.Collections.Generic.IEnumerable <T> list Zoznam hodnôt, medzi ktorými sa musí nachádzať hodnota param . System.String paramName Meno parametra. System.String message Text výnimky. Returns Type Description T Vstupný parameter param . Type Parameters Name Description T Typ parametra. Exceptions Type Condition System.ArgumentException Hodnota parametra nie je v zadanom zozname. IsNotInList<T>(T, IEnumerable<T>, String) Hodnota parametra param nesmie byť v zozname list . Vyvolaná výnimka má nastavené meno parametra. Declaration public static T IsNotInList<T>(T param, IEnumerable<T> list, string paramName) Parameters Type Name Description T param Hodnota, ktorá nesmie byť v zozname list . System.Collections.Generic.IEnumerable <T> list Zoznam hodnôt, medzi ktorými sa hodnota param nesmie nachádzať. System.String paramName Meno parametra. Returns Type Description T Vstupný parameter param . Type Parameters Name Description T Typ parametra. Exceptions Type Condition System.ArgumentException Hodnota parametra je v zadanom zozname. IsNotInList<T>(T, IEnumerable<T>, String, String) Hodnota parametra param nesmie byť v zozname list . Vyvolaná výnimka má nastavený text a meno parametra. Declaration public static T IsNotInList<T>(T param, IEnumerable<T> list, string paramName, string message) Parameters Type Name Description T param Hodnota, ktorá nesmie byť v zozname list . System.Collections.Generic.IEnumerable <T> list Zoznam hodnôt, medzi ktorými sa hodnota param nesmie nachádzať. System.String paramName Meno parametra. System.String message Text výnimky. Returns Type Description T Vstupný parameter param . Type Parameters Name Description T Typ parametra. Exceptions Type Condition System.ArgumentException Hodnota parametra je v zadanom zozname. IsNotOfType(Object, Type, String) Parameter param nesmie byť zadaného typu notExpectedType . Vyvolaná výnimka má nastavené meno parametra. Declaration public static void IsNotOfType(object param, Type notExpectedType, string paramName) Parameters Type Name Description System.Object param Parameter. System.Type notExpectedType Parameter nesmie byť tohto typu. System.String paramName Meno parametra. Exceptions Type Condition System.ArgumentException Parameter je zadaného typu. IsNotOfType(Object, Type, String, String) Parameter param nesmie byť zadaného typu notExpectedType . Vyvolaná výnimka má nastavený text a meno parametra. Declaration public static void IsNotOfType(object param, Type notExpectedType, string paramName, string message) Parameters Type Name Description System.Object param Parameter. System.Type notExpectedType Parameter nesmie byť tohto typu. System.String paramName Meno parametra. System.String message Text výnimky. Exceptions Type Condition System.ArgumentException Parameter je zadaného typu. IsNotOfType<T>(Object, String) Parameter param nesmie byť zadaného typu T . Vyvolaná výnimka má nastavené meno parametra. Declaration public static void IsNotOfType<T>(object param, string paramName) Parameters Type Name Description System.Object param Parameter. System.String paramName Meno parametra. Type Parameters Name Description T Parameter nesmie byť tohto typu. Exceptions Type Condition System.ArgumentException Parameter je zadaného typu. IsNotOfType<T>(Object, String, String) Parameter param nesmie byť zadaného typu T . Vyvolaná výnimka má nastavený text a meno parametra. Declaration public static void IsNotOfType<T>(object param, string paramName, string message) Parameters Type Name Description System.Object param Parameter. System.String paramName Meno parametra. System.String message Text výnimky. Type Parameters Name Description T Parameter nesmie byť tohto typu. Exceptions Type Condition System.ArgumentException Parameter je zadaného typu. IsOfType(Object, Type, String) Parameter param musí byť zadaného typu expectedType . Vyvolaná výnimka má nastavené meno parametra. Declaration public static void IsOfType(object param, Type expectedType, string paramName) Parameters Type Name Description System.Object param Parameter. System.Type expectedType Typ, ktorého musí parameter byť. System.String paramName Meno parametra. Exceptions Type Condition System.ArgumentException Parameter nie je požadovaného typu. IsOfType(Object, Type, String, String) Parameter param musí byť zadaného typu expectedType . Vyvolaná výnimka má nastavený text a meno parametra. Declaration public static void IsOfType(object param, Type expectedType, string paramName, string message) Parameters Type Name Description System.Object param Parameter. System.Type expectedType Typ, ktorého musí parameter byť. System.String paramName Meno parametra. System.String message Text výnimky. Exceptions Type Condition System.ArgumentException Parameter nie je požadovaného typu. IsOfType<T>(Object, String) Parameter param musí byť zadaného typu T . Vyvolaná výnimka má nastavené meno parametra. Declaration public static void IsOfType<T>(object param, string paramName) Parameters Type Name Description System.Object param Parameter. System.String paramName Meno parametra. Type Parameters Name Description T Typ, ktorého musí parameter byť. Exceptions Type Condition System.ArgumentException Parameter nie je požadovaného typu. IsOfType<T>(Object, String, String) Parameter param musí byť zadaného typu T . Vyvolaná výnimka má nastavený text a meno parametra. Declaration public static void IsOfType<T>(object param, string paramName, string message) Parameters Type Name Description System.Object param Parameter. System.String paramName Meno parametra. System.String message Text výnimky. Type Parameters Name Description T Typ, ktorého musí parameter byť. Exceptions Type Condition System.ArgumentException Parameter nie je požadovaného typu. LessOrEqualThan<T>(T, T, String) Hodnota parametra param musí byť menšia, alebo rovná value . Vyvolaná výnimka má nastavené meno parametra. Declaration public static T LessOrEqualThan<T>(T param, T value, string paramName) where T : IComparable<T> Parameters Type Name Description T param Parameter. T value Hodnota, s ktorou sa parameter porovnáva. System.String paramName Meno parametra. Returns Type Description T Vstupný parameter param . Type Parameters Name Description T Typ parametra. Exceptions Type Condition System.ArgumentException Hodnota parametra je väčšia zadanej hodnote. LessOrEqualThan<T>(T, T, String, String) Hodnota parametra param musí byť menšia, alebo rovná value . Vyvolaná výnimka má nastavený text a meno parametra. Declaration public static T LessOrEqualThan<T>(T param, T value, string paramName, string message) where T : IComparable<T> Parameters Type Name Description T param Parameter. T value Hodnota, s ktorou sa parameter porovnáva. System.String paramName Meno parametra. System.String message Text výnimky. Returns Type Description T Vstupný parameter param . Type Parameters Name Description T Typ parametra. Exceptions Type Condition System.ArgumentException Hodnota parametra je väčšia zadanej hodnote. LessThan<T>(T, T, String) Hodnota parametra param musí byť menšia ako value . Vyvolaná výnimka má nastavené meno parametra. Declaration public static T LessThan<T>(T param, T value, string paramName) where T : IComparable<T> Parameters Type Name Description T param Parameter. T value Hodnota, s ktorou sa parameter porovnáva. System.String paramName Meno parametra. Returns Type Description T Vstupný parameter param . Type Parameters Name Description T Typ parametra. Exceptions Type Condition System.ArgumentException Hodnota parametra je väčšia, alebo rovná zadanej hodnote. LessThan<T>(T, T, String, String) Hodnota parametra param musí byť menšia ako value . Vyvolaná výnimka má nastavený text a meno parametra. Declaration public static T LessThan<T>(T param, T value, string paramName, string message) where T : IComparable<T> Parameters Type Name Description T param Parameter. T value Hodnota, s ktorou sa parameter porovnáva. System.String paramName Meno parametra. System.String message Text výnimky. Returns Type Description T Vstupný parameter param . Type Parameters Name Description T Typ parametra. Exceptions Type Condition System.ArgumentException Hodnota parametra je väčšia, alebo rovná zadanej hodnote. NotEmptyGuid(Guid, String) Parameter param nesmie byť prázdny GUID ( System.Guid.Empty ). Vyvolaná výnimka má nastavené meno parametra. Declaration public static Guid NotEmptyGuid(Guid param, string paramName) Parameters Type Name Description System.Guid param Parameter. System.String paramName Meno parametra. Returns Type Description System.Guid Vstupný parameter param . Exceptions Type Condition System.ArgumentException Paramere je prázdny GUID ( System.Guid.Empty ). NotEmptyGuid(Guid, String, String) Parameter param nesmie byť prázdny GUID ( System.Guid.Empty ). Vyvolaná výnimka má nastavený text a meno parametra. Declaration public static Guid NotEmptyGuid(Guid param, string paramName, string message) Parameters Type Name Description System.Guid param Parameter. System.String paramName Meno parametra. System.String message Text výnimky. Returns Type Description System.Guid Vstupný parameter param . Exceptions Type Condition System.ArgumentException Paramere je prázdny GUID ( System.Guid.Empty ). NotEqual<T>(T, T, String) Hodnota parametra param nesmie byť value . Vyvolaná výnimka má nastavené meno parametra. Declaration public static T NotEqual<T>(T param, T value, string paramName) Parameters Type Name Description T param Parameter. T value Rozdielna hodnota parametera. System.String paramName Meno parametra. Returns Type Description T Vstupný parameter param . Type Parameters Name Description T Typ parametra. Exceptions Type Condition System.ArgumentException Parameter má rovnakú hodnotu. NotEqual<T>(T, T, String, String) Hodnota parametra param nesmie byť value . Vyvolaná výnimka má nastavený text a meno parametra. Declaration public static T NotEqual<T>(T param, T value, string paramName, string message) Parameters Type Name Description T param Parameter. T value Rozdielna hodnota parametera. System.String paramName Meno parametra. System.String message Text výnimky. Returns Type Description T Vstupný parameter param . Type Parameters Name Description T Typ parametra. Exceptions Type Condition System.ArgumentException Parameter má rovnakú hodnotu. NotNull<T>(T, String) Parameter param nesmie byť null . Vyvolaná výnimka má nastavené meno parametra. Declaration public static T NotNull<T>(T param, string paramName) Parameters Type Name Description T param Parameter. System.String paramName Meno parametra. Returns Type Description T Vstupný parameter param . Type Parameters Name Description T Typ vstupného parametra. Exceptions Type Condition System.ArgumentNullException Hodnota parametra param je null . NotNull<T>(T, String, String) Parameter param nesmie byť null . Vyvolaná výnimka má nastavený text a meno parametra. Declaration public static T NotNull<T>(T param, string paramName, string message) Parameters Type Name Description T param Parameter. System.String paramName Meno parametra. System.String message Text výnimky. Returns Type Description T Vstupný parameter param . Type Parameters Name Description T Typ vstupného parametra. Exceptions Type Condition System.ArgumentNullException Hodnota parametra param je null . NotNullOrEmpty(String, String) Parameter param nesmie byť null , ani prázdny reťazec. Vyvolaná výnimka má nastavené meno parametra. Declaration public static string NotNullOrEmpty(string param, string paramName) Parameters Type Name Description System.String param Parameter. System.String paramName Meno parametra. Returns Type Description System.String Vstupný parameter param . Exceptions Type Condition System.ArgumentNullException Parameter má hodnotu null . System.ArgumentException Parameter je prázdny reťazec. NotNullOrEmpty(String, String, String) Parameter param nesmie byť null , ani prázdny reťazec. Vyvolaná výnimka má nastavený text a meno parametra. Declaration public static string NotNullOrEmpty(string param, string paramName, string message) Parameters Type Name Description System.String param Parameter. System.String paramName Meno parametra. System.String message Text výnimky. Returns Type Description System.String Vstupný parameter param . Exceptions Type Condition System.ArgumentNullException Parameter má hodnotu null . System.ArgumentException Parameter je prázdny reťazec. NotNullOrWhiteSpace(String, String) Parameter param nesmie byť null , ani prázdny reťazec, ani reťazec zložený iba z bielych znakov. Vyvolaná výnimka má nastavené meno parametra. Declaration public static string NotNullOrWhiteSpace(string param, string paramName) Parameters Type Name Description System.String param Parameter. System.String paramName Meno parametra. Returns Type Description System.String Vstupný parameter param . Exceptions Type Condition System.ArgumentNullException Parameter má hodnotu null . System.ArgumentException Parameter je prázdny reťazec, alebo reťazec zložený iba z bielych znakov. NotNullOrWhiteSpace(String, String, String) Parameter param nesmie byť null , ani prázdny reťazec, ani reťazec zložený iba z bielych znakov. Vyvolaná výnimka má nastavený text a meno parametra. Declaration public static string NotNullOrWhiteSpace(string param, string paramName, string message) Parameters Type Name Description System.String param Parameter. System.String paramName Meno parametra. System.String message Text výnimky. Returns Type Description System.String Vstupný parameter param . Exceptions Type Condition System.ArgumentNullException Parameter má hodnotu null . System.ArgumentException Parameter je prázdny reťazec, alebo reťazec zložený iba z bielych znakov."
  },
  "api/Kros.Utils/Kros.Net.IWebClient.html": {
    "href": "api/Kros.Utils/Kros.Net.IWebClient.html",
    "title": "Interface IWebClient | Kros.Libs",
    "keywords": "Interface IWebClient Interface popisujúci WebClient-a. Aby sme v testoch mohli podvrhovať vlastné implementácie. Namespace : Kros.Net Assembly : Kros.Utils.dll Syntax public interface IWebClient : IDisposable Methods OpenRead(String) Opens a readable stream for the data downloaded from a resource with the URI. Declaration Stream OpenRead(string address) Parameters Type Name Description System.String address The URI from which to download data. Returns Type Description System.IO.Stream A System.IO.Stream used to read data from a resource."
  },
  "api/Kros.Utils/Kros.Data.Schema.TableSchemaCollection.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.TableSchemaCollection.html",
    "title": "Class TableSchemaCollection | Kros.Libs",
    "keywords": "Class TableSchemaCollection Zoznam tabuliek databázy. Inheritance System.Object System.Collections.ObjectModel.Collection < TableSchema > System.Collections.ObjectModel.KeyedCollection < System.String , TableSchema > TableSchemaCollection Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class TableSchemaCollection : KeyedCollection<string, TableSchema>, IList<TableSchema>, ICollection<TableSchema>, IList, ICollection, IReadOnlyList<TableSchema>, IReadOnlyCollection<TableSchema>, IEnumerable<TableSchema>, IEnumerable Remarks Tabuľkám pridaným do zoznamu je automaticky nastavená databáza Database . Do zoznamu nie je možné pridať tabuľku, ktorá už patrí inej databáze. V takom prípade je vyvolaná výnimka System.InvalidOperationException . Constructors TableSchemaCollection(DatabaseSchema) Vytvorí zoznam tabuliek pre databázu database . Declaration public TableSchemaCollection(DatabaseSchema database) Parameters Type Name Description DatabaseSchema database Databáza. Exceptions Type Condition System.ArgumentNullException Hodnota database je null . Properties Database Databáza, ktorej zoznam tabuliek patrí. Declaration public DatabaseSchema Database { get; } Property Value Type Description DatabaseSchema Methods Add(String) Vytvorí schému tabuľky s menom name a pridá ju do zoznamu. Declaration public TableSchema Add(string name) Parameters Type Name Description System.String name Meno novej tabuľky. Returns Type Description TableSchema Vytvorená schéma tabuľky. GetKeyForItem(TableSchema) Declaration protected override string GetKeyForItem(TableSchema item) Parameters Type Name Description TableSchema item Returns Type Description System.String Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.TableSchema>.GetKeyForItem(Kros.Data.Schema.TableSchema) InsertItem(Int32, TableSchema) Declaration protected override void InsertItem(int index, TableSchema item) Parameters Type Name Description System.Int32 index TableSchema item Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.TableSchema>.InsertItem(System.Int32, Kros.Data.Schema.TableSchema) RemoveItem(Int32) Declaration protected override void RemoveItem(int index) Parameters Type Name Description System.Int32 index Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.TableSchema>.RemoveItem(System.Int32)"
  },
  "api/Kros.Utils/Kros.Data.BulkActions.SqlServer.SqlServerBulkUpdate.html": {
    "href": "api/Kros.Utils/Kros.Data.BulkActions.SqlServer.SqlServerBulkUpdate.html",
    "title": "Class SqlServerBulkUpdate | Kros.Libs",
    "keywords": "Class SqlServerBulkUpdate Trieda umožňujúca rýchlu hromadnú editáciu dát pre SQL Server. Inheritance System.Object BulkUpdateBase SqlServerBulkUpdate Implements IBulkUpdate Inherited Members BulkUpdateBase.PrefixTempTable BulkUpdateBase._connection BulkUpdateBase._disposeOfConnection BulkUpdateBase.ExternalTransaction BulkUpdateBase.DestinationTableName BulkUpdateBase.TempTableAction BulkUpdateBase.PrimaryKeyColumn BulkUpdateBase.Update(IBulkActionDataReader) BulkUpdateBase.Update(IDataReader) BulkUpdateBase.Update(DataTable) BulkUpdateBase.GetTempTableNameForBulkInsert(String) BulkUpdateBase.GetColumnNamesForTempTable(IDataReader) BulkUpdateBase.GetUpdateColumnNames(IDataReader, String) BulkUpdateBase.Dispose(Boolean) BulkUpdateBase.Dispose() Namespace : Kros.Data.BulkActions.SqlServer Assembly : Kros.Utils.dll Syntax public class SqlServerBulkUpdate : BulkUpdateBase, IBulkUpdate, IDisposable Examples Constructors SqlServerBulkUpdate(SqlConnection) Inicializuje novú inštanciu SqlServerBulkUpdate použitím spojenia na databázu connection . Declaration public SqlServerBulkUpdate(SqlConnection connection) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Spojenie na databázu, kam sa vložia dáta. Spojenie musí byť otvorené. Ak je na spojení spustená transakcia, mysí sa použiť konštruktor s externou transakciou a tá musí byť zadaná. SqlServerBulkUpdate(SqlConnection, SqlTransaction) Inicializuje novú inštanciu SqlServerBulkUpdate použitím spojenia na databázu connection a externej transakcie externalTransaction . Declaration public SqlServerBulkUpdate(SqlConnection connection, SqlTransaction externalTransaction) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Spojenie na databázu, kam sa vložia dáta. Spojenie musí byť otvorené. Ak je na spojení spustená transakcia, musí byť zadaná v parametri externalTransaction . System.Data.SqlClient.SqlTransaction externalTransaction Externá transakcia, v ktorej hromadné vloženie prebehne. SqlServerBulkUpdate(String) Inicializuje novú inštanciu SqlServerBulkUpdate použitím spojenia na databázu connectionString . Declaration public SqlServerBulkUpdate(string connectionString) Parameters Type Name Description System.String connectionString Spojenie na databázu, kam sa vložia dáta. Methods CreateBulkInsert() Declaration protected override IBulkInsert CreateBulkInsert() Returns Type Description IBulkInsert Overrides BulkUpdateBase.CreateBulkInsert() CreateCommandForPrimaryKey() Declaration protected override IDbCommand CreateCommandForPrimaryKey() Returns Type Description System.Data.IDbCommand Overrides BulkUpdateBase.CreateCommandForPrimaryKey() CreateTempTable(IDataReader, String) Declaration protected override void CreateTempTable(IDataReader reader, string tempTableName) Parameters Type Name Description System.Data.IDataReader reader System.String tempTableName Overrides BulkUpdateBase.CreateTempTable(IDataReader, String) DoneTempTable(String) Declaration protected override void DoneTempTable(string tempTableName) Parameters Type Name Description System.String tempTableName Overrides BulkUpdateBase.DoneTempTable(String) GetTempTableName() Declaration protected override string GetTempTableName() Returns Type Description System.String Overrides BulkUpdateBase.GetTempTableName() InvokeAction(String) Declaration protected override void InvokeAction(string tempTableName) Parameters Type Name Description System.String tempTableName Overrides BulkUpdateBase.InvokeAction(String) UpdateDestinationTable(IDataReader, String) Declaration protected override void UpdateDestinationTable(IDataReader reader, string tempTableName) Parameters Type Name Description System.Data.IDataReader reader System.String tempTableName Overrides BulkUpdateBase.UpdateDestinationTable(IDataReader, String) Implements IBulkUpdate"
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.html",
    "title": "Class SqlServerSchemaLoader | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader Implementácia IDatabaseSchemaLoader<T> , ktorá načítava schému SQL Server databáz. Inheritance System.Object SqlServerSchemaLoader Implements IDatabaseSchemaLoader < System.Data.SqlClient.SqlConnection > IDatabaseSchemaLoader Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public class SqlServerSchemaLoader : IDatabaseSchemaLoader<SqlConnection>, IDatabaseSchemaLoader Methods GetDefaultValueString(String) Upraví reťazec rawDefaultValueString tak, aby z neho bolo možné získať predvolenú hodnotu stĺpca. Declaration protected virtual string GetDefaultValueString(string rawDefaultValueString) Parameters Type Name Description System.String rawDefaultValueString Reťazec predvolenej hodnoty stĺpca tak, ako je uložený v databáze. Returns Type Description System.String Upravený reťazec. LoadSchema(SqlConnection) Načíta celú schému databázy určenej spojením connection . Declaration public DatabaseSchema LoadSchema(SqlConnection connection) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Spojenie na databázu. Returns Type Description DatabaseSchema Vráti schému celej databázy. Remarks Štandardne sa na získanie schémy vytvorí nové spojenie na databázu podľa vstupného spojenia connection . Ak je však vstupné spojenie exkluzívne, použije sa priamo. Exceptions Type Condition System.ArgumentNullException Hodnota connection je null . System.ArgumentException LoadTableSchema(SqlConnection, String) Načíta schému tabuľky tableName z databázy connection . Declaration public TableSchema LoadTableSchema(SqlConnection connection, string tableName) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Spojenie na databázu. System.String tableName Meno tabuľky, ktorej schéma sa načíta. Returns Type Description TableSchema Vráti načítanú schému tabuľky, alebo hodnotu null , ak taká tabuľka neexistuje. Remarks Štandardne sa na získanie schémy vytvorí nové spojenie na databázu podľa vstupného spojenia connection . Ak je však vstupné spojenie exkluzívne, použije sa priamo. Exceptions Type Condition System.ArgumentNullException Hodnota connection je null . System.ArgumentException OnParseDefaultValue(SqlServerParseDefaultValueEventArgs) Vyvolá udalosť ParseDefaultValue s argumentami e . Declaration protected virtual void OnParseDefaultValue(SqlServerParseDefaultValueEventArgs e) Parameters Type Name Description SqlServerParseDefaultValueEventArgs e Argumenty udalosti. SupportsConnectionType(SqlConnection) Kontroluje, či dokáže načítať schému zo spojenia connection , tzn. či zadané spojenie je spojenie na SQL Server databázu. Declaration public bool SupportsConnectionType(SqlConnection connection) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Spojenie na databázu. Returns Type Description System.Boolean true , ak je možné načítať schému databázy, false , ak to možné nie je. Events ParseDefaultValue Udalosť vyvolaná pri parsovaní predvolenej hodnoty stĺpca. V obsluhe je možné predvolenú hodnotu parsovať vlastným spôsobom, ak interné parsovanie zlyhalo. Declaration public event EventHandler<SqlServerParseDefaultValueEventArgs> ParseDefaultValue Event Type Type Description System.EventHandler < SqlServerParseDefaultValueEventArgs > Remarks V obsluhe udalosti je možné spraviť vlatné parsovanie predvolenej hodnoty stĺpca. Ak je v obsluhe predvolená hodnota rozparsovaná, je potrebné ju nastaviť v argumente DefaultValue a zároveň je potrebné nastaviť Handled na true . Explicit Interface Implementations IDatabaseSchemaLoader.LoadSchema(Object) Načíta celú schému databázy určenej spojením connection . Declaration DatabaseSchema IDatabaseSchemaLoader.LoadSchema(object connection) Parameters Type Name Description System.Object connection Spojenie na databázu. Returns Type Description DatabaseSchema Vráti schému celej databázy. Remarks Štandardne sa na získanie schémy vytvorí nové spojenie na databázu podľa vstupného spojenia connection . Ak je však vstupné spojenie exkluzívne, použije sa priamo. Exceptions Type Condition System.ArgumentNullException Hodnota connection je null . System.ArgumentException IDatabaseSchemaLoader.LoadTableSchema(Object, String) Načíta schému tabuľky tableName z databázy connection . Declaration TableSchema IDatabaseSchemaLoader.LoadTableSchema(object connection, string tableName) Parameters Type Name Description System.Object connection Spojenie na databázu. System.String tableName Meno tabuľky, ktorej schéma sa načíta. Returns Type Description TableSchema Vráti načítanú schému tabuľky, alebo hodnotu null , ak taká tabuľka neexistuje. Remarks Štandardne sa na získanie schémy vytvorí nové spojenie na databázu podľa vstupného spojenia connection . Ak je však vstupné spojenie exkluzívne, použije sa priamo. Exceptions Type Condition System.ArgumentNullException Hodnota connection je null . System.ArgumentException IDatabaseSchemaLoader.SupportsConnectionType(Object) Kontroluje, či dokáže načítať schému zo spojenia connection , tzn. či zadané spojenie je spojenie na SQL Server databázu. Declaration bool IDatabaseSchemaLoader.SupportsConnectionType(object connection) Parameters Type Name Description System.Object connection Spojenie na databázu. Returns Type Description System.Boolean true , ak je možné načítať schému databázy, false , ak to možné nie je. Implements IDatabaseSchemaLoader<T> IDatabaseSchemaLoader"
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerParseDefaultValueEventArgs.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerParseDefaultValueEventArgs.html",
    "title": "Class SqlServerParseDefaultValueEventArgs | Kros.Libs",
    "keywords": "Class SqlServerParseDefaultValueEventArgs Argumenty pre udalosť ParseDefaultValue . Inheritance System.Object System.EventArgs SqlServerParseDefaultValueEventArgs Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public class SqlServerParseDefaultValueEventArgs : EventArgs Constructors SqlServerParseDefaultValueEventArgs(String, String, SqlDbType, String, Object) Vytvorí a inicializuje inštanciu argumentov. Declaration public SqlServerParseDefaultValueEventArgs(string tableName, string columnName, SqlDbType sqlDbType, string defaultValueString, object defaultValue) Parameters Type Name Description System.String tableName Meno tabuľky ktorej schéma sa načítava. System.String columnName Meno stĺpca, ktorého predvolená hodnota sa parsuje. System.Data.SqlDbType sqlDbType Dátový typ stĺpca, ktorého predvolená hodnota sa parsuje. System.String defaultValueString Predvolená hodnota stĺpca - reťazec, ktorý sa parsuje. System.Object defaultValue Hodnota, ktorá bola získaná štandardným parserom. Properties ColumnName Meno stĺpca, ktorého predvolená hodnota sa parsuje. Declaration public string ColumnName { get; } Property Value Type Description System.String DefaultValue Hodnota, ktorá bola získaná štandardným parserom. Pri vlastnej obsluhe je potrebné tu nastaviť vlastnú hodnotu. Declaration public object DefaultValue { get; set; } Property Value Type Description System.Object DefaultValueString Predvolená hodnota stĺpca - reťazec, ktorý sa parsuje. Declaration public string DefaultValueString { get; } Property Value Type Description System.String Handled Je potrebné nastaviť na true , ak bola v obsluhe udalosti nastavená vlastná hodnota DefaultValue . Declaration public bool Handled { get; set; } Property Value Type Description System.Boolean SqlDbType Dátový typ stĺpca, ktorého predvolená hodnota sa parsuje. Declaration public SqlDbType SqlDbType { get; } Property Value Type Description System.Data.SqlDbType TableName Meno tabuľky ktorej schéma sa načítava. Declaration public string TableName { get; } Property Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Data.Schema.ISchemaCacheKeyGenerator-1.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.ISchemaCacheKeyGenerator-1.html",
    "title": "Interface ISchemaCacheKeyGenerator<T> | Kros.Libs",
    "keywords": "Interface ISchemaCacheKeyGenerator<T> Generátor kľúča pre spojenie na databázu. Používa ho DatabaseSchemaCache . Inherited Members ISchemaCacheKeyGenerator.GenerateKey(Object) Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public interface ISchemaCacheKeyGenerator<T> : ISchemaCacheKeyGenerator Type Parameters Name Description T Typ spojenia na databázu. Methods GenerateKey(T) Vygeneruje kľúč pre spojenie connection . Declaration string GenerateKey(T connection) Parameters Type Name Description T connection Spojenie na databázu. Returns Type Description System.String Reťazec."
  },
  "api/Kros.Utils/Kros.Data.Schema.DatabaseSchemaCache.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.DatabaseSchemaCache.html",
    "title": "Class DatabaseSchemaCache | Kros.Libs",
    "keywords": "Class DatabaseSchemaCache Implementácia IDatabaseSchemaCache . Po pridaní loader-ov umožňuje načítavať schému databázy. Načítanie schémy je pomalá záležitosť a preto sa načítaná schéma kešuje. Pri ďalšej požiadavke na rovnakú schému sa už nenačíta z databázy, ale je vrátená z keše. Inheritance System.Object DatabaseSchemaCache Implements IDatabaseSchemaCache Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class DatabaseSchemaCache : IDatabaseSchemaCache Remarks DatabaseSchemaCache je potrebné inicializovať potrebným loaderom IDatabaseSchemaLoader , ktorý načíta schému. Zároveň každý loader musí mať špecifikovaný generátor kľúča ISchemaCacheKeyGenerator . Generátory kľúča pre rôzne typy databáz musia vytvárať navzájom rôzne kľúče, aby sa nestalo, že dva rôzne generátory vygenerujú rovnaký kľúč. Pre jednoduché použitie je implementovaná vlastnosť Default a nie je tak nutné si vytvárať vlastnú inštanciu keše. Properties Default Inštancia DatabaseSchemaCache určená na bežné použitie. Štandardne obsahuje loader pre SQL Server ( SqlServerSchemaLoader ). Declaration public static DatabaseSchemaCache Default { get; } Property Value Type Description DatabaseSchemaCache Methods AddSchemaLoader(IDatabaseSchemaLoader, ISchemaCacheKeyGenerator) Pridá do keše loader na načítavanie schémy databázy, spolu s generátorom kľúčov pre načítanú shému keyGenerator . Declaration public void AddSchemaLoader(IDatabaseSchemaLoader loader, ISchemaCacheKeyGenerator keyGenerator) Parameters Type Name Description IDatabaseSchemaLoader loader Loader pre načítavanie schémy databázy. ISchemaCacheKeyGenerator keyGenerator Generátor kľúča pre schému databázy. Databáza sa interne drží v keši pod vygenerovaným kľúčom. Exceptions Type Condition System.ArgumentNullException Hodnota loader alebo keyGenerator je null . ClearAllSchemas() Vyčistí celú keš - vymaže všetky načítané schémy. Declaration public void ClearAllSchemas() ClearSchema(Object) Zruší z keše schému databázy načítanú pre spojenie connection . Declaration public void ClearSchema(object connection) Parameters Type Name Description System.Object connection Spojenie na databázu. Exceptions Type Condition System.InvalidOperationException Keš neobsahuje loader pre spojenie na databázu connection . ClearSchemaLoaders() Vymaže všetky loader-y schém. Declaration public void ClearSchemaLoaders() GetSchema(Object) Vráti schému databázy pre spojenie connection . Declaration public DatabaseSchema GetSchema(object connection) Parameters Type Name Description System.Object connection Spojenie na databázu. Returns Type Description DatabaseSchema Schéma danej databázy. Exceptions Type Condition System.InvalidOperationException Keš neobsahuje loader pre spojenie na databázu connection . RefreshSchema(Object) Načíta schému databázy pre spojenie connection . Schéma je načítaná priamo z databázy aj v prípade, že už je uložená v keši. Declaration public DatabaseSchema RefreshSchema(object connection) Parameters Type Name Description System.Object connection Spojenie na databázu. Returns Type Description DatabaseSchema Schéma danej databázy. Exceptions Type Condition System.InvalidOperationException Keš neobsahuje loader pre spojenie na databázu connection . RemoveSchemaLoader(IDatabaseSchemaLoader) Vymaže zadaný loader databázovej schémy. Declaration public void RemoveSchemaLoader(IDatabaseSchemaLoader loader) Parameters Type Name Description IDatabaseSchemaLoader loader Loader databázovej schémy, ktorý sa má vymazať. Implements IDatabaseSchemaCache"
  }
}